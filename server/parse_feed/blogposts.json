[{"title":"Books that helped me become a professional web developer","link":"http://www.suburban-glory.com/blog?page=179","author":"Andy Walpole","publishedDate":"1371537484000","contentSnippet":"I've been working full-time as a web developer since 2009, previously creating my first website with Microsoft's Frontpage in ...","content":"<p>I've been working full-time as a web developer since 2009, previously creating my first website with Microsoft's Frontpage in 2002 (remember that?!).</p>\n\n<p>Apart from a taking a few modules on an Open University course, I've gained 99% of my skills autodidactically.</p>\n\n<p>To do this I followed a total immersion method to the knowledge I sought to gain. This means sucking up information from any source: blogs, video tutorials, forums and books.</p>\n\n<p>As I write this article, on a bookshelf to my left are over 30 web design books that I have bought over the years. Not all of them were rewarding purchases, but I consider some to be worth their weight in gold. Below I list the best of them.</p>\n\n<h3>JavaScript</h3>\n\n<p>Like many developers, I came to JavaScript after first learning PHP. There are many hurdles to jump over, but if you persevere you will come to love this programming language.</p>\n\n<p>At first, it's minimal number of inbuilt methods stand in contrast to thousands of PHP functions. Initially, being used to accessing a catalogue of high-level functions, this can seem alarming, but you soon realise that this is liberating: you don't have to wade through countless inconsistently named functions like in PHP.</p>\n\n<p>Secondly, differences in implementation between the current and legacy browsers makes CSS broswer quarks look minor in comparison. Thankfully, IE7 and IE8 are declining, but there is still a way to go yet.</p>\n\n<p>Also, it is a rapidly expanding language, not just with EMCA Script 5 and 6; but also JavaScript libraries, frameworks, browser advances, template systems, command line tools and unit testing. No other contemporary programming language has such a dynamic userbase.</p>\n\n<p>A handful of books are responsible for taking my JavaScript skills to a higher level.</p>\n\n<p><strong>John Ressig: Pro JavaScript Techniques (Apress, 2006)</strong></p>\n\n<p><img alt=\"Pro JavaScript Techniques\" src=\"http://www.suburban-glory.com/images/pro-javascript-techniques.jpg\"></p>\n\n<p>Ressig is most commonly known as the inventor of jQuery. It's impossible to underestimate the impact of this library on front-end development. <em>Pro JavaScript Techniques</em> covers a number of areas that will assist you in writing clean, maintainable code. Subjects covered include object-orientated basics, DOM and CSS interaction, reusable code and events. Written at a time when Internet Explorer  6 and 7 where still dominant, it fully details the differences between these browser and the W3C approach. Unfortunately, these are aspects of JavaScript that we still need to be familiar with today. Few would disagree that John Ressig is a key JavaScript face, so buy this book and then ingest and implement his knowledge. It's a book in which that you will always find new information no matter how many times you read it.</p>\n\n<p><strong>Ross Harmes &amp; Dusin Diaz: Pro JavaScript Design Patterns (Apress, 2008)</strong></p>\n\n<p><img alt=\"Pro JavaScript Design Patterns\" src=\"http://www.suburban-glory.com/images/pro-javascript-design-patterns.jpg\"></p>\n\n<p>More than in any other language, using design patterns in JavaScript is essential. If you write over 200 lines of procedural code it will become an unmaintainable mess.</p>\n\n<p>Reading this book was for me the equivalent of lighting a flare in a dark room.</p>\n\n<p>In 269 pages it details dozens of ways in which you can organise your code so that is is extendable and readable.</p>\n\n<p>Because it is a prototypal language there are no classes in JavaScript, but there are ways of mimicking the features of classical inheritance with public, protected and private methods; creating mixin classes and interface emulation. Diaz and Harmes detail all these approaches plus provide a chapter for each commonly used design pattern like singletons, modules, composites, decorators and observers. It's impossible to use this book to fully understand established programming patterns because the subject matter is too complex even for a publication as well written as this. But I can guarantee that it will point you towards the right direction to coding perfection.</p>\n\n<p>Since 2008, ECMA5 Script has introduced new properties like Object.create, Object.preventExtensions and Object.defineProperties to help in handling JavaScript objects. This book doesn't cover EMCA5 additions so I would recommend Addy Osmani's <em>JavaScript Design Patters (2012, O'Reilly)</em> as a compliment to <em>Pro JavaScript Design Patterns</em>.</p>\n\n<p><strong>Peter-Paul Koch: pkk on JavaScript (2007, Voices That Matter)</strong></p>\n\n<p>More basic in subject matter than the previous two books, <em>pkk on JavaScript</em> is an easy-to-read digest of the scripts basics. I bet there are few professional coders who could succinctly describe the theory behind event bubbling and capturing, but Koch makes a reasonable stab at it. If you are a mid-level JavaScript coder you may presume you have full knowledge of the basics like data types, strings, booleans, control structures or functions. If so then perhaps <em>pkk on JavaScript</em> will surprise you by filling some previously unknown gaps in your knowledge.</p>\n\n<h3>Performance</h3>\n\n<p><strong>Steve Souders: High Performance Web Sites / Even Faster Web Sites (2007 and 2009, O'Reilly)</strong></p>\n\n<p><img alt=\"High Performance Web Sites\" src=\"http://www.suburban-glory.com/images/high-performance-web-sites.jpg\"></p>\n\n<p>Steve's opinions on website performance carries more weight than anybody else on the subject. <em>Even Faster Web Sites</em> and in particular its predecessor <em>High Performance Web Sites</em> are landmarks in this discipline. In the pre-broadband era performance considerations were everything. As internet speeds were slow, optimisation techniques to decrease page sizes were paramount. As broadband usage proliferated, web designers brushed these concerns aside. There two publications reminded everybody that web site performance was still paramount in achieving a satisfactory user experience which in turn directly benefited the commercial aims that the web site was built for.</p>\n\n<p>Much of what we take as standard today – minification, placing scripts at in the footer and using Content Delivery Networks – were first popularised by Steve Souders. But this book is no mere polemical piece. It's strength lies in the research that provides data to back up his argument.</p>\n\n<p>Over the last five years browsers have dramatically improved their ability to handle JavaScript, so some of the information in these books is dated. However, a useful companion is perhaps the more recent <em>Professional Website Performance</em> by Peter Smith (2012, Wrox).</p>\n\n<h3>Wordpress</h3>\n\n<p><strong>Brad Williams, David Damstra, Hal Stern: Professional Wordpress Design and Development (2010, Wiley) / Brad Williams, Ozh Richard, Justin Tadlock: Professional Wordpress Plugin Development (2011, Wiley)</strong></p>\n\n<p><img alt=\"Professional Wordpress Plugin Development book\" src=\"http://www.suburban-glory.com/images/professional-wordpress-plugin-development.jpg\"></p>\n\n<p>If you want to understand Wordpress theme and plugin development then these two books are indispensable. Clear, concise and brimming with quality advice, no other current Wordpress guides are as worthy a purchase as these two. They provide a role of both tutorial and reference books.</p>\n\n<p>Wordpress has a loose API, meaning that the code in the tens of thousands of themes and plugins can vary wildly. Actions, hooks, APIs, coding standards, database queries and native helper functions are not comprehensively covered (I'm still waiting for that book), but the chapters do provide the developer a solid foundation for writing quality code.</p>\n\n<p>Like most Open Source projects the official codex is limited and take extreme care when consulting blog articles on Wordpress development: they are often written by those with only limited experience of the platform and PHP.</p>\n\n<p>At least with these two publications you can be confident that you will be provided accurate explanations about fundamental Wordpress PHP essential to every theme and plugin build.</p>\n\n<h3>Drupal</h3>\n\n<p>Over ten years old now it's fantastic to watch how Drupal has progressed from being a tool written by and for developers to one that aims to reach a wider user base. Starting from Drupal 6, new versions have incrementally improved the Content Management System into being one of the most robust and exciting Open Source projects on the net. </p>\n\n<p>However, the entry point for Drupal development – both for themes and modules – is steeper than Wordpress, which is why having books at hand to assist your learning is essential.</p>\n\n<p><strong>Matt Butcher, Matt Farina, Ken Rickard, Greg Dunlap, Larry Garfield, John Albin Wilkins: Drupal 7 Module Development (2010, Packt Publishing)</strong></p>\n\n<p><img alt=\"Drupal 7 Module Development\" src=\"http://www.suburban-glory.com/images/drupal-module-development.jpg\"></p>\n\n<p>Of all the web design publishing houses, Packt is the one to me be most wary of. Expensive to buy, more often than not their books only offer lightweight guides to their respective subject matters.</p>\n\n<p><em>Drupal 7 Module Development</em> is an above average Packt book which offers the reader a good introduction to Drupal plugin creation. While themeing in Drupal 7 can be insanely frustrating, the plugin APIs are, mostly, a joy to work with. Their form building API is probably the best I have ever used. Unlike Wordpress, Drupal has a strict API which intentionally leaves little room for idiosyncratic coding. If you want to build up a repository of trusted third-party modules then this approach is essential. </p>\n\n<p>There is enough detail in <em>Drupal 7 Module Development</em> to provide you with grounding in Drupal PHP basics: hooks, APIs and architecture overview. </p>\n\n<p><strong>Todd Tomlinson and John K. VanDyk: Pro Drupal 7 Development (2010, Apress)</strong></p>\n\n<p><img alt=\"Pro Drupal 7 Development\" src=\"http://www.suburban-glory.com/images/pro-drupal-7-development.jpg\"></p>\n\n<p>While <em>Drupal 7 Module Development</em> is a good starting point, <em>Pro Drupal 7 Development</em> is a 688 page bible that you will need close at hand if you really want to understand Drupal code.</p>\n\n<p>Almost without fail I've found Apress to be a quality publisher of web design and programming books. I read a criticism that <em>Pro HTML5 Accessibility</em> (another informative Apress read on my shelf) is let down by its basic design. Come on! Developers buy books for the quality of its content not to look at pretty pictures and avant-garde typefaces.</p>\n\n<h3>PHP &amp; CSS</h3>\n\n<p>There are no books in my collection for PHP and CSS that I would consider important enough to praise here.</p>\n\n<p>I have the obligatory <em>PHP 6 and MySQL 5</em> / <em>PHP 5 Advanced</em> by Larry Ullman that every novice buys, and <em>PHP Master</em> by Lorna Mitchell which covers design patterns, security and performance, but most of my knowledge of PHP came through incessant practising. </p>\n\n<p>I've build both countless Drupal and Wordpress themes, created my own Content Management System and authored a Wordpress plugin called Affiliate Hoover that used MVC (and with a Drupal port); amongst much else. Writing code for a purpose is far more inspiring than just coding for the sake of it. The official PHP documentation and blog articles were vital in my understanding of the best way to write this programming language.</p>\n\n<p>It's the same with CSS: practice, practice, practise. For a long time (even now), I tried to add some code or method that I had never used before with every website build.</p>\n\n<p>For both CSS and PHP the Sitepoint forum users provided a lot of advice when I became stuck.</p>\n\n<h3>Conclusion</h3>\n\n<p>There is no one source of knowledge for any one web technology. Although I would strongly recommend that you get hold of a quality book before you start learning a new one. These can provide both a guide and they can be used as a reference.</p>\n\n<p>But don't just depend on a book. Join and take part in forums, write down your own discoveries on a blog, use Twitter to keep up to date on the latest news, use an RSS reader to follow web design blogs and publications, read net magazine, bookmark articles of interest in Delicious, go to local tech meetups, and, if you can afford it, go to web design conferences.</p>\n\n<p>Web development isn't a job, it's a way of life. It's not something that you do from 9-5, Monday to Friday and then switch off from the rest of the time. If that isn't what you want, look for another career; take the blue pill instead.\n</p>","categories":[],"uniqueId":"137153","url":"books-helped-become-professional-web-developer","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-two.jpg"},{"title":"Using __autoload() in your Object Orientated Wordpress plugin","link":"http://www.suburban-glory.com/blog?page=178","author":"Andy Walpole","publishedDate":"1363248172000","contentSnippet":"These days autoloading PHP classes is the industry standard and if you write your plugins using Object Oriented code then you ...","content":"<p>These days autoloading PHP classes is the industry standard and if you write your plugins using Object Oriented code then you should look to using it too.</p>\n\n<p>I've just re-factored my <a href=\"http://wordpress.org/extend/plugins/affiliate-hoover/\">Affiliate Hoover plugin</a> into an MVC pattern, and rather than calling each of the two dozen files with require_once() I used the __autoload() function.</p>\n\n<p>If a class is called in a file then PHP will automatically use the __autoload() function to load the file. In order for this to work the class name has to be the same as the file name, ie a class of My_Wordpress has to be in a file called My_Wordpress.php.</p>\n\n<p>The first part requires using set_include_path() to include all directories where the php files might be found:</p>\n\n<pre>\n\n$paths = array(\n    AH_PLUGINNAME_PATH.AH_First_LIBS.AH_DS,\n    AH_PLUGINNAME_PATH.AH_First_CONTROLLER.AH_DS,\n    AH_PLUGINNAME_PATH.AH_First_VIEW.AH_DS,\n    AH_PLUGINNAME_PATH.AH_First_MODEL.AH_DS,\n    get_include_path(),\n    );\n\nset_include_path(implode(PATH_SEPARATOR, $paths));\n\n</pre>\n\n<p>The constants were previously defined in a different file:</p>\n\n<pre>\n\n!defined('AH_DS') ? define('AH_DS', DIRECTORY_SEPARATOR) : die(\"AH_DS already defined: $xyze\");\n!defined('AH_PLUGINNAME_PATH') ? define('AH_PLUGINNAME_PATH', plugin_dir_path(__FILE__)) : die(\"AH_PLUGINNAME_PATH already defined: $xyze\");\n!defined('AH_First_MODEL') ? define('AH_First_MODEL', 'model') : die(\"AH_First_MODEL CONSTANT already defined: $xyze\");\n!defined('AH_First_CONTROLLER') ? define('AH_First_CONTROLLER', 'controller') : die(\"AH_First_CONTROLLER CONSTANT already defined: $xyze\");\n!defined('AH_First_VIEW') ? define('AH_First_VIEW', 'view') : die(\"AH_First_VIEW CONSTANT already defined: $xyze\");\n!defined('AH_First_LIBS') ? define('AH_First_LIBS', 'libs') : die(\"AH_First_LIBS CONSTANT already defined: $xyze\");\n\n</pre>\n\n<p>The __autoload() function is as follow:</p>\n\n<pre>\n\nfunction __autoload($classname) {\n\n    $file = $classname.&#39;.php&#39;;\n    \n    if (stristr(dirname(stream_resolve_include_path($file)), plugin_basename(__DIR__ ))) {\n    \n        if (file_exists(stream_resolve_include_path($file)) &amp;&amp; is_file(stream_resolve_include_path($file))) {\n            \n            @require_once($file);\n\n        }\n\n    }\n\n}\n\n</pre>\n\n<p>If the directory plugin name is found in the path of the class then it checks whether it exists and includes it with require_once();</p>\n\n<p>The if statement using with the stristr function is needed to prevent other non-plugin classes being loaded, causing errors.</p>\n\n<p><a href=\"https://github.com/TCotton/Wordpress-plugin-Affiliate-Hoover/blob/master/config.php\">You can view the code on the Affilate Hoover GitHub repository</a>.</p>","categories":[],"uniqueId":"136324","url":"using-autoload-in-object-orientated-wordpress-plugin","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-three.jpg"},{"title":"A quick way to add a URL redirect feature to Wordpress categories","link":"http://www.suburban-glory.com/blog?page=175","author":"Andy Walpole","publishedDate":"1362485390000","contentSnippet":"My last job at a large multi-national company before my contract expired was to code their Russian website. A major problem ...","content":"<p>My last job at a large multi-national company before my contract expired was to code their Russian website. A major problem that their Russian team faced was not having the resources to translate everything on the English language website or to be able to keep abreast of updates if the content on the English language website changed.</p>\n\n<p>Therefore, the site architecture involved a number of redirects to the English language website. Admittedly, I didn't find this a particularly user-friendly approach for Russian readers but this decision had already been made before I became involved in the project.</p>\n\n<p>A large section of the site was based on categories. A top parent category would divide down into several child categories which would then separate into more child categories. Some of these would redirect to the English language version of the website.</p>\n\n<p>I started off by using John Godley's excellent <a href=\"http://wordpress.org/extend/plugins/redirection/\">Redirection plugin</a>, but the problem was that the user interface was too complicated for the layperson to update and change. I needed to add a field to individual categories so that it was just a simple act for the maintainer of the website to cut and paste a URL into the category form.</p>\n\n<p>My starting point was the code found on the article called <a href=\"http://pippinsplugins.com/adding-custom-meta-fields-to-taxonomies/\">Adding Custom Meta Fields to Taxonomies</a>. I won't reproduce the code here because it is quite a faithful use of their PHP expect that I changed it into a class.</p>\n\n<p>This is how the category interface looks:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/category-image.jpg\" alt=\"wordpress categories\"></p>\n\n<p>The key method that I added was this:</p>\n\n<pre>\n\n/** \n     * Category_Add_Field::redirect() \n     * \n     * @param string $id \n     * @return redirect \n     */ \n    public function redirect($id) { \n\n        $term_meta = get_option(&quot;taxonomy_&quot; . $id); \n        \n        if ($term_meta != false &amp;&amp; (isset($term_meta[&#39;custom_term_meta_url&#39;]) &amp;&amp; $term_meta[&#39;custom_term_meta_url&#39;] != &#39;&#39;)) { \n\n            ob_start(); \n            wp_redirect($term_meta[&#39;custom_term_meta_url&#39;], 302); \n            ob_end_flush(); \n            exit; \n\n        } \n\n    }\n\n</pre>\n\n<p>It's very simple. If the category term has a redirect URL in the postmeta table then call the wp_redirect() function.</p>\n\n<p>The method is called in the very top of the header.php file:</p>\n\n<pre>\n\nif (class_exists('\\content\\Category_Add_Field')) {\n \n$cat = get_query_var('cat');\n// category redirection if external URL is set in the category page\n \nif ($cat != '') {\n \ncontentCategory_Add_Field::redirect(get_query_var('cat'));\n \n}\n \n} else {\n \necho 'No class called Category_Add_Field has been found';\n \n} \n\n</pre>\n\n<p>Yes, I know that the best method is to add these URL redirects to the .htaccess file, but time was against me. This is a quick way of creating a Wordpress category redirect feature.</p>\n\n<p>You can find the full class on this <a href=\"https://gist.github.com/TCotton/5088476\">GitGist</a>\n</p>","categories":[],"uniqueId":"136248","url":"quick-way-add-url-redirect-feature-wordpress-categories","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-four.jpg"},{"title":"A PHP class to create a Wordpress custom post type with dynamic metaboxes","link":"http://www.suburban-glory.com/blog?page=174","author":"Andy Walpole","publishedDate":"1361253525000","contentSnippet":"On a theme I have been working on there was the need to create dynamic metaboxes for a basic jobs listing section. The listing ...","content":"<p>On a theme I have been working on there was the need to create dynamic metaboxes for a basic jobs listing section. The listing page had four different fields for every job: Title, description, location and date. The user needed the ability to add, edit or delete jobs.</p>\n\n<p>Coding this feature into Wordpress was quite a task. It's one thing to code a complex layout, but quite another to create a user-friendly interface in the admin area. I find with Wordpress that doing so in a theme means you really have to jump through coding hoops, whereas Drupal loves these types of complex forms / layouts.</p>\n\n<p>The first problem is that there is no inbuilt Wordpress validation hook that displays error messages – so you need to write your own. The second issue is the use of multidimensional arrays for creating the form and then processing the data after editing, deletions or additions. This can create some challenging coding problems.</p>\n\n<p>I already have a PHP class that I use when creating post types so I modified that for this purpose. As a caveat, the original code was based on somebody else's blog post that I came across sometime ago. I've tried to find it so as to give acknowledgement and a link. Apologies to that person but if you get in touch I will amend this article to do so. Their particular blog post first introduced me to the idea of using the add_filter() hooks to change the post setting from published to draft as well as adding a redirect that allows the displaying of an error message.</p>\n\n<p>The final code is on this <a href=\"https://gist.github.com/TCotton/4966697\">GitGist</a>, but I'll run through it all one method at a time.</p>\n\n<p>Before I start I'll state that this approach is really only for serious PHP heads. If that's not you, then it's best if you try to find a plugin to achieve the same functionality.</p>\n\n<p>This is the structure of the class:</p>\n\n<pre>\n\nnamespace content;\n\nclass Content_Type_Jobs_Template {\n\n    static $wpdb = null;\n\n    public function __construct() {\n\n        global $wpdb;\n        self::$wpdb = $wpdb;\n\n        add_action(&#39;init&#39;, array(&amp;$this, &#39;content_type&#39;));\n\n        // I have a habit of using sessions but forgetting to use session_start()\n        // So I place this in the __construct method and use session_regenerate_id() for security\n        if (session_id() == &#39;&#39;) {\n            session_start();\n            session_regenerate_id(true);\n        }\n\n    }\n\n    public function metabox_attributes() {\n    } \n\n    public function content_type() {\n    }\n\n    public function add_metaboxes() {\n    }\n\n    public function text_one_html() {\n    } \n\n    protected function validation($form) {\n    }\n\n    public function save_postdata() {\n    } \n\n    public function add_redirect_filter() {\n    } \n\n    public function my_redirect_post_location_filter($location) {\n    } \n\n    public function my_post_admin_notices() {\n    } \n\n} // end class\n\nnew contentContent_Type_Jobs_Template;\n\n</pre>\n\n<p>As the code serves one purpose only it makes sense to take an Object Orientated approach to keep it organised in one file. If you are going to use classes then also using a namespace helps to avoid naming clashes. This means that it won't work on servers that run less than PHP 5.3, but as that release is a few years old now that isn't something I'm bothered about.</p>\n\n<p>The first method is metabox_attributes():</p>\n\n<pre>\n\npublic function metabox_attributes() {\n\n    return array(\n\n        &#39;title&#39; =&gt; array(\n            &#39;name&#39; =&gt; &#39;title&#39;,\n            &#39;type&#39; =&gt; &#39;text&#39;,\n            &#39;title&#39; =&gt; &#39;Title&#39;,\n            &#39;description&#39; =&gt; &#39;The job title&#39;,\n            ),\n\n        &#39;description&#39; =&gt; array(\n            &#39;name&#39; =&gt; &#39;description&#39;,\n            &#39;type&#39; =&gt; &#39;text&#39;,\n            &#39;title&#39; =&gt; &#39;Description&#39;,\n            &#39;description&#39; =&gt; &#39;Short description&#39;,\n            ),\n\n        &#39;location&#39; =&gt; array(\n            &#39;name&#39; =&gt; &#39;location&#39;,\n            &#39;type&#39; =&gt; &#39;text&#39;,\n            &#39;title&#39; =&gt; &#39;Location&#39;,\n            &#39;description&#39; =&gt; &#39;Location of job&#39;,\n            ),\n\n        &#39;date&#39; =&gt; array(\n            &#39;name&#39; =&gt; &#39;date&#39;,\n            &#39;type&#39; =&gt; &#39;text&#39;,\n            &#39;title&#39; =&gt; &#39;Date&#39;,\n            &#39;description&#39; =&gt; &#39;Date posted&#39;,\n            ),\n\n        );\n\n} \n\n</pre>\n\n<p>This is where you declare your form field name and type attributes plus a title and description that is used in the display.</p>\n\n<p>Next comes the content_type() with uses the Wordpress register_post_type() function. For more information on this <a href=\"http://codex.wordpress.org/Function_Reference/register_post_type\">read the guide on the official Wordpress website</a>.</p>\n\n<pre>\n\npublic function content_type() {\n\n    $labels = array(\n        &#39;name&#39; =&gt; _x(&#39;Jobs Layout&#39;, &#39;post type general name&#39;),\n        &#39;singular_name&#39; =&gt; _x(&#39;Jobs Layout&#39;, &#39;post type singular name&#39;),\n        &#39;add_new&#39; =&gt; _x(&#39;Add New&#39;, &#39;book&#39;),\n        &#39;add_new_item&#39; =&gt; __(&#39;Jobs Layout&#39;),\n        &#39;edit_item&#39; =&gt; __(&#39;Edit Jobs Layout type&#39;),\n        &#39;new_item&#39; =&gt; __(&#39;New Jobs Layout type&#39;),\n        &#39;all_items&#39; =&gt; __(&#39;All Jobs Layout types&#39;),\n        &#39;view_item&#39; =&gt; __(&#39;View Jobs Layout types&#39;),\n        &#39;search_items&#39; =&gt; __(&#39;Search Jobs Layout types&#39;),\n        &#39;not_found&#39; =&gt; __(&#39;No Jobs Layout types found&#39;),\n        &#39;not_found_in_trash&#39; =&gt; __(&#39;No Jobs Layout types found in Trash&#39;),\n        &#39;parent_item_colon&#39; =&gt; &#39;&#39;,\n        &#39;menu_name&#39; =&gt; __(&#39;Jobs Layout&#39;),\n        );\n\n    $args = array(\n        &#39;labels&#39; =&gt; $labels,\n        &#39;description&#39; =&gt; &#39;Jobs&#39;,\n        &#39;public&#39; =&gt; true,\n        &#39;publicly_queryable&#39; =&gt; true,\n        &#39;show_ui&#39; =&gt; true,\n        &#39;show_in_menu&#39; =&gt; true,\n        &#39;query_var&#39; =&gt; true,\n        &#39;rewrite&#39; =&gt; true,\n        &#39;capability_type&#39; =&gt; &#39;post&#39;,\n        &#39;has_archive&#39; =&gt; true,\n        &#39;hierarchical&#39; =&gt; false,\n        &#39;menu_position&#39; =&gt; null,\n        &#39;register_meta_box_cb&#39; =&gt; array(&amp;$this, &#39;add_metaboxes&#39;),\n        &#39;taxonomies&#39; =&gt; array(&#39;category&#39;),\n        &#39;supports&#39; =&gt; array(\n            &#39;title&#39;,\n            &#39;editor&#39;,\n            &#39;author&#39;,\n            &#39;thumbnail&#39;,\n            &#39;excerpt&#39;,\n            ));\n\n    add_action(&#39;save_post&#39;, array(&amp;$this, &#39;save_postdata&#39;), 10, 2);\n    add_action(&#39;admin_notices&#39;, array(&amp;$this, &#39;my_post_admin_notices&#39;), 10, 1);\n    register_post_type(&#39;jobs&#39;, $args);\n\n}\n\n</pre>\n\n<p>The register_meta_box_cb key uses the following method:</p>\n\n<pre>\n\npublic function add_metaboxes() {\n\n        add_meta_box(&#39;jobs_metabox&#39;, &#39;Add individual jobs below&#39;, array(&amp;$this, &#39;text_one_html&#39;),\n            &#39;jobs&#39;, &#39;normal&#39;, &#39;high&#39;);\n\n    }\n\n</pre>\n\n<p>Which in turn calls text_one_html().</p>\n\n<p>This is where things get tricky. The method is in two different parts.</p>\n\n<p>The first uses the array in metabox_attributes() to create an empty form:</p>\n\n<pre>\n\n$new_meta_boxes = $this-&gt;metabox_attributes();\n\n$form = &#39;&lt;table id=&quot;list-table&quot;&gt;&#39;;\n$form .= &#39;&lt;tbody id=&quot;the-list&quot; width=&quot;100%&quot;&gt;&#39;;\n\nforeach ($new_meta_boxes as $key =&gt; $result) {\n\n    if ($result[&#39;name&#39;] == &#39;title&#39;) {\n\n        $form .= &#39;&lt;thead&gt;&#39;;\n        $form .= &#39;&lt;tr&gt;&#39;;\n        $form .= &#39;&lt;th class=&quot;left&quot;&gt;&lt;h4&gt;Add a new job below&lt;/h4&gt;&lt;/th&gt;&#39;;\n        $form .= &#39;&lt;th&gt;&lt;h4&gt;Values&lt;/h4&gt;&lt;/th&gt;&#39;;\n        $form .= &#39;&lt;/tr&gt;&#39;;\n        $form .= &#39;&lt;/thead&gt;&#39;;\n\n    }\n\n    if ($result[&#39;type&#39;] == &#39;text&#39;) {\n\n        $form .= &#39;&lt;tr&gt;&#39;;\n        $form .= &#39;&lt;td class=&quot;left&quot; width=&quot;30%&quot;&gt;&#39;;\n        $form .= &#39;&lt;label for=&quot;&#39;.$result[&#39;name&#39;].&#39;&quot;&gt;&lt;strong&gt;&#39;.$result[&#39;title&#39;].&#39;&lt;/strong&gt;&lt;/label&gt;&#39;;\n        $form .= &#39;&lt;div&gt;&#39;.$result[&#39;description&#39;].&#39;&lt;/div&gt;&#39;;\n        $form .= &#39;&lt;/td&gt;&#39;;\n        $form .= &#39;&lt;td width=&quot;70%&quot;&gt;&#39;;\n        $form .= &#39;&lt;input type=&quot;text&quot; name=&quot;&#39;.$result[&#39;name&#39;].&#39;&quot; value=&quot;&#39;;\n        $form .= isset($_SESSION[$result[&#39;name&#39;]]) ? $_SESSION[$result[&#39;name&#39;]] : null;\n        $form .= &#39;&quot; class=&quot;regular-text&quot;/&gt;&#39;;\n        $form .= &#39;&lt;/td&gt;&#39;;\n        $form .= &#39;&lt;/tr&gt;&#39;;\n\n    }\n\n} // end foreach\n\n$form .= &#39;&lt;/tbody&gt;&#39;;\n$form .= &#39;&lt;/table&gt;&#39;;\n\necho $form;\n\n</pre>\n\n<p>If the user has already created job listings then this data needs to be placed into forms underneath the empty one.</p>\n\n<pre>\n\n$meta = get_post_meta($post-&gt;ID);\n\n$z = $y = $x = 0;\n\n// takes the meta data from the database and creates forms\n// populated by the data\n\nif (!empty($meta)) {\n\n    // remove the _edit_last and _edit_lock arrays from the returned multidimensional array\n    $remove = array(&#39;_edit_last&#39;, &#39;_edit_lock&#39;);\n    $meta = array_diff_key($meta, array_flip($remove));\n\n    $form = &#39;&lt;table id=&quot;list-table&quot;&gt;&#39;;\n    $form .= &#39;&lt;tbody id=&quot;the-list&quot; width=&quot;100%&quot;&gt;&#39;;\n\n    foreach ($meta as $key =&gt; $value) {\n\n        // remove all digits from the key. New form unique form attributes are created below\n        $key = preg_replace(&#39;/d/&#39;, &#39;&#39;, $key);\n\n        // make sure that all returned keys fit the original keys in the metabox_attributes method\n        if (!in_array($key, array_keys($this-&gt;metabox_attributes()))) continue;\n\n        // for every number of total keys in the metabox_attributes add an extra digit\n        // this is to ensure that all name attributes are unique\n        if ($x++ % count($this-&gt;metabox_attributes()) == 0) {\n\n            $y += 1;\n\n        }\n\n        // remove digit from the string\n        // and then use array_intersect_key() and array_flip() to find the array of\n        // the relevant corresponding key from the meta_attributes() method\n        // this is then used in the html\n\n        $key_array = array_intersect_key($this-&gt;metabox_attributes(), array_flip(array($key)));\n\n        if ($key_array[$key][&#39;name&#39;] == &#39;title&#39;) {\n\n            $form .= &#39;&lt;thead&gt;&#39;;\n            $form .= &#39;&lt;tr&gt;&#39;;\n            $form .= &#39;&lt;th class=&quot;left&quot;&gt;&lt;h4&gt;&#39;.implode(&#39;&#39;, $value).&#39;&lt;/h4&gt;&lt;/th&gt;&#39;;\n            $form .= &#39;&lt;th&gt; &lt;/th&gt;&#39;;\n            $form .= &#39;&lt;/tr&gt;&#39;;\n            $form .= &#39;&lt;/thead&gt;&#39;;\n\n        }\n\n        if ($key_array[$key][&#39;type&#39;] == &#39;text&#39;) {\n\n            $form .= &#39;&lt;tr&gt;&#39;;\n            $form .= &#39;&lt;td class=&quot;left&quot; width=&quot;30%&quot;&gt;&#39;;\n            $form .= &#39;&lt;label for=&quot;&#39;.$key.$y.&#39;&quot;&gt;&lt;strong&gt;&#39;.$key_array[$key][&#39;title&#39;].\n                &#39;&lt;/strong&gt;&lt;/label&gt;&#39;;\n            $form .= &#39;&lt;div&gt;&#39;.$key_array[$key][&#39;description&#39;].&#39;&lt;/div&gt;&#39;;\n            $form .= &#39;&lt;/td&gt;&#39;;\n            $form .= &#39;&lt;td width=&quot;70%&quot;&gt;&#39;;\n            $form .= &#39;&lt;input type=&quot;text&quot; name=&quot;&#39;.$key.$y.&#39;&quot; value=&quot;&#39;;\n            $form .= isset($_SESSION[$key.$y]) ? $_SESSION[$key.$y] : implode(&#39;&#39;, $value);\n            $form .= &#39;&quot; class=&quot;regular-text&quot;/&gt;&#39;;\n            $form .= &#39;&lt;/td&gt;&#39;;\n            $form .= &#39;&lt;/tr&gt;&#39;;\n\n        }\n\n    }\n\n    $form .= &#39;&lt;/tbody&gt;&#39;;\n    $form .= &#39;&lt;/table&gt;&#39;;\n\n    echo $form;\n\n}\n\n</pre>\n\n<p>What the code is doing is removing unwanted keys from the array ('_edit_last' and '_edit_lock'), stripping the previously added digits at the end of the name attribute values; making sure that the key is in the metabox_attributes() array and it uses the modulus operator to add new a digit with every iteration of the total number of arrays in metabox_attributes() . This is necessary not just to keep the form accessible with valid HTML, but also to ensure that the database entries are unique. Phew, there's a lot happening in this block of code.</p>\n\n<p>Here is the validation:</p>\n\n<pre>\n\nprotected function validation($form) {\n\n    $error = array();\n\n    // filter out unwanted parts of the $_POST\n    foreach ($form as $key =&gt; $value) {\n        if (!in_array(preg_replace(&#39;/d/&#39;, &#39;&#39;, $key), array_keys($this-&gt;metabox_attributes()))) {\n            unset($form[$key]);\n        } else {\n            // this session data is used if there is a form error to repopulate the form fields\n            // if the form has no error then the session data is destroyed\n            $_SESSION[$key] = $value;\n        }\n    }\n\n    // make sure that the the values are in proportion to that specified in the number\n    // of fields in the metabox_attributes. For instance if there are 4 fields in the method, then there must\n    // be no blank values in multiplications of 4, ie 4, 8 12\n    if (count(array_values(array_filter($form, &#39;strlen&#39;))) % count($this-&gt;metabox_attributes()) == 0) {\n\n        return true;\n\n    } else {\n\n        $error[] = &#39;Please make sure that all &#39;.count($this-&gt;metabox_attributes()).\n            &#39; fields are filled in or leave all form fields empty for the job listing to be deleted&#39;;\n\n        return $error;\n\n    }\n\n}\n\n</pre>\n\n<p>Firstly it again uses the metabox_attributes() array so as to remove unwanted parts of the form. What is left are only the elements that are used for the job listing data. Then it counts the total number of FULL values and using the modulus operator compares it to the number of keys in the multidimensional array in metabox_attributes(). count(array_values(array_filter($form, 'strlen')))  was something I took from php.net and which removes empty array values.</p>\n\n<p>If the number is different it means that a field has been left blank which then creates an error message.</p>\n\n<p>Note how all job form attributes and values are saved as a session. These are used in the forms if validation fails. They are destroyed on successful completion.</p>\n\n<p>The save_postdata() method is in two parts. After validation, the code is forked between success or failure.</p>\n\n<p>If there are no errors, then the data is either saved or deleted:</p>\n\n<pre>\n\nif ($error === true) {\n\n\t// destory session here and save meta data\n\n\tforeach ($form as $key =&gt; $value) {\n\n\t\t// filter out unwanted parts of the $_POST\n\t\tif (!in_array(preg_replace(&#39;/d/&#39;, &#39;&#39;, $key), array_keys($this-&gt;metabox_attributes()))) continue;\n\n\n\t\tif ($value != &#39;&#39;) {\n\n\t\t\tupdate_post_meta($post-&gt;ID, $key, strip_tags($value), false);\n\n\t\t} else {\n\n\t\t\tdelete_post_meta($post-&gt;ID, $key, false);\n\n\t\t}\n\n\t\t// destroy session\n\n\t\t$_SESSION = array();\n\n\t} // end foreach\n\n}\n\n</pre>\n\n<p>The second part handle errors:</p>\n\n<pre>\n\nif ((isset($_POST[&#39;publish&#39;]) || isset($_POST[&#39;save&#39;])) &amp;&amp; $_POST[&#39;post_status&#39;] == &#39;publish&#39;) {\n\n    self::$wpdb-&gt;update(self::$wpdb-&gt;posts, array(&#39;post_status&#39; =&gt; &#39;pending&#39;), array(&#39;ID&#39; =&gt; $post-&gt;\n            ID));\n\n} // end fi\n\nadd_filter(&#39;wp_insert_post_data&#39;, array(&amp;$this, &#39;add_redirect_filter&#39;), 102);\n\n$this-&gt;add_redirect_filter();\n\n$_SESSION[&#39;error&#39;] = serialize($error);\n\n</pre>\n\n<p>Firstly it changes the post status from published to pending, it then calls the add_filter() hook and  the add_redirect_filter() method and finally the $error array is serialised into a session to be used later on.</p>\n\n<p>The last method in the class is my_post_admin_notices(). This is how the error messages are displayed to the user.</p>\n\n<pre>\n\npublic function my_post_admin_notices() {\n\n    if (!isset($_GET[&#39;message&#39;])) return;\n\n    if ($_GET[&#39;message&#39;] == &#39;102&#39;) {\n\n        global $post;\n\n        // abort if not my custom type\n        if ($post-&gt;post_type != &#39;jobs&#39;) return $post-&gt;ID;\n\n        $message = &#39;&lt;div id=&quot;notice&quot; class=&quot;error&quot;&gt;&lt;p&gt;&#39;;\n        $message .= &quot;Error: please check that all form values are correct - &lt;br&gt;&quot;;\n        $message .= isset($_SESSION[&#39;error&#39;]) ? implode(&#39;&lt;br&gt;&#39;, unserialize($_SESSION[&#39;error&#39;])) : null;\n        $message .= &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n        echo $message;\n\n        unset($_SESSION[&#39;error&#39;]);\n\n    } // end if\n\n} \n\n</pre>\n\n<h3>Conclusion</h3>\n\n<p>The code works and is used on a site soon to be moved to production. I'll post up the URL when it is live. Again, the full class can be found on this <a href=\"https://gist.github.com/TCotton/4966697\">GitGist</a>.</p>\n\n<p>I accessed the data to create a table in the theme with this code:</p>\n\n<pre>\n\nif (class_exists(&#39;contentContent_Type_Jobs_Template&#39;)) {\n\n    $meta = get_post_meta($id);\n\n    $table = &#39;&lt;table&gt;\n&lt;caption&gt;Current vacancies&lt;/caption&gt;\n&lt;tr class=&quot;header-row&quot;&gt;\n&lt;td id=&quot;job-title&quot;&gt;Title&lt;/td&gt;\n&lt;td id=&quot;job-description&quot;&gt;Description&lt;/td&gt;\n&lt;td id=&quot;job-location&quot;&gt;Location&lt;/td&gt;\n&lt;td id=&quot;job-date&quot;&gt;Date posted&lt;/td&gt;\n&lt;/tr&gt;&#39;;\n\n    $array_keys = array_keys(contentContent_Type_Jobs_Template::metabox_attributes());\n\n    // loop through metabox jobs content to create the table data\n\n    foreach ($meta as $key =&gt; $value) {\n\n        // make sure that all returned keys fit the original keys in the metabox_attributes method\n        if (!in_array(preg_replace(&#39;/d/&#39;, &#39;&#39;, $key), $array_keys))\n            continue;\n\n        static $i;\n        $number = $i++;\n\n        if ($number % (count($array_keys)) == 0) {\n            $table .= &#39;&lt;tr&gt;&#39;;\n        }\n\n        if (stristr($key, $array_keys[&#39;0&#39;])) {\n            $table .= &#39;&lt;td headers=&quot;job-title&quot;&gt;&#39; . implode(&#39;&#39;, $value) . &#39;&lt;/td&gt;&#39;;\n        }\n\n        if (stristr($key, $array_keys[&#39;1&#39;])) {\n            $table .= &#39;&lt;td headers=&quot;job-description&quot;&gt;&#39; . implode(&#39;&#39;, $value) . &#39;&lt;/td&gt;&#39;;\n        }\n\n        if (stristr($key, $array_keys[&#39;2&#39;])) {\n            $table .= &#39;&lt;td headers=&quot;job-location&quot;&gt;&#39; . implode(&#39;&#39;, $value) . &#39;&lt;/td&gt;&#39;;\n        }\n\n        if (stristr($key, $array_keys[&#39;3&#39;])) {\n            $table .= &#39;&lt;td headers=&quot;job-date&quot;&gt;&#39; . implode(&#39;&#39;, $value) . &#39;&lt;/td&gt;&#39;;\n        }\n\n        if (($number - (count($array_keys) - 1)) % (count($array_keys)) == 0) {\n            $table .= &#39;&lt;/tr&gt;&#39;;\n        }\n\n    } // end foreach\n\n    $table .= &#39;&lt;/table&gt;&#39;;\n\n    echo $table;\n\n} // end if  if (class_exists(&#39;menuContent_Type_Jobs_Template&#39;))\n\n</pre>","categories":[],"uniqueId":"136125","url":"php-class-create-wordpress-custom-post-type-dynamic-metaboxes","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-five.jpg"},{"title":"Creating a reusable JavaScript form validation class","link":"http://www.suburban-glory.com/blog?page=173","author":"Andy Walpole","publishedDate":"1360523268000","contentSnippet":"Just recently I was looking at some of my old code. For a website build I had used HTML5 form validation with a JavaScript ...","content":"<p>Just recently I was looking at some of my old code. For a website build I had used HTML5 form validation with a JavaScript fallback. The form itself was a long one and I had created a module that saved the individual form values into an objects memory which was then validated in the next method. Something like this:</p>\n\n<pre>\n\ncontactQaStudio: (_private.form.contactQaStudio.checked) ? _private.form.contactQaStudio.value : '',\ncontactQaDirect: (_private.form.contactQaDirect.checked) ? _private.form.contactQaDirect.value : '',\ncontactStarMine: (_private.form.contactStarMine.checked) ? _private.form.contactStarMine.value : '',\n\n</pre>\n\n<p>This is fine if you have a small form but when you have 32 separate fields it creates non-elegant code. To be honest I felt slightly embarrassed and I'm sure that whoever maintains this script will be cursing the day I was born.</p>\n\n<p>The best solution would be one where you drop in a reusable JavaScript class and access it like so:</p>\n\n<pre>\n\n// name attribute of form\nvar contactForm = new FormClass('contactUs');\n\n// id attribute of form elements\n// use required if the form field is essential\ncontactForm.required('contact-name', 'Please fill in your contact name');\ncontactForm.required('contact-email', 'Please fill in your email address');\n\n// id attribute of form elements\n// use validationInd to create individual form field validation\ncontactForm.validationInd('contact-email', 'email');\ncontactForm.validationInd('contact-name', 'Please enter a minimum of 10 characters for a contact name');\n\n// use validation to run validation function\n// will produce error messages or save form if okau\ncontactForm.validation();\n\n</pre>\n\n<p>This is just what I have done. My aim was to leverage the composite pattern, but in the end I fell short of that. I liberally use the prototype keyword in my script. To understand how, why and when this should be used will make you are far better equipped JavaScript coder. If you don't then I recommend that you read Ross Harmes and Dustin Diaz's book <a href=\"http://j.mp/Y2Y6tD\">Pro-JavaScript Design Patterns</a>.</p>\n\n<p>Using the above method the id of the form field and the error message is added to an object, which is then looped through.</p>\n\n<p>Individual form validation is handled with the help of regex. For instance, a coder writes 'Please enter a minimum of 10 characters for a contact name'. In the loop if the word 'minimum' is found in  the string then the appropriate statement is run with the number of characters, in this case 10, extracted with regex, just like this:</p>\n\n<pre>\n\nif (this.validationIndValues[key].match(/minimum/g)) {\n\n    // check if number of characters is less than specified\n\n    if (parseInt(doc.querySelector(&#39;input#&#39; + key).value.length) &lt; parseInt(this.validationIndValues[key].match(/d+.?d*/g))) {\n\n        anArray.push(this.validationIndValues[key]);\n\n    }\n\n}\n\n</pre>\n\n<p>By building up the user-specified form objects it is then necessary to run the validation on form submit:</p>\n\n<pre>\n\naddEvent(document.forms[this.formName], 'submit', validForm.bind(this));\n\n</pre>\n\n<p>Note the use of the bind() function. This is essential to bypass JavaScript function scope so that the <em>this</em> object is passed into the validForm() function and can then be accessed directly.</p>\n\n<p>Checking for empty values is straight forward. It loops through the id attributes in the object, running a check for empty values on the required form fields:</p>\n\n<pre>\n\n// loop through ruleList object literals\nif (this.formRequired.hasOwnProperty(key)) {\n\n    // check if any of the required values are empty\n\n    if (doc.querySelector('input#' + key).value === '') {\n\n        anArray.push(this.formRequired[key]);\n\n    } // end if\n\n} // end if\n\n</pre>\n\n<p>The error message is passed into an array which is then added to the errorMessage() method afterwards.</p>\n\n<p>Individual form field validation is a little more complex but essentially follows the same pattern:</p>\n\n<pre>\n\nfor (key in this.validationIndValues) {\n\n    // loop through ruleList object literals\n    if (this.validationIndValues.hasOwnProperty(key)) {\n\n        if (this.validationIndValues[key].match(/email/g)) {\n\n            // check if valid email address\n\n            if (!doc.querySelector(&#39;input#&#39; + key).value.match(/^(.+)@([^();:,&lt;&gt;]+.[a-zA-Z]{2,4})/)) {\n\n                anArray.push(&#39;You have entered an incorrect email address&#39;);\n\n            }\n\n        }\n\n        if (this.validationIndValues[key].match(/minimum/g)) {\n\n            // check if number of characters is less than specified\n\n            if (parseInt(doc.querySelector(&#39;input#&#39; + key).value.length) &lt; parseInt(this.validationIndValues[key].match(/d+.?d*/g))) {\n\n                anArray.push(this.validationIndValues[key]);\n\n            }\n\n        }\n\n        if (this.validationIndValues[key].match(/maximum/g)) {\n\n            // check if number of characers is more than specified\n\n            if (parseInt(doc.querySelector(&#39;input#&#39; + key).value.length) &gt; parseInt(this.validationIndValues[key].match(/d+.?d*/g))) {\n\n                anArray.push(this.validationIndValues[key]);\n\n            }\n\n        }\n\n    }\n\n</pre>\n\n<p>\nThis is fine for text or textarea fields, but validating checkboxes or radio buttons would require something different.</p>\n\n<h3>Conclusion</h3>\n\n<p>It works in all browser apart from IE7 because it uses querySelector. However, it should be fairly painless to substitute querySelector with a JS library DOM transversal interface.</p>\n\n<p>What I don't like about the code is that the validation function is too fat and needs to be broken down. It's good JS practice to keep individual methods / functions as thin as possible with each only serving one purpose. It makes the code more readable and it's easier for debugging and unit testing.</p>\n\n<p>Still, it's a good starting point and it's code I will return to in the future when form validation rears its head again.</p>\n\n<p>The code can be found on this <a href=\"https://gist.github.com/TCotton/4749123\">GitGist</a>.</p>\n\n<p><strong>Note: I've now re-factored this code to use the cached form object rather than querySelector(). It's quicker code and it works in IE7. <a href=\"https://gist.github.com/TCotton/4772340\">The GitGist is here</a></strong></p>","categories":[],"uniqueId":"136052","url":"creating-reusable-javascript-form-validation-class","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-six.jpg"},{"title":"Be careful when buying electronic goods from Amazon Associates","link":"http://www.suburban-glory.com/blog?page=172","author":"Andy Walpole","publishedDate":"1360509989000","contentSnippet":"Although I use a Mac at home, I also use Windows and Linux. For the latter I use an old CRT monitor. It weighs more than an ...","content":"<p>Although I use a Mac at home, I also use Windows and Linux. For the latter I use an old CRT monitor. It weighs more than an elephant, but the colours and font-rendering is excellent. When LSD screens first appeared the picture quality was generally very poor, but new models, if you pay the right money, are fine.</p>\n\n<p>Wanting a monitor upgrade I looked around for the particular Samsung make that had been recommended to me. On Amazon the cheapest price was £220 (about $350). </p>\n\n<p>Despite being a bunch of tax-dodging skivers, I've had a positive customer relationship with this company with no past issues to complain about. Based on this I went ahead and brought the monitor sold by an Amazon Associate. These are companies that sell their goods on Amazon, so although you pay via the Amazon website, they distribute the items direct to you. I regret making this decision now.</p>\n\n<p>The first issue was although it stated delivery was 3 – 10 days on the payment page, what wasn't clear was that HD-Systemstore, the monitor seller, was a German company based in Berlin. I wouldn't have used a German-based company if I had known. It's not that I have a buy British only stance, it's that a delivery from a British-based company would have been quicker. (I checked HD-Systemstore feedback and it was wholly positive).</p>\n\n<p>Because I work full-time the monitor was delivered to a relatives address. By the time the item arrived, and I could pick it up, two to three weeks had passed. When I got the package home it was immediately clear that the monitor screen was cracked and useless. This probably happened in transit.</p>\n\n<p>Like any consumer I presumed that the next step was either they would replace the item or I would receive a full refund. Neither happened.</p>\n\n<p>Firstly, the company in question ignored my direct email, so I went through the Amazon complaints interface. Please return the item to us, they asked.</p>\n\n<p>I then discovered that packages posted to the rest of Europe cost three times as much as those sent to a British address, so I had to pay £60 to have the thing couriered back using ParcelForce. Under British consumer rights law, there is no stipulation that the company has to pay for an item to be returned if it is faulty.</p>\n\n<p>Eventually it arrived back in Berlin and HD-Systemstore acknowledged the item was defective but stated that because I hadn't returned it within 21 days then I was not eligible for a refund. Of note, they only wrote this in their last email rather than the first one.</p>\n\n<p>The relationship between Amazon and Amazon Associates is a loose one. They enforce a returns policy created by the Associate company, not their own. Which in the case of HD-Systemstore seemed to be what they made up as they went along.</p>\n\n<p>As Amazon sided with HD-Systemstore I appealed to my credit card company who have a chargeback scheme. After supplying all the evidence they wrote back stating that the dispute needs to be resolved through Amazon. Amazon couldn't give a fig.</p>\n\n<p>So where does that leave me? £300 down and with nothing to show for it.</p>\n\n<p>Yes, I should have read the small print, but I naively presumed consumer law would protect me if the item was defective. I unquestionably thought that consumer protection law was clearly laid out and unambiguous. So if you do buy expensive electronic goods from an Amazon Associate always do the following.</p>\n\n<p>1. Make sure the company is based in the same country as you. As I detailed above, this adds a lot more hassle when they deliver the item or if you have to return it.</p>\n\n<p>2. Read the companies returns policy. Make sure you are crystal clear what the procedure is if the item is faulty.</p>","categories":[],"uniqueId":"136050","url":"careful-buying-electronic-goods-amazon-associates","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-seven.jpg"},{"title":"Using CSS3 animation with the JavaScript CSSOM API","link":"http://www.suburban-glory.com/blog?page=171","author":"Andy Walpole","publishedDate":"1360485520000","contentSnippet":"One day IE7 and IE8 will die out and be a distant memory just like Netscape 4. JavaScript libraries like jQuery won't disappear ...","content":"<p>One day IE7 and IE8 will die out and be a distant memory just like Netscape 4. JavaScript libraries like jQuery won't disappear but they'll be a lot less essential when all browsers conform to W3C standards. </p>\n\n<p>However, what won't die out is the need for a JavaScript animation library. This requires mathematical knowledge that the everyday JS coder doesn't have.</p>\n\n<p>CSS3 animation, although a welcome addition, has its limitations; although I'm sure that the spec will be built on and improved in the coming years.</p>\n\n<p>It certainly does have its uses on the average web-build and it's something that I regularly use.</p>\n\n<p>On my <a href=\"http://andywalpole.me/\">personal portfolio</a> I have some CSS3 animation that runs in the left hand corner. I should state that creating animation that automatically runs on page load is a bad design decision because it distracts from the text, but it's my own personal site so I can experiment with it.</p>\n\n<p>The code for this animation is particularly verbose. Here it is... gulp:</p>\n\n<pre>\n\n@keyframes dazzle {\n    0% {\n        box-shadow: -50px 40px 2px -13px rgba(255, 255, 255, 0), -60px 60px 2px -13px rgba(255, 255, 255, 1), -35px -20px 2px -12px rgba(255, 255, 255, 0), 40px 60px 3px -13px rgba(235, 255, 255, 1), 30px -50px 2px -13px rgba(255, 255, 255, 0), -50px 35px 3px -11px rgba(255, 255, 235, 1), -25px -20px 3px -13px rgba(235, 255, 235, 0), -40px 10px 4px -11px rgba(255, 255, 255, 1), -40px -65px 1px -13px rgba(255, 245, 255, 0), -10px 50px 3px -12px rgba(255, 255, 255, 1), 10px -30px 3px -12px rgba(235, 255, 255, 0), -30px -20px 2px -12px rgba(255, 245, 255, 1), 70px 40px 3px -13px rgba(255, 255, 255, 0), 20px 50px 2px -13px rgba(205, 255, 255, 1), -40px 45px 6px -11px rgba(255, 255, 255, 0), -35px -60px 3px -13px rgba(255, 255, 225, 1), -30px 40px 4px -11px rgba(255, 255, 255, 0), -70px -55px 1px -13px rgba(255, 255, 255, 1), -10px 50px 3px -12px rgba(235, 255, 255, 0), 20px -40px 3px -12px rgba(225, 255, 255, 1), -20px -10px 2px -13px rgba(255, 255, 255, 0), -50px -20px 5px -12px rgba(245, 255, 255, 1), 70px 30px 3px -13px rgba(215, 255, 245, 0), 40px 90px 2px -13px rgba(255, 255, 255, 1), -40px 35px 3px -11px rgba(165, 235, 215, 0), 35px -40px 3px -13px rgba(245, 255, 255, 1), -70px 20px 4px -11px rgba(215, 215, 235, 0), -40px -25px 1px -13px rgba(255, 245, 255, 1), 10px -60px 3px -12px rgba(255, 225, 245, 0), -20px 70px 3px -12px rgba(255, 255, 255, 1), -25px 80px 2px -13px rgba(245, 255, 255, 0), -40px 90px 2px -12px rgba(170, 235, 255, 1), -35px 20px 3px -13px rgba(225, 215, 255, 0), 60px -20px 3px -12px rgba(255, 255, 255, 1), 20px -80px 2px -13px rgba(255, 255, 255, 0), 10px 40px 3px -13px rgba(225, 255, 255, 1), -45px -40px 2px -13px rgba(255, 245, 255, 0), 40px -10px 3px -12px rgba(255, 255, 255, 1), 15px 30px 2px -13px rgba(225, 235, 255, 0), 10px -30px 2px -12px rgba(255, 245, 245, 1), 40px 50px 2px -13px rgba(255, 255, 255, 0), -55px 40px 4px -13px rgba(225, 245, 255, 1), -40px -10px 2px -12px rgba(195, 255, 175, 0), 30px -20px 2px -13px rgba(255, 255, 255, 1), 50px 20px 3px -13px rgba(255, 255, 255, 0), -55px -10px 2px -13px rgba(255, 205, 255, 1), 10px -30px 7px -12px rgba(255, 255, 255, 0), 10px 60px 2px -13px rgba(255, 255, 255, 1), 20px -30px 2px -12px rgba(225, 225, 225, 0), 40px 50px 2px -13px rgba(195, 255, 255, 1), 30px 70px 3px -13px rgba(235, 255, 235, 0), -60px 60px 2px -13px rgba(255, 255, 255, 1), 10px 70px 3px -12px rgba(225, 205, 255, 0), 20px 90px 2px -13px rgba(235, 255, 235, 1), 30px 70px 5px -12px rgba(225, 255, 225, 0), 10px -40px 2px -12px rgba(195, 255, 175, 1), 20px -60px 2px -13px rgba(255, 255, 255, 0), 30px 60px 3px -13px rgba(255, 255, 255, 1), -75px -30px 2px -13px rgba(255, 205, 255, 0), 30px -30px 7px -12px rgba(255, 255, 255, 1), 40px 60px 2px -13px rgba(255, 255, 255, 0), 20px -30px 2px -12px rgba(225, 225, 225, 1), 20px 50px 2px -13px rgba(195, 255, 255, 0), 40px 20px 3px -13px rgba(235, 255, 235, 1), -40px 30px 2px -13px rgba(255, 255, 255, 0);\n    }\n\n    100% {\n        box-shadow: -50px 40px 2px -13px rgba(255, 255, 255, 1), -60px 60px 2px -13px rgba(255, 255, 255, 0), -35px -20px 2px -12px rgba(255, 255, 255, 1), 40px 60px 3px -13px rgba(235, 255, 255, 0), 30px -50px 2px -13px rgba(255, 255, 255, 1), -50px 35px 3px -11px rgba(255, 255, 235, 0), -25px -20px 3px -13px rgba(235, 255, 235, 1), -40px 10px 4px -11px rgba(255, 255, 255, 0), -40px -65px 1px -13px rgba(255, 245, 255, 1), -10px 50px 3px -12px rgba(255, 255, 255, 0), 10px -30px 3px -12px rgba(235, 255, 255, 1), -30px -20px 2px -12px rgba(255, 245, 255, 0), 70px 40px 3px -13px rgba(255, 255, 255, 1), 20px 50px 2px -13px rgba(205, 255, 255, 0), -40px 45px 6px -11px rgba(255, 255, 255, 1), -35px -60px 3px -13px rgba(255, 255, 225, 0), -30px 40px 4px -11px rgba(255, 255, 255, 1), -70px -55px 1px -13px rgba(255, 255, 255, 0), -10px 50px 3px -12px rgba(235, 255, 255, 1), 20px -40px 3px -12px rgba(225, 255, 255, 0), -20px -10px 2px -13px rgba(255, 255, 255, 1), -50px -20px 5px -12px rgba(245, 255, 255, 0), 70px 30px 3px -13px rgba(215, 255, 245, 1), 40px 90px 2px -13px rgba(255, 255, 255, 0), -40px 35px 3px -11px rgba(165, 235, 215, 1), 35px -40px 3px -13px rgba(245, 255, 255, 0), -70px 20px 4px -11px rgba(215, 215, 235, 1), -40px -25px 1px -13px rgba(255, 245, 255, 0), 10px -60px 3px -12px rgba(255, 225, 245, 1), -20px 70px 3px -12px rgba(255, 255, 255, 0), -25px 80px 2px -13px rgba(245, 255, 255, 1), -40px 90px 2px -12px rgba(170, 235, 255, 0), -35px 20px 3px -13px rgba(225, 215, 255, 1), 60px -20px 3px -12px rgba(255, 255, 255, 0), 20px -80px 2px -13px rgba(255, 255, 255, 1), 10px 40px 3px -13px rgba(225, 255, 255, 0), -45px -40px 2px -13px rgba(255, 245, 255, 1), 40px -10px 3px -12px rgba(255, 255, 255, 0), 15px 30px 2px -13px rgba(225, 235, 255, 1), 10px -30px 2px -12px rgba(255, 245, 245, 0), 40px 50px 2px -13px rgba(255, 255, 255, 1), -55px 40px 4px -13px rgba(225, 245, 255, 0), -40px -10px 2px -12px rgba(195, 255, 175, 1), 30px -20px 2px -13px rgba(255, 255, 255, 0), 50px 20px 3px -13px rgba(255, 255, 255, 1), -55px -10px 2px -13px rgba(255, 205, 255, 0), 10px -30px 7px -12px rgba(255, 255, 255, 1), 10px 60px 2px -13px rgba(255, 255, 255, 0), 20px -30px 2px -12px rgba(225, 225, 225, 1), 40px 50px 2px -13px rgba(195, 255, 255, 0), 30px 70px 3px -13px rgba(235, 255, 235, 1), -60px 60px 2px -13px rgba(255, 255, 255, 0), 10px 70px 3px -12px rgba(225, 205, 255, 1), 20px 90px 2px -13px rgba(235, 255, 235, 0), 30px 70px 5px -12px rgba(225, 255, 225, 1), 10px -40px 2px -12px rgba(195, 255, 175, 0), 20px -60px 2px -13px rgba(255, 255, 255, 1), 30px 60px 3px -13px rgba(255, 255, 255, 0), -75px -30px 2px -13px rgba(255, 205, 255, 1), 30px -30px 7px -12px rgba(255, 255, 255, 0), 40px 60px 2px -13px rgba(255, 255, 255, 1), 20px -30px 2px -12px rgba(225, 225, 225, 0), 20px 50px 2px -13px rgba(195, 255, 255, 1), 40px 20px 3px -13px rgba(235, 255, 235, 0), -40px 30px 2px -13px rgba(255, 255, 255, 1);\n    }\n}\n\n</pre>\n\n<p>I was wondering if I could change the rgba values whenever a visitor hovers their mouse over one of the nine main code blocks. Changing animation on mouseover other than hovering over a link is a bad usability decision, but again, as it's my personal portfolio I have room to experiment.</p>\n\n<p>One option is to create different animation blocks in the CSS file and use JavaScript to change the class. Theoretically this is the correct approach because it keeps the CSS and JS separate. However, I really didn't fancy creating multitudes of complex CSS code. (Another possible option is to use SASS to auto-generate the code, but I'll leave that for another time).</p>\n\n<p>So I set about creating a JavaScript module that can create random rgba values and then change the animation blocks on an event change.</p>\n\n<p>If you want to create random digits in JavaScript then the Math object is your friend. This in-built JS object is very inexpensive to use. </p>\n\n<p>So using Math I sketched out the basis for a JS module to create random rgba values (this code was changed in the final version):</p>\n\n<pre>\n\nANDY.ANIMATION = (function () {\n    &#39;use strict&#39;;\n    var _private = {\n        headers: null,\n        randomOne: function () { /* 70 to -70 */\n\n            return Math.floor(Math.random() * 141) - 70;\n\n        },\n        randomTwo: function () { /* 2 to 6 */\n\n            /* recursive function. Only return numbers from 2 to 6 */\n\n            var random = Math.floor(Math.random() * 7);\n\n            if (random &lt; 2) {\n\n                return arguments.callee(true);\n\n            } else {\n\n                return random;\n\n            }\n\n        },\n        randomThree: function () { /* -11 to -13 */\n\n            var numbers = [-11, -12, -13];\n\n            return numbers[Math.floor(Math.random() * numbers.length)];\n\n        },\n        randomFour: function () { /* 0 to 255 */\n\n            return Math.floor(Math.random() * 256);\n\n        },\n        randomFive: function () { /* 0 or 1 */\n\n            return Math.floor(Math.random() * 2);\n\n\n        },\n        set: function (val) {\n            this.headers = val;\n            _private.run();\n        },\n        setNumbers: function () {\n\n\n\n        }\n    };\n    return {\n        init: function () {\n\n            console.log(_private.randomTwo());\n\n        }\n    };\n}());\n\n</pre>\n\n<p>Using this as a starting point I created a method to generate the CSS block. The do-while loop builds up the array of rgba values which is finally returned as a string.</p>\n\n<pre>\n\n setNumbers: function () {\n\n     /* create 66 different values for the style \n          sheet like so: -50px 40px 2px -13px rgba(255, 255, 255, 0) */\n     var x, l, finalArray = [];\n\n     x = 0;\n     l = 66;\n\n     do {\n\n         finalArray.push(this.randomOne() + &#39;px &#39; + this.randomOne() + &#39;px &#39; + this.randomTwo() + &#39;px &#39; + this.randomThree() + &#39;px &#39; + &#39;rgba(&#39; + this.randomFour() + &#39;,&#39; + this.randomFour() + &#39;,&#39; + this.randomFour() + &#39;,&#39; + this.randomFive() + &#39;)&#39;);\n\n         x += 1;\n\n     } while (x &lt; l);\n\n     return finalArray.toString();\n\n },\n\n</pre>\n\n<p>My method next looped through my CSS files to find the file (768.css) that contained the animation and I saved it to the memory of the object (the <em>this</em> keyword refers to the parent object):</p>\n\n<pre>\n\n findStyleSheet: function () {\n\n     /* find the 768.css stylesheet */\n\n     var x, l;\n\n     for (x = 0, l = this.styleSheets.length; x &lt; l; x += 1) {\n\n         if (this.styleSheets[x].href) {\n\n             if (this.styleSheets[x].href.indexOf(&#39;768&#39;) !== -1) {\n\n                 this.styleSheetExtra = this.styleSheets[x];\n                 break;\n\n             }\n\n         } // end if\n\n     } // end for loop\n\n },\n\n</pre>\n\n<p>Then I used CSSOM to find the keyframe rule:</p>\n\n<pre>\n\n findKeyframesRule: function (rule) {\n\n     /* in the 768.css stylesheet find the animation*/\n\n     var ruleList = this.styleSheetExtra.cssRules,\n         i, key, l;\n\n     // loop through the cssRules object \n\n     for (i = 0, l = ruleList.length; i &lt; l; i += 1) {\n\n         for (key in ruleList[i].cssRules) {\n\n             // loop through ruleList object literals\n             if (ruleList[i].cssRules.hasOwnProperty(key)) {\n\n                 // find the keyframe animation\n                 if (ruleList[i].cssRules[key].type === window.CSSRule.WEBKIT_KEYFRAMES_RULE &amp;&amp; ruleList[i].cssRules[key].name === rule) {\n\n                     return ruleList[i].cssRules[key];\n\n                 } // end if\n\n             } // end if\n\n         } // end for object\n\n     } // end for ruleList \n\n     return null;\n },\n\n</pre>\n\n<p>This was difficult code to get exactly right but perseverance pays off. I tried window.CSSRule.WEBKIT_KEYFRAMES_RULE and window.CSSRule.MOZ_KEYFRAMES_RULE but window.CSSRule.KEYFRAMES_RULE returned undefined although both browsers are supposed to have implemented a non-prefixed version.</p>\n\n<p>Here is the CSS3 animation change that happens on the choosen event, using the previously created setNumbers() method:</p>\n\n<pre>\n\nchangeRule: function () {\n\n    var keyframes = this.findKeyframesRule(\"dazzle\"),\n        cloneBlock, parentBlock, domNode;\n\n    if (keyframes !== null) {\n\n        // change the CSS3 animation here\n\n        keyframes.deleteRule(\"0%\");\n        keyframes.deleteRule(\"100%\");\n        keyframes.insertRule(\"0% { box-shadow:\" + this.setNumbers() + \"; }\");\n        keyframes.insertRule(\"100% { box-shadow:\" + this.setNumbers() + \"; }\");\n\n        /* it is necessary to redraw the block for the new animation to work */\n\n        domNode = doc.querySelector('div[role=banner] h1');\n\n        cloneBlock = domNode.cloneNode(true);\n        parentBlock = domNode.parentNode;\n        parentBlock.removeChild(domNode);\n        parentBlock.appendChild(cloneBlock);\n\n    }\n\n},\n\n</pre>\n\n<p>Here comes the event methods:</p>\n\n<pre>\n\nonHover: function () {\n\n    var wrapper = doc.querySelector(&#39;div[role=main]&#39;);\n\n    wrapper.addEventListener(&#39;mouseover&#39;, _private.onHoverEvent, false);\n\n},\n\nfindUpId: function (elem) {\n\n    while (elem.parentNode) {\n        elem = elem.parentNode;\n        // only use the right node type and that which has an id attribute\n        if (elem.nodeType === 1 &amp;&amp; elem.hasAttribute(&#39;id&#39;)) {\n            // only if the id attribute value contains block\n            if (elem.getAttribute(&#39;id&#39;).indexOf(&#39;block&#39;) !== -1) {\n                return elem.getAttribute(&#39;id&#39;);\n            }\n        }\n    }\n    return null;\n\n},\n\nonHoverEvent: function (event) {\n\n    // check again to make sure the correct id is choose\n    var domResult, idArray = [&#39;block-1&#39;, &#39;block-2&#39;, &#39;block-3&#39;, &#39;block-4&#39;, &#39;block-5&#39;, &#39;block-6&#39;, &#39;block-7&#39;, &#39;block-8&#39;, &#39;block-9&#39;];\n\n    domResult = _private.findUpId(event.target);\n\n    // check again to make sure that the right id block is used \n    if (domResult !== null &amp;&amp; idArray.indexOf(domResult) !== -1) {\n\n        // place chosen id into object memory\n        if (_private.dom === null || _private.dom !== domResult) {\n\n            _private.changeRule();\n            _private.dom = domResult;\n\n        } // end if\n\n    } // end if\n\n}\n\n</pre>\n\n<p>The coding theory behind this is to set the event on the parent element – div[role=main]. On mouseover I wanted to use the parent id block of the item, ie block-1 or block-2, then change the animation. The choosen DOM block needed to be kept into the object memory on mouseover because I only want to fire the changeRule() method once for every div block.</p>\n\n<p>The result? Not amazing. The problem is that the animation starts from the beginning rather than the colours changing mid-animation so it creates a stuttering affect. The needs to be a bit of morphing happening! To alleviate that I added an opacity and webkit filter blur rule to the animation.</p>\n\n<p>The full code can be found on this <a href=\"https://gist.github.com/TCotton/4741915\">GitGist</a>.</p>","categories":[],"uniqueId":"136048","url":"using-css3-animation-with-javascript-cssom-api","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-eight.jpg"},{"title":"Creating breadcrumbs for Wordpress with PHP","link":"http://www.suburban-glory.com/blog?page=170","author":"Andy Walpole","publishedDate":"1360075623000","contentSnippet":"\n\nIf you are creating a Wordpress website and you know PHP then it is good practice to avoid third-party plugins wherever ...","content":"<p><img src=\"http://www.suburban-glory.com/images/wordpress-logo.png\" alt=\"Wordpress logo\" height=\"250\" width=\"250\"></p>\n\n<p>If you are creating a Wordpress website and you know PHP then it is good practice to avoid third-party plugins wherever possible. There is only minimal peer review of plugins on the Wordpress repository, and many are substandard with unnecessary database calls, sloppy code or outright security issues. And just because you have bought a Wordpress plugin don't presume that it is well-coded. I've seen some appalling paid-for Wordpress plugins. </p>\n\n<p>There is third-party software to create a breadcrumb but it is easy enough to do it yourself. Googling this lead to dozens of results, but many are very verbose with one person even creating a whole class.</p>\n\n<p>For my starting point I decided to use <a href=\"http://gregrickaby.com/2009/12/how-to-add-breadcrumbs-to-wordpress-without-a-plugin.html\">Greg Rickaby's code</a>. However, there were some issues with this. For starters, he uses the the_category() function which only works in a loop, he also connects it via a add_action() hook which I believe to be unnecessary, plus it's a little too simple. </p>\n\n<p>My version is as follows:</p>\n\n<pre>\n\nfunction my_breadcrumb($id = null) {\n\n    echo &#39;&lt;a href=&quot;&#39;;\n    echo get_option(&#39;home&#39;);\n    echo &#39;&quot;&gt;&#39;;\n    echo &#39;Home&#39;;\n    echo &quot;&lt;/a&gt; &gt; &quot;;\n\n    if (is_category() || is_single()) {\n\n        if (is_single()) {\n            echo &quot; &gt; &quot;;\n            the_title();\n        }\n\n        if(is_category()) {\n\n            $category = get_category(get_query_var(&#39;cat&#39;));\n            $cat_id = $category-&gt;cat_ID;\n            $cat = get_category_parents($cat_id, TRUE, &#39; &gt; &#39;);\n            // remove last &gt;\n            echo preg_replace(&#39;/&gt;s$/&#39;, &#39;&#39;, $cat);\n\n        }\n\n    } elseif (is_page()) {\n\n        if ($id != null) {\n\n            $parent = get_the_title($id);\n            $parent = &#39;&lt;a href=&quot;&#39; . get_permalink($id) . &#39;&quot;&gt;&#39; . $parent . &#39;&lt;/a&gt;&#39;;\n            echo !is_null($parent) ? $parent . &quot;&gt; &quot; : null;\n\n        }\n\n        echo the_title();\n\n    }\n\n}\n\n</pre>\n\n<p>This is added to the functions.php file.</p>\n\n<p>It is then used in the theme like so:</p>\n\n<pre>\n\n&lt;div id=&quot;breadcrumb&quot;&gt;\n\n    &lt;?php if (!is_search() || !is_404()) {\n\n        global $post;\n\n        if ($post != null) {\n            my_breadcrumb($post-&gt;post_parent);\n        } else {\n            my_breadcrumb();\n        }\n\n    } else {\n\n        print &#39; &#39;;\n\n    } ?&gt;\n\n&lt;/div&gt;\n\n</pre>\n\n<p>You can find it on this <a href=\"https://gist.github.com/TCotton/4714817\">GitGist</a>.</p>\n\n<p><strong>I've also created a more complex breadcrumb function that incorporates custom taxonomy on this <a href=\"https://gist.github.com/TCotton/4723438\">GitGist</a></strong></p>","categories":[],"uniqueId":"136007","url":"creating-breadcrumbs-wordpress-php","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-nine.jpg"},{"title":"Is using @import in CSS really such a performance roadblock?","link":"http://www.suburban-glory.com/blog?page=169","author":"Andy Walpole","publishedDate":"1359911450000","contentSnippet":"Just recently I found myself returning to an old style sheet that I had coded last year. It was vanilla CSS written without the ...","content":"<p>Just recently I found myself returning to an old style sheet that I had coded last year. It was vanilla CSS written without the help of a pre-processor.</p>\n\n<p>Locating and rewriting the CSS involved far too much scrolling through 2,000 lines of code for my liking. It stuck me that if the code was divided intelligently between several different files rather than one long one, then maintenance would be a whole lot easier.</p>\n\n<p>Yes, SASS and Apache Ant give the coder the ability to merge several style sheets together, but it should be an inbuilt feature of the CSS browser implementation.</p>\n\n<p>When Google employee and CSS Working Group member Tab Atkins wrote his post <a href=\"http://www.xanthir.com/b4N80\">2013 Work Plans</a>, I left a comment underneath suggesting that there should be an alternative to @import which, although allowing you to insert separate style sheets into one, comes at a performance cost.</p>\n\n<h3>Is @import the devil?</h3>\n\n<p>Using @import is such a taboo that to use it in a production site is almost the equivalent of putting an “I'm an idiot coder” banner on the home page</p>\n\n<p>But why is it so wrong and do these arguments stand up to scrutiny?</p>\n\n<h3>@import and download speeds.</h3>\n\n<p>Front-page optimization guru Steve Souders had <a href=\"http://www.stevesouders.com/blog/2009/04/09/dont-use-import/\">this to say about @import in an article from 2009</a>:</p>\n\n<blockquote><p>\n* Using @import within a stylesheet adds one more roundtrip to the overall download time of the page.<br>\n* Using @import in IE causes the download order to be altered. This may cause stylesheets to take longer to download, which hinders progress rendering making the page feel slower.\n</p></blockquote>\n\n<p>I thought I would test this out with the help of <a href=\"http://www.webpagetest.org\">Web Page Test</a>, so changing the code to a finished website still sitting on a development server, I divided the CSS up into five separate files: reset, reusable classes, navigation, content and footer. It is object orientated CSS in its most primitive form. Then I added these five files to the central style sheet using @import.</p>\n\n<p>I tested download times before and after:</p>\n\n<table>\n<caption>Before and after using css @import</caption>\n<th>IE 7</th>\n<th>IE 8</th>\n<th>IE 9</th>\n<th>Firefox</th>\n<th>Chrome</th>\n<th>Nexus Android 2.3</th>\n<tr>\n<td>Run 1: 2.872s <br> Run 2: 2.198s</td>\n<td>Run 1: 2.042s <br> Run 2: 1.628s</td>\n<td>Run 1: 2.324s <br> Run 2: 1.866s</td>\n<td>Run 1: 2.688s <br> Run 2: 1.962s</td>\n<td>Run 1: 3.423s <br> Run 2: 2.319s</td>\n<td>Run 1: 7.568s <br> Run 2: 3.849s</td>\n</tr>\n<tr>\n<td>Run 1: 4.63s <br> Run 2: 2.657s</td>\n<td>Run 1: 3.142s <br> Run 2: 1.676s</td>\n<td>Run 1: 2.596s <br> Run 2: 1.865s</td>\n<td>Run 1: 2.228s <br> Run 2: 1.746s</td>\n<td>Run 1: 3.861s <br> Run 2: 2.614s</td>\n<td>Run 1: 7.923s <br> Run 2: 4.529s</td>\n</tr>\n</table>\n\n<p>There is a noticeable difference in Internet Explorer 7 and 8, but far less so in IE9, Chrome, Firefox and Android. Perhaps if you are not bothered with IE 7 and 8 (and most of us are), then maybe the 100 milliseconds differences is something you could live with.</p>\n\n<h3>@import placed in the footer</h3>\n\n<p>The second point made by the prosecution against @import is that it loads the files in the footer, as is written in the Yahoo Performance guide:</p>\n\n<blockquote><p>\nOne of the previous best practices states that CSS should be at the top in order to allow for progressive rendering. <br>\nIn IE @import behaves the same as using  at the bottom of the page, so it's best not to use it. \n</p></blockquote>\n\n<p>Looking at the cascading downloaded resources that Web Page Test details, I can confirm that IE10, Firefox, Chrome and Andriod do load any style sheets added with @import as if they are in the footer, while IE7 to IE9 do not. It's extremely bad practice to place CSS in the footer as it will create a disconcerting page rendering experience for the user.</p>\n\n<h3>Conclusion</h3>\n\n<p>Avoid using CSS @import. It's not fit for purpose. You're probably thinking, Tell me something I don't know; but it's always good practice to question what your are told rather than accepting it as correct. As some dead guy with a beard once wrote: “We must have merciless criticism of all things existing”.</p>\n\n<p>However, I do hope that browser manufacturers and the CSS Working Group will create an alternative to @import, although I don't see any evidence of demand coming from CSS coders themselves. While many talk about mixins, functions and variables, few seem interested in addressing this problem. \n</p>","categories":[],"uniqueId":"135991","url":"using-import-css-really-such-performance-roadblock","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-ten.jpg"},{"title":"Coders! Don't forget your CSS print styles!","link":"http://www.suburban-glory.com/blog?page=168","author":"Andy Walpole","publishedDate":"1359485566000","contentSnippet":"I rarely read long articles on the desktop instead preferring to print them out. I don't know if there are statistics out ...","content":"<p>I rarely read long articles on the desktop instead preferring to print them out. I don't know if there are statistics out there, but I would imagine that this is a common practice.</p>\n\n<p>Thankfully there is the wonderful Readability browser plugin that lets us change an article into a beautifully rendered page of text which is perfect for printing out. However, I'm amazed how many web design sites and blogs that, while look stunning, have given no thought at all to providing CSS rules for print. Surely this should come under the roof of good usability? Give your reader the choice of printing your article so that they can read it at their leisure later.</p>\n\n<p>The sad thing about this is that it is so damn easy to implement as the CSS rules for print are the same for almost every web build.</p>\n\n<p>Below is the print CSS I use on every site. It's based on the HTML5 Boilerplate code, but with some additions:</p>\n\n<pre>\n\n@media print {\n    \n    * {\n        color: #000 !important;\n        box-shadow: none !important;\n        text-shadow: none !important;\n        background: none!important;\n    }\n\n/* below choose which page sections you want to hide for print */\n\n    div[id=sidebar], div[role=navigation], div[id=footer] {\n        display: none!important;\n    }\n\n    body {\n        width: 100% !important;\n        margin: 0 !important;\n        padding: 0 !important;\n        font: 62.5%  Garamond,\"Times New Roman\", serif!important;\n        line-height: 2em;\n    }\n\n    h1,h2,h3,h4,h5,h6 {\n        font-family: Helvetica, Arial, sans-serif;\n    }\n\n    h1 {\n        font-size: 2em;\n        margin-bottom: 1em;\n    }\n\n    h2 {\n        font-size: 1.9em;\n        margin-bottom: 1.05263158em;\n    }\n\n    h3 {\n        font-size: 1.8em;\n        margin-bottom: 1.11111111em;\n    }\n\n    h4,h5,h6 {\n        font-size: 1.7em;\n        margin-bottom: 1.17647059em;\n    }\n\n    p, li {\n        font-size: 1.6em;\n        margin-bottom: 1.25em;\n    }\n\n    code, pre {\n        font: 15px Courier, monospace;\n\tborder : none!important;\n    }\n\n    blockquote {\n        margin: 16px;\n        padding: 1em;\n    }\n\n    img {\n        display: block;\n        margin: 1em 0;\n    }\n\n    a img {\n        border: none;\n    }\n\n    table {\n        margin: 1px;\n        text-align: left;\n    }\n\n    th {\n        border-bottom: 1px solid #333;\n        font-weight: bold;\n    }\n\n    td {\n        border-bottom: 1px solid #333;\n    }\n\n    th, td {\n        padding: 4px 10px 4px 0;\n    }\n\n    caption {\n        background: #fff;\n        margin-bottom: 2em;\n        text-align: left;\n    }\n\n    a {\n        text-decoration: none;\n        color: black;\n    }\n\n    a,\n    a:visited {\n        text-decoration: underline;\n    }\n\n    a[href]:after {\n        content: \" (\" attr(href) \")\";\n    }\n\n    abbr[title]:after {\n        content: \" (\" attr(title) \")\";\n    }\n\n    a[href^=\"javascript:\"]:after,\n    a[href^=\"#\"]:after {\n        content: \"\";\n    }\n\n    pre,\n    blockquote {\n        border: 1px solid #999;\n        page-break-inside: avoid;\n    }\n\n    thead {\n        display: table-header-group;\n    }\n\n    tr,\n    img {\n        page-break-inside: avoid;\n    }\n\n    img {\n        max-width: 100% !important;\n    }\n\n    @page {\n        margin: 0.5cm;\n    }\n\n    p,\n    h2,\n    h3 {\n        orphans: 3;\n        widows: 3;\n    }\n\n    h2,\n    h3 {\n        page-break-after: avoid;\n    }\n   \n}\n\n</pre>","categories":[],"uniqueId":"135948","url":"coders-dont-forget-css-print-styles","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-one.jpg"},{"title":"Using SVG in web design","link":"http://www.suburban-glory.com/blog?page=167","author":"Andy Walpole","publishedDate":"1359272176000","contentSnippet":"Within a few years SVG, rather than PNG, will be the preferred icon format used in web design. Primarily this is because SVG is ...","content":"<p>Within a few years SVG, rather than PNG, will be the preferred icon format used in web design. Primarily this is because SVG is vector-based and so holds up well on high-DPI screens. I'm not so sure whether there is a need for high DPI desktop monitors, but where tablets and the MacBook Pro are today, then all laptops and notebooks will be tomorrow.</p>\n\n<p>The problem with using SVG at the moment is that it is either partially or not supported at all in Internet Explorer 7 and 8 and most Android-based devices. </p>\n\n<p>This makes using inline SVG particularly problematic. Although I have experimented with using JavaScript as an image replacement technique (<a href=\"https://github.com/TCotton/SVG-Plug\">SVG Plug</a>), this isn't a suitable commercial solution.</p>\n\n<p>Just recently I was coding a Wordpress theme for a client and thought I'd try using SVG again but this time only as a background image rather than inline.</p>\n\n<p>I asked the designer to import the icons into the PSD as an Illustrator vector object. From there it was a simple process of right clicking on the layer, choosing edit contents and opening it in Illustrator.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/svg-photoshop-vector-smart-image-edit-final.jpg\" width=\"267\" alt=\"588\"></p>\n\n<p>It was easy to then export the file as both SVG and PNG.</p>\n\n<p>Instead of embedding these inline I used them as background images. A number of articles have recommended using background images with the background-size property as a solution to responsive design challenges, and I used the same technique but with a few changes.</p>\n\n<p>To detect browser SVG support I used Modernizr so there is a fallback to non-SVG supporting browsers and those who choose to disable JavaScript.</p>\n\n<p>The CSS typically looks like this:</p>\n\n<pre>\n\ndiv[id=logo] {\n    height: 102px;\n    width: 226px;\n    display: block;\n}\n\n.svg div[id=logo] {\n    background: url('/resources/svg/best-bits-logo.svg') no-repeat center center;\n    background-size: contain;\n}\n\n.no-svg div[id=logo], .no-js  div[id=logo] {\n    background: url('/resources/images/best-bits-logo.png') no-repeat center center;\n}\n\n</pre>\n\n<p>Once you get into the swing of it it really doesn't add much time to the web build, and by my own testing I found that once GZIPed, SVG is up to a tenth smaller in size than its PNG equivalent.</p>\n\n<p>The website in question is currently on a development server but will go live soon: <a href=\"http://bestbits.andywalpole.me/\">http://bestbits.andywalpole.me/</a></p>","categories":[],"uniqueId":"135927","url":"using-svg-web-design","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-two.jpg"},{"title":"Responding to slow page rendering on the mobile network","link":"http://www.suburban-glory.com/blog?page=166","author":"Andy Walpole","publishedDate":"1358597053000","contentSnippet":"In London, my 3G network connection often has speeds of between 5 and 7mps: which is fine for casual browsing. But when ...","content":"<p>In London, my 3G network connection often has speeds of between 5 and 7mps: which is fine for casual browsing. But when travelling on public transport or at work, speeds are often pathetically prohibiting: pages hang and take far too long to load.</p>\n\n<p>I've been coding a Wordpress theme that although wasn’t responsive didn’t mean that it was any the less likely to be accessed on the go by phone or tablet users.</p>\n\n<p>It got me thinking about how to best deal with the perception of speed when the internet slows to a crawl.</p>\n\n<p>Back in the day I’m sure you must remember those full-immersion Flash experiences that took an age to download. Thankfully, progress bars allowed the user to gauge the time until the site loaded and gave a sense of reassurance that sometime, eventually the website will be visible.</p>\n\n<p>So for hanging pages on mobile couldn’t there a similar usability feature? Obviously, determining the page load time would be impossible, but by adding animation it could give a perception of speed despite in actual fact stalling.</p>\n\n<p>Two ideas I had to bring this about were using the new webkit filters to blur the page and use a CSS3 spinning wheel that is centred in the foreground.</p>\n\n<p>As this is feature would only be necessary on the mobile platform then my coding logic was as follows.</p>\n\n<ol><li><p>Use the HTML5 API matchMedia to detect for smaller devices: </p>\n\n<pre>\n\nvar matches = window.matchMedia(\"(max-width: 1024px)\").matches;\n\n</pre>\n\n</li>\n\n<li><p>Attach a click event to the body tag this filter links with event.target:</p>\n\n<pre>\n\nif (event.target.tagName.toLowerCase().toString() === 'a') {\n// code here\n}\n\n</pre>\n\n</li>\n\n<li><p>On clicking a link add the blur class to the </p>\n\n<pre>\n\nbody:document.body.classList.add('blur');\n\n</pre>\n\n</li>\n\n<li><p>Then use setTimeout to display then loading spinning wheel and remove it after 5 seconds:</p>\n\n<pre>\n\nsetTimeout(function () {\n    // display ajax loading symbol\n    doc.getElementById('ajaxLoader').style.display = 'block';\n}, 100);\nsetTimeout(function () {\n    doc.getElementById('ajaxLoader').style.display = 'none';\n}, 5000);\n\n</pre>\n\n</li>\n</ol>\n\n<p>It’s important to only let the animation run for no more than five seconds in case the speed is so slow it leaves the user stranded on the same page. If the traffic speed is fast enough then the next page is loaded without any waiting animation running.</p>\n\n<p>The JavaScript module code is here: <a href=\"https://gist.github.com/4564346\">https://gist.github.com/4564346</a></p>\n\n<p>For the CSS animation I based it on code Craig Buckler wrote for his article <a href=\"http://www.sitepoint.com/css3-ajax-loading-icon/\">How to Create a CSS3 Ajax Loading Icon Without Images</a>:</p>\n\n<pre>\n\ndiv[id=ajaxLoader] {\n    position: absolute;\n    left: 45%;\n    top: 50%;\n    z-index : 999;\n    display : none;\n    width: 15vmin;\n    height: 15vmin;\n    border: 6px solid #fff;\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-radius: 50%;\n    box-shadow: 0 0 12vmin 0.8vmin #eee;\n    -webkit-animation: spin 1s linear infinite;\n    -moz-animation: spin 1s linear infinite;\n    -ms-animation: spin 1s linear infinite;\n    -o-animation: spin 1s linear infinite;\n    animation: spin 1s linear infinite;\n    background: -moz-radial-gradient(center, ellipse cover, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 100%);\n    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,rgba(255,255,255,1)), color-stop(100%,rgba(255,255,255,0)));\n    background: -webkit-radial-gradient(center, ellipse cover, rgba(255,255,255,1) 0%,rgba(255,255,255,0) 100%);\n    background: -o-radial-gradient(center, ellipse cover, rgba(255,255,255,1) 0%,rgba(255,255,255,0) 100%);\n    background: -ms-radial-gradient(center, ellipse cover, rgba(255,255,255,1) 0%,rgba(255,255,255,0) 100%);\n    background: radial-gradient(ellipse at center, rgba(255,255,255,1) 0%,rgba(255,255,255,0) 100%);\n}\n\ndiv[id=ajaxLoader]::after{\n\tborder-left-color: transparent;\n\tborder-right-color: transparent;\n}\n\n@-webkit-keyframes spin {\n    from {\n        -webkit-transform: rotate(0deg);\n        opacity: 0.4;\n    }\n\n    50% {\n        -webkit-transform: rotate(180deg);\n        opacity: 1;\n    }\n\n    to {\n        -webkit-transform: rotate(360deg);\n        opacity: 0.4;\n    }\n}\n\n</pre>\n\n<p>I made some changes such as using the new VM unit instead of pixels to allow the animation to scale to the device size.</p>\n\n<p>Testing it in the real world showed that it is quite erratic, but then that’s because page load speeds on the mobile platform are.</p>\n\n<p>Still, it’s just an idea.</p>","categories":[],"uniqueId":"135859","url":"responding-slow-page-rendering-the-mobile-network","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-three.jpg"},{"title":"On using IDs in CSS","link":"http://www.suburban-glory.com/blog?page=165","author":"Andy Walpole","publishedDate":"1356123057000","contentSnippet":"This year has seen a polite spat between web design “faces” on whether IDs should or should not be used in CSS files.\n\nIn the ...","content":"<p>This year has seen a polite spat between web design “faces” on whether IDs should or should not be used in CSS files.</p>\n\n<p>In the blue corner is new kid on the block and CSS Wizardry owner, <a href=\"http://csswizardry.com/2012/11/code-smells-in-css/\">Harry Roberts</a>, who makes a stand with this argument:</p>\n\n<blockquote><p>\nThis one is very specific to me, and to larger teams. I have written before about how IDs are a bad idea because of their heightened specificity; they are of no use to anyone and should never be used in CSS. Use IDs in HTML for fragment identifiers and JS hooks, but never in CSS.\n</p></blockquote>\n\n<p>In the red corner can be found <a href=\"http://www.zeldman.com/2012/11/21/in-defense-of-descendant-selectors-and-id-elements/\">Jeffrey Zeldman</a>:</p>\n\n<blockquote><p>Say it with me: There is nothing wrong with id when it is used appropriately (semantically, structurally, sparingly). There is plenty wrong with the notion that class is always preferable to descendant selectors and semantic, structural ids.</p></blockquote>\n\n<p>Then followed a discussion about whether IDs are inherently semantic (they are not) but this missed the key point in Zeldman’s article:</p>\n\n<blockquote><p>\nTo my knowledge, this notion comes out of Nicole Sullivan’s brilliant Object Oriented CSS, an approach for writing HTML and CSS that is designed to scale on sites containing thousands of pages, created by dozens of front-end developers over a period of years, generally with no rules or style guide in place (at least no rules or style guide until it is too late). On sites like these—sites like Amazon or Facebook that are hosed from the get-go thanks to too many cooks and no master chef—the use of structural id and descendant selectors can be problematic, especially when inept coders try to overwrite an id-based descendant selector rule by creating ever-more-specific descendant selector rules.\n</p></blockquote>\n\n<p>The same applies to JavaScript. Douglas Crockford, a man who I have immense respect for, is infamous for his intolerance towards deviations from his strict coding rules. Many of these rules are in place to deal with the inherent deficiencies to be found in JavaScript – and quite right too – but they also come from his experience of managing banks of developers at large multinational digital companies. In these circumstances it is understandable why all coders should adhere to such rigid rules. Smaller teams need to think about what works for them in their group.</p>\n\n<p>But nevertheless should using IDs in a CSS file really be such a forbidden practice? I would argue not. For those of us that deal with CSS on a daily basis IDs signify the declaration block of an important layout element, ie #header, #content, #footer; while classes, traditionally, point to DOM children of the parent items.</p>\n\n<p>When you need to scan a CSS sheet this helps in quickly appraising the code layout.</p>\n\n<p>Personally, I’m in favour of using ARIA roles over HTML5 tags or IDs; but to deal directly with the CSS specificity argument, is there a way of using IDs without building specificity to high levels? Yes, by using attribute selectors. Instead of #testing write [id=”testing”]. This uses IDs but the selector is only given the number of points awarded to classes. Try it out on the <a href=\"http://specificity.keegan.st/\">specificity calculator</a>. Attribute selectors like this work in all browsers from Internet Explorer 7 and up.</p>\n\n<p>As a final word, Harry Roberts also argues against using, what he calls, qualified selectors. These can look like a.first-link or li.last-item. Instead, he pleads for coders to write .first-link and .last-item. </p>\n\n<p>Because of the lack of universal CSS3 support in browsers, I often use HTML classes like this. When writing CSS it makes total sense to me to link them to their HTML hook because it makes reading CSS easier. </p>","categories":[],"uniqueId":"135612","url":"using-ids-css","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-four.jpg"},{"title":"Launch of TwtTwt – a Twitter service that uses unicode symbols","link":"http://www.suburban-glory.com/blog?page=163","author":"Andy Walpole","publishedDate":"1350225940000","contentSnippet":"I'm happy to announce, at last, the launch of TwtTwt; a service that allows Twitter users to insert unicode symbols into their ...","content":"<p>I'm happy to announce, at last, the launch of <a href=\"https://twttwt.com/\">TwtTwt</a>; a service that allows Twitter users to insert unicode symbols into their Tweets.</p>\n\n<p>The original inspiration came from my use of a JavaScript bookmarklet. This service (sorry, can't find it now or I would give credit to the developer) allowed me to automatically add the name and shortened URL of the page I was visiting when clicking on my browser menu bar. This meant I could comment on an article or video without leaving the page or using the embedded Twitter link. I used it for ages because it was so convenient.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/invite-bird.png\" width=\"148\" height=\"183\" alt=\"bird image\"></p>\n\n<p>It is possible to add unicode symbols to a Tweet to give a message a different twist to it, so I mixed the above idea with providing the ability to add unicode icons like a musical note or peace symbol. Unicode symbols were originally created in the 1990s but have never found any common use and so they remain largely unloved and ignored. </p>\n\n<p>You can, if you wish, cut and past the unicode characters straight into your own Tweets, but TwtTwt allows the user to easily insert them into any part of a message.</p>\n\n<p>Although there are hundreds of unicode characters only a few of them have universal browser support, so it took some research to find the couple of dozen that worked in all browsers. Oddly, Safari on Windows offered the worse support with IE9 and Firefox the best. Safari on the Mac accepts a far wider range of unicode symbols then its counterpart on the PC (this was before their recent branching).</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/post-bird.png\" width=\"157\" height=\"182\" alt=\"bird image\"></p>\n\n<p>The back-end and front-end coding are all my own work although I have made use of jQuery, Selectivizr and Modernizr, albeit only when absolutely necessary.</p>\n\n<h3>Code hightlights</h3>\n\n<p>The trickiest part of the JavaScript was allowing the user to insert the Unicode symbol anywhere in the body of text. I used the setSelectionRange method for this but, oh boy, is it tricky to get right. I had to seek help on Stackoverflow. setSelectionRange is implemented in IE9 but it wasn't working in the same way as all the other modern browsers so I fell back to a more simple solution for Internet Explorer 9 and below.</p>\n\n<p>The JavaScript function for this is below:</p>\n\n<pre>\n\nfunction insert(elmt, txtToIns) {\n\n    if (typeof _private.isIE === \"undefined\") {\n        // setSelectionRange either doesn't work or fails to work properly on IE9 and below\n        val = elmt.value;\n        start = elmt.selectionStart;\n        end = elmt.selectionEnd;\n        elmt.value = val.slice(0, start) + txtToIns + val.slice(end);\n        elmt.focus();\n        caretPos = start + txtToIns.length;\n        elmt.setSelectionRange(caretPos, caretPos);\n\n        total = _private.total - elmt.value.length;\n        _private.charId.textContent = total;\n\n    } else {\n\n        elmt.innerText += txtToIns;\n\n        total = _private.total - elmt.value.length;\n        _private.charId.innerText = total;\n\n    }\n}\n\n</pre>\n\n<p>Just like the message box on twitter.com, I wanted to count the number of characters as the user typed. This wasn't difficult, but I used two jQuery events that I didn't even know existed: cut and paste. So when a user cuts and pastes some text into the message box it counts them to. The snippet for that is here:</p>\n\n<pre>\n\njQuery(_private.textArea).on('keyup', function () {\n\n    total = _private.total - this.value.length;\n    _private.charId.textContent = total;\n    _private.charId.innerText = total;\n\n});\n\njQuery(_private.textArea).on('cut paste', function () {\n\n    // makes sure that any text cut and pasted into textarea is counted in character count\n\n    var text = this;\n\n    setTimeout(function () {\n        total = _private.total - text.value.length;\n        _private.charId.textContent = total;\n        _private.charId.innerText = total;\n    }, 150);\n\n});\n\n</pre>\n\n<p>The website is not responsive. As it uses a JavaScript bookmarklet, mobile users are not going to be interested. I did though do some media query tweaks for tablets.</p>\n\n<p>Nearly all the images are SVG. After being GZIPed they were up to a tenth smaller in size then their PNG equivalent and, of course, being vector based means their detail holds up well in devices and laptops with a high DPI.</p>\n\n<p>To fall back to non supporting SVG browsers I used Modernizr object detection in the CSS and IE conditional comments in the HTML like so:</p>\n\n<pre>\n\n&lt;!--[if (!IE)]&gt; --&gt;\n &lt;object data=&quot;/resources/new-images/central-image.svg&quot; type=&quot;image/svg+xml&quot;  width=&quot;970&quot; height=&quot;458&quot; &gt;\n      &lt;/object&gt;\n&lt;!-- &lt;![endif]--&gt; \n      &lt;!--[if (IE 9)]&gt;\n &lt;object data=&quot;/resources/new-images/central-image.svg&quot; type=&quot;image/svg+xml&quot;  width=&quot;970&quot; height=&quot;458&quot; &gt;\n      &lt;/object&gt;\n&lt;![endif]--&gt; \n      &lt;!--[if lt IE 9]&gt;\n&lt;img src=&quot;resources/no-svg/central-image.png&quot; width=&quot;970&quot; height=&quot;458&quot;&gt;\n&lt;![endif]--&gt; \n\n</pre>\n\n<p>A lot of Android devices do not have SVG support so it's not a recommended markup solution until the latest Android version is more widely adopted.</p>\n\n<p>The backend code that enabled me to access the Twitter API was the well-loved and well-used <a href=\"https://github.com/abraham/twitteroauth\">TwitterOAuth</a> by Abraham Williams. It was relatively easy to implement. On the back of this I built my own classes to deal with user registration and sending Tweets. As has been documented countless times PHP is not naturally unicode friendly, so I had to enable the Internalization extension on my server so that I could access the Normalizer class.</p>\n\n<p>I used the Google API URL shortener over other URL shortener APIs because it is so generous in it's daily limits (1 million!) and I presumed it would be the most reliable.</p>\n\n<p>My approach to the project was to let the browser do all the work so instead of keeping user details in a database I stored them in cookies. To handle security issues I encrypted all details with rijndael-256 Mcrypt and used an SSL certificate. Although the user details I choose to store was only the bare minimum necessary like a user picture URL and their name.</p>\n\n<h4>Conclusion</h4>\n\n<p>I started the project before Twitter's recent shift in attitude to third-party services, and although I have invested a lot of time in the project I've barely spent any hard cash. So if Twitter pulls the plug, well, at least I have another collection of tested code that I can use in future projects.</p>\n\n<p>I hope you are enjoy <a href=\"https://twttwt.com/\">TwtTwt</a> as much as I have enjoyed making it. Tweet away!\n</p>","categories":[],"uniqueId":"135022","url":"launch-twttwt-twitter-service-uses-unicode-symbols","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-five.jpg"},{"title":"Reflections on developing for Wordpress and Drupal","link":"http://www.suburban-glory.com/blog?page=162","author":"Andy Walpole","publishedDate":"1341211783000","contentSnippet":"Both Wordpress and Drupal are widely used and respected by a legion of developers. Wordpress is far more popular than Drupal, ...","content":"<p>Both Wordpress and Drupal are widely used and respected by a legion of developers. Wordpress is far more popular than Drupal, but Drupal is rapidly maturing with Version 8 looking likely to be a real serious contender that will breach the distance in takeup that is currently held by Wordpress.</p>\n\n<p>Wordpress isn't a fully fledged CMS (I've avoided calling it as such in this article) but is a versatile blogging platform. This is not a criticism because that is what it is intended to be. Drupal, on the other hand, is a full-blown CMS that offers features in its core not found in Wordpress unless you add third-party plugins.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/wordpress-logo.png\" alt=\"wordpress logo\" width=\"250\" height=\"250\"></p>\n\n<p>I've spend a lot of time developing for both platforms and this is my thoughts on their positive and negative sides.</p>\n\n<p>This article is not a thorough review of both content platforms but is subjective opinion based on my experience. It would be interesting to hear the views of others who have experience of Drupal and Wordpress.</p>\n\n<h3>The APIs</h3>\n\n<p>The first thing of note if comparing the two is that their code is aimed at two different groups of users. Wordpress wants to allow non-professional developers to create themes and modules. Drupal was created and used by professional developers. This in itself lead to problems and the Drupal community has been engaging in a constant process of modifying and reviewing both the admin UX  and the APIs to allow greater access beyond hardcore developers.</p>\n\n<p>The downside of the Wordpress approach is that there isn't the strict coding rules and the myriad of inbuilt functions that is a feature of Drupal. This leaves open the possibility to sloppy written third-party addons which is less likely in Drupal because of their strict coding standards and its bigger API collection.</p>\n\n<p>A lot of the Drupal API is really nice to work with, although the learning process is somewhat steeper than that of Wordpress. I think the form API is the best PHP form creation code I have ever used. The database API uses PDO so if you have knowledge of PHP Data Objects you'll find working with the Drupal database abstraction layer a smooth experience as they also use a lot of the same PDO methods like fetchAll() and fetchObject().</p>\n\n<p>The Wordpress form API, called Settings, isn't to my liking. For those that are used to creating PHP / HTML forms on a regular basis, then the user interface of the Settings API is too far removed from the meat and bones of HTML forms. It is important to create a user interface that allows the creation of form elements in the structure that you would if you handcoded it.</p>\n\n<p>This is an example of creating a form in Drupal:</p>\n\n<pre>\n\n$form[&#39;affiliate_hoover_unique_form&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;item&#39;,\n        &#39;#description&#39; =&gt; &#39;Some description here for form intro&#39;,\n        );\n\n    $form[&#39;first_part&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;fieldset&#39;,\n        &#39;#title&#39; =&gt; t(&#39;Feed details for &#39;.arg(4)),\n        &#39;#description&#39; =&gt; &#39;Fieldset description here&#39;,\n        );\n\n    $form[&#39;first_part&#39;][&#39;form_title&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;textfield&#39;,\n        &#39;#title&#39; =&gt; t(&#39;Title&#39;),\n        &#39;#required&#39; =&gt; TRUE,\n        &#39;#maxlength&#39; =&gt; 255,\n        &#39;#description&#39; =&gt; t(&#39;Do not add anything other than the above codes for a title&#39;),\n        &#39;#default_value&#39; =&gt; !empty($_REQUEST[&#39;form_title&#39;]) ? check_plain($_REQUEST[&#39;form_title&#39;]) :\n            check_plain($form_data-&gt;form_title),\n        );\n\n    $form[&#39;first_part&#39;][&#39;form_body&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;textarea&#39;,\n        &#39;#title&#39; =&gt; t(&#39;Post body&#39;),\n        &#39;#required&#39; =&gt; TRUE,\n        &#39;#description&#39; =&gt; t(&#39;You can use HTML in here. Examples:&lt;br&gt;To place an image: &#39;.\n            htmlspecialchars(&quot;&lt;img src=&quot;[#7#]&quot;&gt;&quot;).&quot;&lt;br&gt;To create a link: &quot;.htmlspecialchars(&quot;&lt;a href=&quot;[#5#]&quot;&gt;[#1#]&lt;/a&gt;&quot;).\n            &#39;&lt;br&gt;If you are going to include internal links you must write the full URL, ie &#39;.\n            htmlspecialchars(&quot;http://www.example.com/category/page-here&quot;)),\n        &#39;#default_value&#39; =&gt; !empty($_REQUEST[&#39;form_body&#39;]) ? $_REQUEST[&#39;form_body&#39;] : $form_data-&gt;\n            form_body,\n        );\n    $form[&#39;first_part&#39;][&#39;form_taxonomy&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;textfield&#39;,\n        &#39;#title&#39; =&gt; t(&#39;Taxonomy&#39;),\n        &#39;#maxlength&#39; =&gt; 255,\n        &#39;#description&#39; =&gt; t(&#39;Can be either text or code. All values must be separated with a comma&#39;),\n        &#39;#default_value&#39; =&gt; !empty($_REQUEST[&#39;form_taxonomy&#39;]) ? check_plain($_REQUEST[&#39;form_taxonomy&#39;]) :\n            check_plain($form_data-&gt;form_categories),\n        );\n\n    $form[&#39;first_part&#39;][&#39;post_status&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;checkbox&#39;,\n        &#39;#title&#39; =&gt; t(&#39;Status&#39;),\n        &#39;#description&#39; =&gt; t(&#39;Click to immediately publish the item. Otherwise, create item and manually switch to publish one at a time&#39;),\n        &#39;#default_value&#39; =&gt; !empty($_REQUEST[&#39;post_status&#39;]) ? $_REQUEST[&#39;post_status&#39;] : $form_data-&gt;\n            post_status,\n        );\n\n    $form[&#39;update&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;submit&#39;,\n        &#39;#value&#39; =&gt; &#39;Update and create&#39;,\n        &#39;#submit&#39; =&gt; array(&#39;affiliate_hoover_uniqueform_build_form_submit&#39;)\n        );\n        \n     $form[&#39;submit&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;submit&#39;,\n        &#39;#value&#39; =&gt; &#39;Create only&#39;,\n        &#39;#submit&#39; =&gt; array(&#39;affiliate_hoover_uniqueform_build_form_two_submit&#39;),\n        );\n\n    return $form;\n\n</pre>\n\n<p>Note the clear association between the form attributes and their values.</p>\n\n<p>With the Wordpress Settings API this is largely absent and I found it unnecessarily confusing when I tried to push it beyond basic use.</p>\n\n<p>In the end I created my own Wordpress form API which I documented in detail on <a href=\"http://www.problogdesign.com/wordpress/wordpress-development-bypassing-the-settings-api/\">Pro Blog Design</a>.</p>\n\n<h3>Less code is needed for Drupal development</h3>\n\n<p>Writing modules for Drupal means writing less code.</p>\n\n<p>As an example, when you uninstall a module on Drupal the database tables are automatically deleted, while with Wordpress you have to create a database call in the uninstall hook. It's touches like this that when all added together create a far smaller code base.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/drupal1.png\" width=\"250\" alt=\"drupal logo\"></p>\n\n<p>What warms me to Drupal is I feel that I am treading on the footsteps of previous work stretching back years. Drupal developers are particularly forward in adding inbuilt functions to deal with the many issues they have faced in the past. One negative aspect of this is that there are hundreds of functions in Drupal which, considering the already chaotic nature of the thousands of native PHP functions, means a lot more time is needed to fully learn the Drupal codex.</p>\n\n<h3>Performance</h3>\n\n<p>In my experience Drupal performance tops that of Wordpress. I created a module called Affiliate Hoover for both platforms. The module parses CSV data and creates individual posts from the content. As as test I parsed one file with 1153 content items, Drupal took 14 seconds while Wordpress took 37 seconds to create 1153 posts.</p>\n\n<p>The variable isn't because of my code. The actual process of parsing the file into arrays / objects  ready for database entry takes less than a second. The rest of that time is used by the respective platforms creating database entries for each item.</p>\n\n<p>Even when flicking between the two platforms, admin Wordpress pages have a noticeable time lag before they fully load while Drupal renders admin pages instantly.</p>\n\n<h3>Hosting servers</h3>\n\n<p>Both Drupal and Wordpress need at the very least a VPS but most likely a dedicated server. A big performance issue for Wordpress is the widespread availability of badly-coded plugins. If you start using a dozen of these in your build then Wordpress really has trouble coping on a server without generous memory allowance.</p>\n\n<h3>Online documentation</h3>\n\n<p>On a plus side for both platforms there are a ton of online videos and tutorials to refer to, with a particular help being the stackoverflow sub forms for each software item. Both, to, have a number of high quality published guides which are available for purchase.</p>\n\n<h3>Easy of use for non-technical users</h3>\n\n<p>The big win for Wordpress is its excellent admin section. This, I feel, is the main reason so many web designers are happy to recommend it to clients. The thought of handing over a site built with Drupal 6 to a client and expecting them to master it is laughable. Thanks to Mark Boulton's web design company Drupal 7 made dramatic improvements to the admin UX but there is still some way to go which I hope will be fully realised in version 8.</p>\n\n<h3>Theming</h3>\n\n<p>The next big win for Wordpress is its theming. It's a real pleasure to work with. The Drupal Theme API is horrendous. What with all the processor and pre-processor hooks there is often several different solutions to one problem. Please, just one solution for one problem and no more. Thankfully, Drupalistas now recognise this and in version 8 it will be replaced by the Symfony template system, Twig. Once implemented this has the potential to dramatically increase the take up of Drupal by web design agencies who need a faster and less complicated way of creating Drupal themes (time is money).</p>\n\n<h3>Conclusion.</h3>\n\n<p>There is no Drupal vs Wordpress debate. It's simply the case that one may be more suitable for a particular project than the other. Any commercial company should potentially be prepared to use either.</p>\n\n<p>As detailed above, both have many positive sides to their API approach and each have some negative parts. Neither is perfect, but they are mature platforms much in demand by clients. If you are a professional developer it makes sense to learn both platforms so as to increase your opportunities in finding work.</p>\n\n<p>If you are unfamiliar with developing for either or both here are some books that I would recommend:</p>\n\n<p><strong><a href=\"http://goo.gl/ZKyW3\">Pro Dupal 7 Development</a></strong> by Todd Tomlinson and John K. VanDyk (Apress, 2010)<br><strong><a href=\"http://goo.gl/NdG7i\">Professional Wordpress Plugin Development</a></strong> by Brad Williams, Ozh Richard and Justin Tadlock (Wrox, 2011)<br><strong><a href=\"http://goo.gl/O7KrK\">Drupal 7 Module Development</a></strong> by Matt Butcher, Matt Farina, Ken Rickard, Greg Dunlap, Larry Garfield and John Albin Wikins (Packt, 2010)</p>","categories":[],"uniqueId":"134121","url":"reflections-developing-wordpress-drupal","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-six.jpg"},{"title":"Using the Pomodoro technique for time management","link":"http://www.suburban-glory.com/blog?page=161","author":"Andy Walpole","publishedDate":"1340973896000","contentSnippet":"It would be nice to be hyper-enthusiastic for every single job but the truth is that some coding jobs are tedious and the ...","content":"<p>It would be nice to be hyper-enthusiastic for every single job but the truth is that some coding jobs are tedious and the temptation of Twitter, Urban75, BBC news site etc. has a habit of overriding the work on hand.</p>\n\n<p>One method of handling these dull jobs was first introduced to me by a fellow member of Forrst.</p>\n\n<p>The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s. It works by breaking down the work time into the following segments:</p>\n\n<ul><li>20 minutes of work</li>\n<li>5 minutes break</li>\n<li>20 minutes of work</li>\n<li>5 minutes break</li>\n<li>20 minutes of work</li>\n<li>5 minutes break</li>\n<li>20 minutes of work</li>\n<li>20 minute break</li>\n</ul>\n\n<p>And then repeat again.</p>\n\n<p>This has the advantage of making you more disciplined with the time at hand. Not only does this strict structure of working to the clock mean you are less likely to let your mind wander, but it is easy in coding to become fixated on minor bugs. With the clock ticking down I release that these minor problems aren't fundamental to the current state of the project and so I put them aside for later.</p>\n\n<p>Another positive aspect is that it stops me from continuously working in front of a monitor for hours at a time. In the break segments I make myself a cup of tea or have a fag. These moments are also important reflection periods.</p>\n\n<p>To assist with timekeeping I use a great AIR app called <a href=\"http://code.google.com/p/pomodairo\">Pomodairo</a>. It's a small little device that runs in the background as you work and chimes when a segment has ended.</p>\n\n<p>Give it a go and tell me what you think.\n</p>","categories":[],"uniqueId":"134097","url":"using-pomodoro-technique-time-management","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-seven.jpg"},{"title":"Penny Books launched, books for a penny À gogo","link":"http://www.suburban-glory.com/blog?page=160","author":"Andy Walpole","publishedDate":"1339595484000","contentSnippet":"\n\nI'm pleased to announce the launch of a little side project of mine, Penny Books. It is a quirky book search engine that uses ...","content":"<p><img src=\"http://www.suburban-glory.com/images/pennybooks-logo.png\" alt=\"penny books logo\"></p>\n\n<p>I'm pleased to announce the launch of a little side project of mine, <a href=\"http://pennybooks.info/\">Penny Books</a>. It is a quirky book search engine that uses the Amazon API to find books which are on sale for one penny.</p>\n\n<p>This idea originally came to me years ago. I bought a book called The Web Developers Guide to Amazon eCommerce Service by Jason Levitt, but being the coding pup I was then, the contents went over my head. Today I'm more than intellectually equipped for the job!</p>\n\n<p>Amazon uses SOAP as its preferred information sharing protocol but, thankfully, I didn't have to spend time on the details of this technology because I used Jan Eichhorn's <a href=\"https://github.com/Exeu/Amazon-ECS-PHP-Library\">Amazon Product Lookup and Product Search Library</a>. This little script is fantastically user-friendly and I never had any problems that couldn't be easily overcome.</p>\n\n<p>Another part of the server-side code was limiting the number of searches per person per hour. Amazon places very strict limits on access to its data and it would have taken only a small number of visitors to exhaust the hourly rate. The only foolproof method is by building a database and tracking visitors' IP addresses and their number of searches. It's important as well to have fields for the time of their last visit and the time of their “banning”. By using all these fields it is possible to effectively block access to the remote API call if the user exceeds the limit and also delete old and unwanted database entries.</p>\n\n<p>Also on the server-side, the site uses Bad Behavior and Project Honeypot to help repulse spam.</p>\n\n<p>For the client-side code I used the jQuery library for the usual cross-browser compatibility issues and the wonderful <a href=\"http://srobbin.com/jquery-plugins/backstretch/\">Backstretch plugin</a> for the central fixed background image. It is possible to use a background image in CSS and the background-size property, but, like all CSS3, it isn't supported in Internet Explorer 8 and below. Also, I've used Backstretch on a number of different projects now and I've found that it renders the images a lot sharper than “background-size: contain” does.</p>\n\n<p>As the site uses AJAX, I also used the HTML5 History API in order to create usable URLs (Twitter is currently in the process of swapping over to this new API). The only sane way of beginning to achieve acceptable cross-browser working code is to use Benjamin Lipton’s <a href=\"https://github.com/balupton/History.js/\">History.js</a>. I write “beginning” on purpose because there are bugs in the code and it is necessary to write more JavaScript to fill in this hole.</p>\n\n<p>The CSS is fully responsive with a dependence on relative and percentage measurements. </p>\n\n<p>On the left hand side on the home page are social media buttons. I wanted these removed from the mobile version. The lazy way is to hide it with “display: none” but the mobile platform will still download the code. The method I used was to build the social media buttons with JavaScript and, using screen.width, to only access the code on large devices.</p>\n\n<p>So, I hope you have fun with Penny Books and you find those reading bargains!\n</p>","categories":[],"uniqueId":"133959","url":"penny-books-launched-books-for-penny--gogo","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-eight.jpg"},{"title":"Hide CSS in Internet Explorer 8 and below","link":"http://www.suburban-glory.com/blog?page=157","author":"Andy Walpole","publishedDate":"1333896978000","contentSnippet":"There is, of course, an easy of way of targeting certain versions of Internet Explorer by using conditional comments. This ...","content":"<p>There is, of course, an easy of way of targeting certain versions of Internet Explorer by using conditional comments. This allows you to separate your CSS into different files based on browser version.</p>\n\n<p>If you know your CSS then you should only occasionally need to worry about targeting particular legacy versions of Microsoft's browser, but there are occasions when it is a necessity.</p>\n\n<p>If you only require a small amount of code it hardly seems worth creating a different style sheet.</p>\n\n<img src=\"http://www.suburban-glory.com/images/CSS3_Logo.png\" width=\"240\" height=\"278\" alt=\"css3 logo\"><p>There are a number of hacks that enable the coder to target versions of Internet Explorer within the main CSS file. Here are a few of them. All that is needed is to add the following to the root of the selector list:</p>\n\n<h3>IE6 and below</h3>\n\n<pre>\n* html /* selectors here */{\n\n/* properties and values */\n\n} \n</pre>\n\n<p></p>\n\n<h3>IE7 and below</h3>\n\n<pre>\n*:first-child+html /* selectors here */{\n\n/* properties and values */\n\n} \n</pre>\n\n<h3>IE7 and up</h3>\n\n<pre>\nhtml&gt;body /* selectors here */{\n\n/* properties and values */\n\n} \n</pre>\n\n<p>The last isn't really a hack as it just ultilizes the descendent selector that isn't understood by IE6.</p>\n\n<p>I needed to hide a class called “spinning-wheel” from versions of IE8 and below. It used a lot of CSS3 and as it was only a minor usability feature so it was easier to hide it from older versions of IE rather backport the code.</p>\n\n<p>One way of doing that was to create different style sheets with conditional comments and use display: none for the class. But that's overkill. Instead, I placed :root at the foot of the selector. In HTML the :root is <em>always</em> HTML (it's different in XML).</p>\n\n<pre>\n:root .spinning-wheel{\n\n/* properties and values */\n\n}\n</pre>\n\n<p>The CSS block is now totally ignored by IE8 and below.\n</p>","categories":[],"uniqueId":"133389","url":"hide-css-internet-explorer-8-below","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-nine.jpg"},{"title":":focus pseudo-class feature detection","link":"http://www.suburban-glory.com/blog?page=156","author":"Andy Walpole","publishedDate":"1333647288000","contentSnippet":"\n\nI'm not quite sure whose idea the CSS3 :focus pseudo-class class was, but including it in the CSS spec was a minor act of ...","content":"<p><img src=\"http://www.suburban-glory.com/images/240px-JavaScript-logo.png\" width=\"240\" height=\"240\" alt=\"javascript logo\"></p>\n\n<p>I'm not quite sure whose idea the CSS3 :focus pseudo-class class was, but including it in the CSS spec was a minor act of ingenuity.</p>\n\n<p>When you view CSS-only animation then :focus is usually at the centre of the code. For examples, take a look at this <a href=\"http://tympanus.net/Tutorials/LoginRegistrationForm/\">login and registration form</a>, <a href=\"http://tympanus.net/Tutorials/CSS3ContentNavigator/index.html#slide-main\">content navigator</a> and <a href=\"http://tympanus.net/Tutorials/CSS3PageTransitions/index.html#home\">page transition effect</a>.</p>\n\n<p>As :focus is so wonderful why don't we see more use of it outside of exhibition demos? The answer is two words, Internet Explorer. Versions 8 and below of Microsoft's browser do not support this useful CSS pseudo-class.</p>\n\n<p>Due to this lack of support coders have preferred using JavaScript and its event-driven programming approach to user interaction; but as the demise of the legacy browsers continues and CSS continues to claim greater chunks of the presentation layer, then the appeal of :focus will grow in tandem.</p>\n\n<h3>JavaScript object detection</h3>\n\n<p>I'm currently working on a version of the well-known lightbox script. I wanted to fully utilise CSS3 animation but have a credible full back for the legacy browsers. As my version was dependent on :focus, the first step was to create a feature detection script so as to then provide a JavaScript event-driven fallback.</p>\n\n<p>It seems though that feature detection for :focus is far from straight forward so I had to resort to a hack. A hack, by my definition, is to use code for a purpose other that what it was intended for. In my example below, I looked for CSS opacity support. Now I know that this property is not supported in IE versions 8 and below and :focus is not supported in versions 8 and below so, therefore, I tested for opacity support because it is easier to script for.</p>\n\n<p>JavaScript purists might throw their legs in the air and have a bit of a fit to this approach, but Internet Explorer is an imperfect browser so solutions to dealing with it are also sometimes imperfect.</p>\n\n<p>The code I created is below. To see it working <a href=\"http://jsfiddle.net/TCotton/e37dG/17/\">click through to this jsfiddle page I have created</a>.</p>\n\n<pre>\n\nvar testFocus = (function () {\n\n    var legacy = {\n        test: function () {\n            return document.getElementsByTagName('body')[0].style.opacity !== undefined;\n        }\n    };\n\n    var nonLegacy = {\n        test: function () {\n            return document.getElementsByTagName('body')[0].style.opacity !== undefined;\n        }\n    };\n\n    if (nonLegacy.test() !== undefined) {\n        return nonLegacy;\n    } else {\n        return legacy;\n    }\n\n})();\n\n// Run script like this:\ntestFocus.test();\n\n</pre>","categories":[],"uniqueId":"133364","url":"focus-pseudo-class-feature-detection","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-ten.jpg"},{"title":"Centring elements horizontally and vertically with the CSS3 calc() function","link":"http://www.suburban-glory.com/blog?page=155","author":"Andy Walpole","publishedDate":"1333362218000","contentSnippet":"Another month arrives and more CSS3 comes into play. March was witness to calc() being incorporated into the Webkit engine.\n\nI ...","content":"<p>Another month arrives and more CSS3 comes into play. March was witness to calc() being incorporated into the Webkit engine.</p>\n\n<p>I wrote back in <a href=\"http://www.suburban-glory.com/blog?page=130\">January 2011</a> about the calc() function and stated it would be one to watch in the future:</p>\n\n<blockquote><p>\nI can guarantee that you will see a multitude of articles written about this function in the coming years. It will be particularly useful when a number of new CSS3 units such as viewport height and width come into play, and when the use of the attr() function is expanded upon.\n</p></blockquote>\n\n<p>Now that it has been incorporated into the Webkit engine the time of calc() has arrived, and one critical use will be the horizontal and vertical centring of page elements.</p>\n\n<p>To briefly summarise calc(), it allows mathematical equations to be used in style sheets. So the basic mathematical operators are permitted and, importantly, so is the mixing of value types. As an example, the following is permissible:</p>\n\n<pre>\ncalc(50% - 20px);\n</pre>\n\n<p>Its key benefit will be to responsive design as it allows for better control of fluid layouts.</p>\n\n<p>As a demonstration I'll centre an image on a page. The dimensions of the image is 320 x 305. </p>\n\n<p>The first part of the calculation reads as so:</p>\n\n<pre>\nimg {\nposition : absolute;\n top: calc(100% - 50% );\n left: calc(100% - 50%);\n}\n</pre>\n\n<p>That is 100% or the parent container's height and width minus 50% of this figure. It is not necessary to specify the height and width of the parent container in the HTML or CSS as the browser  calculates this.</p>\n\n<p>The image is now semi-centred but it does so on its top and left axis.</p>\n\n<p>We need to take the image dimensions into consideration:</p>\n\n<pre>\nimg {\nposition : absolute;\n top: calc(100% - 50% - 305px);\n left: calc(100% - 50% - 302px);\n}\n</pre>\n\n<p>Almost there, but we need to evenly distribute the image dimensions across all axis' like so:</p>\n\n<pre>\nimg {\nposition : absolute;\n top: calc(100% - 50% - (305px / 2));\n left: calc(100% - 50% - (320px / 2));\n}\n</pre>\n\n<p>Perfect! Now make sure the browser prefixes are present:</p>\n\n<pre>\nimg {\nposition : absolute;\n top: -moz-calc(100% - 50% - (305px / 2));\n left: -moz-calc(100% - 50% - (320px / 2));\n top: -webkit-calc(100% - 50% - (305px / 2));\n left: -webkit-calc(100% - 50% - (320px / 2));\n top: calc(100% - 50% - (305px / 2));\n left: calc(100% - 50% - (320px / 2));\n}\n</pre>\n\n<p><a href=\"http://www.suburban-glory.com/calc.html\">Lets see the above code in action</a>.</p>\n\n<p>Centring elements on a page like this is only possible if you know the dimensions of the object you wish to centre.</p>\n\n<p>At the time of writing, calc() works in Firefox and Internet Explorer versions 9 and above. It is now a part of Webkit but has yet to filter out to Chrome or Safari.</p>\n\n<p>calc() will become even more user-friendly once the attr() function is expanded on. We could then use code that looks like this:</p>\n\n<pre>\nimg {\nposition : absolute;\n top: -moz-calc(100% - 50% - (attr(height) / 2));\n left: -moz-calc(100% - 50% - (attr(width) / 2));\n top: -webkit-calc(100% - 50% - (attr(height) / 2));\n left: -webkit-calc(100% - 50% - (attr(width) / 2));\n top: calc(100% - 50% - (attr(height) / 2));\n left: calc(100% - 50% - (attr(width) / 2));\n}\n</pre>\n\n<p>As I wrote above, the main beneficiaries of calc() will be the responsive design crew but it's just as useful on the desktop.</p>\n\n<p>Now it's over to you, dear coder, to see what other uses calc() can bring to the CSS-using masses. Report back!</p>","categories":[],"uniqueId":"133336","url":"centring-elements-horizontally-vertically-with-css3-calc-function","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-one.jpg"},{"title":"Using cookies instead of wp_localize_script()","link":"http://www.suburban-glory.com/blog?page=154","author":"Andy Walpole","publishedDate":"1333009160000","contentSnippet":"\n\nSometimes the most obvious solution isn't the one that comes to you first. \n\nwp_localize_script() is a wonderful little slice ...","content":"<p><img src=\"http://www.suburban-glory.com/images/wordpress-logo.png\" width=\"250\" height=\"250\" alt=\"Wordpress logo\"></p>\n\n<p>Sometimes the most obvious solution isn't the one that comes to you first. </p>\n\n<p>wp_localize_script() is a wonderful little slice of Wordpress code that allows you to easily add PHP-created info into an accessible JavaScript object. </p>\n\n<p>On an admin form I needed to trigger a JavaScript object on successful completion. My method was to create an option field which was updated on successful form completion, with the same option field being called by wp_localize_script() . </p>\n\n<p>However, the JavaScript object created by wp_localize_script() was only ever updated after the form had been sumitted twice. Why? It took me a couple of hours to work it out but as the wp_localize_script() was called in the class constructor then any form action would always happen afterwards. </p>\n\n<p>So now I'm thinking, What about using AJAX? But the best and most simple answer was to use cookies.</p>\n\n<p>After form completion I set a cookie with a name of “_multi_cov” and the name of the form as its value:</p>\n\n<pre>\nsetcookie(\"_multi_cov\", $option_name);\n</pre>\n\n<p>The first part of the JavaScript checks to see if the \"_multi_cov\"cookie is set, if so run the object method:</p>\n\n<pre>\nif (document.cookie.indexOf(\"_multi_cov\") !== -1) {\n            OptionForm.multiFormName();\n}\n</pre>\n\n<p>Now in the multiFormName() method it is necessary to filter out the name of the form from the cookie:</p>\n\n<pre>\n var key, cookieMonster, mySplitResult, lastSplitResult;\n\n function removeArrayElement(element, index, array) {\n     return (element !== &quot;_multi_cov&quot;);\n }\n\n cookieMonster = document.cookie;\n mySplitResult = cookieMonster.split(&quot;;&quot;);\n\n for (x = 0, l = mySplitResult.length; x &lt; l; x += 1) {\n\n     if (mySplitResult[x].indexOf(&quot;_multi_cov&quot;) !== -1) {\n         lastSplitResult = mySplitResult[x].split(&quot;=&quot;);\n         key = lastSplitResult.filter(removeArrayElement).toString();\n     } // end if\n } // end for\n</pre>\n\n<p>In the key variable is the name of the form.</p>\n\n<p>I also deleted the cookie at the end of the JavaScript method:</p>\n\n<pre>\ndocument.cookie = \"_multi_cov\" + '=; expires=Thu, 01-Jan-70 00:00:01 GMT;';\n</pre>\n\n<p>The problem was that I was so in love with wp_localize_script() that it blinkered me to exploring a more appropriate alternative. In future I'll use wp_localize_script() for complex arrays and an alternative cookie solution for simple strings.</p>","categories":[],"uniqueId":"133300","url":"using-cookies-instead-wplocalizescript","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-two.jpg"},{"title":"Setting up Eclipse IDE for JavaScript and PHP development","link":"http://www.suburban-glory.com/blog?page=153","author":"Andy Walpole","publishedDate":"1332225930000","contentSnippet":"Everybody has their own IDE of choice with Sublime Text seemingly the most popular at the moment. A good IDE should be solid, ...","content":"<p>Everybody has their own IDE of choice with <a href=\"http://www.sublimetext.com/\">Sublime Text</a> seemingly the most popular at the moment. A good IDE should be solid, stable software with full features and UX which leaves you, the coder, freedom to concentrate on the job in hand.</p>\n\n<p>My personal favourite is phpDesigner 8. Although this is proprietary software, it has all the features needed for PHP and JavaScript devs. Included in the package is debugging, code beutifying and auto-completion. What I most like about it is that it comes complete in one install package and there is no need for modification.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/eclipse.png\" width=\"250\" height=\"250\" alt=\"Eclipse logo\"></p>\n\n<p><a href=\"http://www.mpsoftware.dk/phpdesigner.php\">phpDesigner</a> is for Windows but it is easy to install on Linux or a Mac if you use a Windows emulator like <a href=\"http://www.winehq.org/\">Wine</a>.</p>\n\n<p><a href=\"http://www.eclipse.org/\">Eclipse</a> has been around for several years and is a particular favourite with Java programmers. It is also possible to customise Eclipse for use with PHP and JavaScript.</p>\n\n<p>I just set up a version up on my desktop but I had a lot of problems along the way. Like a typical open source project, the online documentation is poor. Here is how I installed it.</p>\n\n<p>Firstly, <a href=\"http://www.eclipse.org/downloads/\">download the latest version of Eclipse here</a>. Make sure you download the JavaScript devs version.</p>\n\n<p>Now you will need to install the Aptana plugin. <a href=\"http://aptana.com/products/studio3/download\">Visit the Aptana website</a> and follow the instructions.</p>\n\n<p>Next, you'll need to add some more plugins.</p>\n\n<p><a href=\"http://web.napopa.com/en/2011/10/references/using-eclipse-ide-for-php-javascript-and-markup-web-development/\">Go to this article here</a> and at the bottom download the attachment. Follow the instructions in the article about how to install the file.</p>\n\n<p>My advice would be to deal with one plugin at a time rather than all together at once. Beware, some take a long time to download and install. Once you have installed all the addons go to “help” &gt; “check for updates” in the Eclipse menu. Again, this may take some time so go make yourself a cup of tea.</p>\n\n<p>After you have achieved all of the above you now have Eclipse modified for PHP and JavaScript development installed on your OS.</p>\n\n<p><strong>There is now a <a href=\"http://science.webhostinggeeks.com/eclipse-ide\">Serbo-Croatian version of this article</a> which was translated by <a href=\"http://science.webhostinggeeks.com/\">Anja Skrba</a></strong></p>","categories":[],"uniqueId":"133222","url":"setting-eclipse-ide-javascript-php-development","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-three.jpg"},{"title":"Checking for unique values in a multidimensional array","link":"http://www.suburban-glory.com/blog?page=152","author":"Andy Walpole","publishedDate":"1331393995000","contentSnippet":"\n\nThere are lots of different solutions to this problem posted on forums all over the web. But here is a very simple solution I ...","content":"<p><img width=\"281\" height=\"193\" alt=\"PHP elephant\" src=\"http://www.suburban-glory.com/images/elephpant_281_193.png\"></p>\n\n<p>There are lots of different solutions to this problem posted on forums all over the web. But here is a very simple solution I came up with the other day.</p>\n\n<p>Below was an array whose values were from a form. I wanted to make sure that the user only submitted unique data for every field.</p>\n\n<pre>\narray\n  1 =&gt; \n    array\n      &#39;feedName&#39; =&gt; string &#39;Name of feed here&#39; (length=17)\n      &#39;input_gen&#39; =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a383a22666565644e616d65223b733a323a226964223b733a393a22666565642d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32313a22546865206e616d65206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22323030223b733a353a2276616c7565223b733a31373a224e616d65206f6620666565642068657265223b733a363a2273656c656374223b623a303b7d&#39; (length=430)\n  2 =&gt; \n    array\n      &#39;urlName&#39; =&gt; string &#39;http://www.bbc.co.uk/news/world-middle-east-17323093&#39; (length=52)\n      &#39;input_gen&#39; =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32303a225468652055524c206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a34373a22687474703a2f2f7068702e6e65742f6d616e75616c2f656e2f66756e6374696f6e2e61727261792d706f702e706870223b733a363a2273656c656374223b623a303b7d&#39; (length=484)\n  3 =&gt; \n    array\n      &#39;urlName&#39; =&gt; string &#39;http://www.bbc.co.uk/news/uk-politics-17323504&#39; (length=46)\n      &#39;input_gen&#39; =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32343a225468652055524c206f662074686520666565642074776f3a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a38313a22687474703a2f2f737461636b6f766572666c6f772e636f6d2f7175657374696f6e732f373338393137362f636f6d706172652d6d756c746964696d656e73696f6e616c2d6172726179732d696e&#39;... (length=560)\n  4 =&gt; \n    array\n      &#39;feedName&#39; =&gt; string &#39;Name of feed here too&#39; (length=21)\n      &#39;input_gen&#39; =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a383a22666565644e616d65223b733a323a226964223b733a393a22666565642d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32313a22546865206e616d65206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22323030223b733a353a2276616c7565223b733a333a22594553223b733a363a2273656c656374223b623a303b7d&#39; (length=400)\n  5 =&gt; \n    array\n      &#39;urlName&#39; =&gt; string &#39;http://www.bbc.co.uk/news/uk-england-tyne-17324795&#39; (length=50)\n      &#39;input_gen&#39; =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32303a225468652055524c206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a333a22594553223b733a363a2273656c656374223b623a303b7d&#39; (length=394)\n  6 =&gt; \n    array\n      &#39;urlName&#39; =&gt; string &#39;http://www.bbc.co.uk/news/uk-17282903&#39; (length=37)\n      &#39;input_gen&#39; =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32343a225468652055524c206f662074686520666565642074776f3a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a333a22594553223b733a363a2273656c656374223b623a303b7d&#39; (length=402)\n</pre>\n\n\n\n<p>The first part of the code meant trimming down the multidimensional array to something more manageable like so (don't be distracted by the long strings of hex numbers - that's another story for another time):</p>\n\n<pre>\n$tmp = array();\n\nforeach ($array as $row) {\n\n    foreach ($row as $result) {\n\n        $tmp[] = $result;\n\n    } // end foreach\n    \n} // end foreach\n</pre>\n\n<p>So now the array looks like this:</p>\n\n<pre>\narray\n  0 =&gt; string &#39;Name of feed here&#39; (length=17)\n  1 =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a383a22666565644e616d65223b733a323a226964223b733a393a22666565642d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32313a22546865206e616d65206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22323030223b733a353a2276616c7565223b733a31373a224e616d65206f6620666565642068657265223b733a363a2273656c656374223b623a303b7d&#39; (length=430)\n  2 =&gt; string &#39;http://www.bbc.co.uk/news/world-middle-east-17323093&#39; (length=52)\n  3 =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32303a225468652055524c206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a34373a22687474703a2f2f7068702e6e65742f6d616e75616c2f656e2f66756e6374696f6e2e61727261792d706f702e706870223b733a363a2273656c656374223b623a303b7d&#39; (length=484)\n  4 =&gt; string &#39;http://www.bbc.co.uk/news/uk-politics-17323504&#39; (length=46)\n  5 =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32343a225468652055524c206f662074686520666565642074776f3a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a38313a22687474703a2f2f737461636b6f766572666c6f772e636f6d2f7175657374696f6e732f373338393137362f636f6d706172652d6d756c746964696d656e73696f6e616c2d6172726179732d696e&#39;... (length=560)\n  6 =&gt; string &#39;Name of feed here too&#39; (length=21)\n  7 =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a383a22666565644e616d65223b733a323a226964223b733a393a22666565642d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32313a22546865206e616d65206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22323030223b733a353a2276616c7565223b733a333a22594553223b733a363a2273656c656374223b623a303b7d&#39; (length=400)\n  8 =&gt; string &#39;http://www.bbc.co.uk/news/uk-england-tyne-17324795&#39; (length=50)\n  9 =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32303a225468652055524c206f662074686520666565643a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a333a22594553223b733a363a2273656c656374223b623a303b7d&#39; (length=394)\n  10 =&gt; string &#39;http://www.bbc.co.uk/news/uk-17282903&#39; (length=37)\n  11 =&gt; string &#39;613a383a7b733a343a2274797065223b733a343a2274657874223b733a343a226e616d65223b733a373a2275726c4e616d65223b733a323a226964223b733a383a2275726c2d6e616d65223b733a353a22636c617373223b623a303b733a343a2264657363223b733a32343a225468652055524c206f662074686520666565642074776f3a223b733a393a226d61786c656e677468223b733a333a22333030223b733a353a2276616c7565223b733a333a22594553223b733a363a2273656c656374223b623a303b7d&#39; (length=402)\n</pre>\n\n<p>The magic comes in using array_unique(). If there are any values that are the same then this function will remove them. So, by comparing the number of elements in the array with and without using array_unique() we know there is repetition if there is a dissonance between the numbers. How easy is that! </p>\n\n<p>The full function looks like so:</p>\n\n<pre>\nfunction duplicate_entries($array) {\n\n    $tmp = array();\n\n    foreach ($array as $row) {\n\n        foreach ($row as $result) {\n\n            $tmp[] = $result;\n\n        } // end foreach\n\n    } // end foreach\n\n    if (count($tmp) !== count(array_unique($tmp))) {\n        return FALSE;\n    }\n\n}\n</pre>","categories":[],"uniqueId":"133139","url":"checking-unique-values-in-multidimensional-array","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-four.jpg"},{"title":"Using PHP to parse XML, RSS or CVS files which are compressed with ZIP or  GZIP","link":"http://www.suburban-glory.com/blog?page=151","author":"Andy Walpole","publishedDate":"1330014391000","contentSnippet":"Reading and creating XML, RSS and CVS files is essential knowledge when it comes to using PHP because they are all formats ...","content":"<p>Reading and creating XML, RSS and CVS files is essential knowledge when it comes to using PHP because they are all formats commonly used for a wide range of purposes.</p>\n\n<p>I'm just in the middle of creating a Wordpress plugin that downloads affiliate scripts from a remote server. The files can be in any of the three formats.</p>\n\n<img src=\"http://www.suburban-glory.com/images/elephpant_281_193.png\" width=\"281\" height=\"193\" alt=\"PHP elephant\"><p>Previously I've used the XMLWriter and XMLWriter classes, the SimplePie library and some dabbling with SOAP, but this was my first introduction to dealing with CVS.</p>\n\n<p>Below are some functions that I created for this project with explanations. In time I'll re-factor the code into class methods and with the appropriate inbuilt Wordpress functions.</p>\n\n<p>The first step in downloading a remote source is to check whether it actually exists. It may be the case that the user has wrongly typed the URL or maybe the server is temporarily down.</p>\n\n<p>This is the function I created for this purpose:</p>\n\n<pre>\n\nfunction remote_file_exists($url) {\n\n    // IMPORTANT : Check to see if the file exists on the remote server\n    // If the HTTP code is 200 then return true - everything else false\n\n    $ch = curl_init($url);\n\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_exec($ch);\n    $retcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    if ($retcode === 200) {\n\n        return true;\n\n    } else {\n\n        return false;\n\n    }\n}\n\n</pre>\n\n<p>\nIt uses the Client URL (cURL) library which has been a component of PHP since version 4.0.2. CURLOPT_NOBODY used in the <a href=\"http://www.php.net/manual/en/function.curl-setopt.php\">curl_setopt</a> function excludes the body from download as we are only after the header details, while CURLINFO_HTTP_CODE in <a href=\"http://www.php.net/manual/en/function.curl-getinfo.php\">curl_getinfo</a> returns the HTTP status code. A 200 HTTP status code means the file is okay to download.</p>\n\n<h3>PHP &amp; ZIP</h3>\n\n<p>The first thing when accessing a ZIP file is to download it onto the server with the following code:</p>\n\n<pre>\n\nfunction grab_file($url, $new_file) {\n\n    //get file\n    $ch = curl_init();\n    $fp = fopen(&quot;zip/$new_file&quot;, &quot;w&quot;);\n\n    $options = array(CURLOPT_URL =&gt; $url, CURLOPT_HEADER =&gt; 0, CURLOPT_FAILONERROR =&gt; 1, CURLOPT_AUTOREFERER =&gt; 1, CURLOPT_BINARYTRANSFER =&gt; 1, CURLOPT_RETURNTRANSFER =&gt; 1, CURLOPT_FOLLOWLOCATION =&gt; 1, CURLOPT_TIMEOUT =&gt; 5, CURLOPT_FILE =&gt; $fp);\n\n    curl_setopt_array($ch, $options);\n    $file = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n\n    if (!$file) {\n \n        return false;\n\n    } else {\n\n        return true;\n\n    }\n}\n\n</pre>\n\n<p>Again, back to cURL. This component of PHP can initially look deceptively simple but is a Swiss army knife that has a multitude of options. <a href=\"http://www.php.net/manual/en/function.curl-setopt.php\">For a list of which take a look at this page.</a></p>\n\n<p>CURLOPT_FILE is the new file the contents will be written to, CURLOPT_TIMEOUT is set to five seconds, CURLOPT_URL is the resource to be downloaded,  CURLOPT_RETURNTRANSFER sets the return as a string while  CURLOPT_BINARYTRANSFER permits binary data.</p>\n\n<p>I had lot of trouble setting the right options in the function above but thankfully <a href=\"http://stackoverflow.com/questions/3713472/using-curl-with-pclzip-class\">a thread on Stackoverflow</a> pointed me in the right direction.</p>\n\n<p>Now there is a copy of the ZIP file on your server it is time to unzip it to reveal the goodies underneath. This can be done with the PHP ZipArchive class:</p>\n\n<pre>\n\nfunction get_zip($data) {\n\n    $zip = new ZipArchive();\n    $filename = $data;\n\n    if ($zip-&gt;open($filename, ZIPARCHIVE::CREATE || ZIPARCHIVE::OVERWRITE)) {\n\n        $zip-&gt;extractTo(&#39;feeds&#39;);\n        $zip-&gt;close();\n\n        return true;\n\n    } else {\n\n        return false;\n\n    }\n}\n\n</pre>\n\n<p>The above code should be self-explanatory. However, I have been informed that some shared servers have the PHP ZIP option switched off. I'm not sure if this is still the case in 2012 but I decided to use instead a third-party class called <a href=\"http://www.phpconcept.net/pclzip/\">PclZip</a> which is released on a GPL and LGPL free software license. </p>\n\n<pre>\n\nfunction unzip($file) {\n\n    $archive = new PclZip(&quot;zip/$file&quot;);\n\n    $list = $archive-&gt;extract(PCLZIP_OPT_PATH, &quot;feeds&quot;, PCLZIP_OPT_REMOVE_ALL_PATH);\n\n    if (!$list[0][&#39;filename&#39;]) {\n\n        die(&quot;Error : &quot; . $archive-&gt;errorInfo(true));\n\n    } else {\n\n        $path = &quot;zip/$file&quot;;\n        unlink($path);\n        return $list[0][&#39;filename&#39;];\n\n    }\n}\n\n</pre>\n\n<p>There are a number of optional arguments that can be used when extracting the file for <a href=\"http://www.phpconcept.net/pclzip/user-guide/5\">a full list of which read this page.</a></p>\n\n<h3>PHP &amp; GZIP</h3>\n\n<p>The difference between the Zip and the Zlib module is that it is possible to save a resource to memory which is why I haven't used cURL here.</p>\n\n<pre>\n\nfunction get_gzip($url, $new_file, $ext) {\n    \n    $new_file = \"feeds/$new_file.$ext\";\n\n    $remote = gzopen($url, \"rb\");\n    $home = fopen($new_file, \"w\");\n\n    while ($string = gzread($remote, 4096)) {\n        fwrite($home, $string, strlen($string));\n    }\n    gzclose($remote);\n    fclose($home);\n    \n    if($home !== null) {\n        \n        return $new_file;\n        \n    } else {\n        \n        return false;\n        \n    }\n}\n\n</pre>\n\n<p>Thanks go to a user on Stackoveflow who pointed out a far more memory efficient way of grabbing massive files by downloading it in chunks.</p>\n\n<h3>RSS &amp; PHP</h3>\n\n<p>There are several different RSS formats which are all XML but are radically different from each other. I would strongly suggest that you don't try to be a PHP superhero and attempt to write your own code for parsing RSS but instead use a third-party script.</p>\n\n<p>The leading industry favourite for this job is <a href=\"http://simplepie.org/\">SimplePie</a>, originally created by <a href=\"http://ryanparman.com/\">Ryan Parman</a>, <a href=\"http://ryanmccue.info/\">Ryan McCue</a> and <a href=\"http://gsnedders.com/\">Geoffrey Sneddon</a>. Seriously, use SimplePie – the alternative may be premature ageing or madness.</p>\n\n<p>Here is the most basic SimplePie example:</p>\n\n<pre>\n\n$feed = new SimplePie();\n\n$feed-&gt;set_feed_url( url here );\n\n$success = $feed-&gt;init();\n\n</pre>\n\n<p>After creating an instance of the class, call the feed and then run the init method. Easy!</p>\n\n<h3>CVS &amp; PHP</h3>\n\n<p>Comma-separated values (CSV) files are wildly popular amongst a whole range of software applications but it's not a format that finds common use amongst web developers. Unlike XML, CVS is not a mark-up language but plain text which uses commas to separate the data. <a href=\"http://php.net/manual/en/function.fgetcsv.php\">PHP does have its own CVS file function</a>, but it's probably best if you use the PEAR class, <a href=\"http://pear.php.net/package/File_CSV_DataSource\">File_CSV_DataSource</a>. Created by <a href=\"https://github.com/ktlacaelel\">Kazuyoshi Tlacaelel</a> it is released under the permissive MIT license.</p>\n\n<p>Here is File_CSV_DataSource used in a function that returns the entire CSV file in an array:</p>\n\n<pre>\n\nfunction parse_csv($file) {\n\n    $csv = new File_CSV_DataSource;\n\n    $feed = $file;\n\n    if ($csv-&gt;load($feed)) {\n\n        return $csv-&gt;getrawArray();\n\n    } else {\n\n        return false;\n\n    } // end if ($csv-&gt;sadfsad\n}\n\n</pre>\n\n<h3>XML &amp; PHP</h3>\n\n<p>For XML use the <a href=\"http://php.net/manual/en/function.simplexml-load-file.php\">simplexml_load_file</a>, a SimpleXML function.</p>\n\n<p>In its most basic form we can create an array as so:</p>\n\n<pre>\n\nfunction parse_xml($file) {\n\n    $xml = simplexml_load_file($file);\n\n    return $xml;\n}\n\n</pre>\n\n<p>If you are developer that has experience in the above areas then please feel free to leave a comment because in PHP there are many different ways to skin a cat.</p>","categories":[],"uniqueId":"133001","url":"using-php-parse-xml-rss-cvs-files-which-compressed-zip-or--gzip","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-five.jpg"},{"title":"Using advanced JavaScript array methods","link":"http://www.suburban-glory.com/blog?page=150","author":"Andy Walpole","publishedDate":"1329892824000","contentSnippet":"Advanced is an adjective used subjectively here because you may be already using the methods below on a regular basis, but in ...","content":"<p>Advanced is an adjective used subjectively here because you may be already using the methods below on a regular basis, but in by using the term advanced I am referring to JavaScript from versions 1.6 to 1.8 that are not available in Internet Explorer versions 8 and below.</p>\n\n<p>IE 8 was launched with the proud boast of being CSS 2.1 and ECMAScript 3 compliant, which for Microsoft was quite an achievement in 2009. But this technology is looking particularly old hat now. IE9 saw a massive jump in JavaScript support and I would expect that there will be an equally big jump between IE10 and IE9. <a href=\"http://kangax.github.com/es5-compat-table/\">For ECMAScript 5 browser compatibility see kangax's pretty table here.</a></p>\n\n<p><img src=\"http://www.suburban-glory.com/images/240px-JavaScript-logo.png\" width=\"240\" alt=\"240px-JavaScript-logo.png\"></p>\n\n<p>However IE8 is still one of the most popular browsers but being held back by only using ECMAScript 3 is no longer a necessity because of <a href=\"http://documentcloud.github.com/underscore/\">the underscore.js library</a>. Here you will find a full range of EMCA5 array methods which cannot be used in the legacy browsers. There may well be other JavaScript libraries that offer the same goodies but that isn't what this post is concerned with. Underscore.js nicely compliments jQuery so let them both flow some code love into your next project.</p>\n\n<h3>indexOf</h3>\n\n<p>JavaScript array methods are split into three camps: mutator, accessor and iteration.</p>\n\n<p>You'll probably be already familiar with many JavaScript mutator methods, which are pop, push, reverse, shift, sort, splice and unshift; but JavaScript 1.6 introduced a new but extremely useful accessor method, indexOf.</p>\n\n<p>This is already widely used as a string object method, but has now been extended to the array object and offers the equivalent to the PHP in_array function.</p>\n\n<p>When Jonathan Snook wrote <a href=\"http://snook.ca/archives/javascript/testing_for_a_v\">Testing for a Value in a JavaScript Array</a> in 2006 he fell back to using the in operator in the for loop to achieve the same result, but now the in operator can be thrown out and indexOf let loose:</p>\n\n<pre>\n\nvar anArray = ['john','mary','george','freddy','jane']\n\nconsole.log(anArray.indexOf(\"mary\"));\n\n// answer 1\n\n</pre>\n\n<h3>forEach</h3>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Foreach_loop\">The foreach loop is a feature of all the main programming languages</a> and now, thanks to ECMAScript 5, we can use it in JavaScript. It is one of many new iteration methods incorporated into all modern browsers.</p>\n\n<p>forEach is useful for looping through array values:</p>\n\n<pre>\n\nvar anArray = ['john', 'mary', 'george', 'freddy', 'jane'];\nvar aString;\n\nif (typeof anArray !== \"sring\") {\n\n    console.log(\"I am an array object\");\n\n}\n\n// result: I am an array object\n\nanArray.forEach(function (result) {\n\n    aString = result;\n\n    if (typeof result === \"string\") {\n        aString += \" is a string\";\n    }\n\n    console.log(aString);\n\n});\n\n// Result:\n// john is a string\n// mary is a string\n// george is a string\n// freddy is a string\n// jane is a string\n\n</pre>\n\n<h3>filter</h3>\n\n<p>This allows the coder to take out values from an array like so:</p>\n\n<pre>\n\nvar anArray = ['john', 'mary', 'peter', 'susan', \"\", 'mark', 'sarah', undefined];\n\nvar newArray = anArray.filter(function (value) {\n\n    return !(value === 'john' || value === 'peter' || value === 'mark' || value === \"\" || value === undefined);\n\n});\n\nconsole.log(newArray);\n\n// return [\"mary\", \"susan\", \"sarah\"]\n\n</pre>\n\n<p>Above removes the boys from the list plus empty or undefined values. Admittedly, the repeated use of OR in the example above is a little clumsy but it demonstrates the purpose of filter clearly. This is   an array iteration method that would buddy up well with regex.</p>\n\n<h3>every</h3>\n\n<p>This allows you to loop through an array to find all elements that meet the declared criteria and returns true or false. This new method is particularly useful for dealing with numbers like so:</p>\n\n<pre>\n\nvar anArray = [10, 21, 56, 124, 450];\n\nanArray.every(function (value) {\n\n    return (value &gt; 50);\n\n});\n// returns false\n\nanArray.every(function (value) {\n\n    return (value &gt; 5);\n\n});\n// returns true\n\n</pre>\n\n<h3>map</h3>\n\n<p>In the above methods .forEach() returns nothing (it iterates through array and spits out strings), .every() returns a boolean value, while .map() returns a new array of objects. Let me explain with an example:</p>\n\n<pre>\n\nvar anArray = [2, 67, 789, 223454];\n\nvar newArray = anArray.map(function (result) {\n\n    return Math.sqrt(result) + Math.PI - Math.LOG10E * Math.LN10;\n\n});\n\nconsole.log(newArray)\n\n// result: [3.555806215962888, 10.326945425462243, 30.23073646396607, 474.85080559533054]\n\n</pre>\n\n<p>Above used an array of digits, did some funky maths manipulation and then returned the results into a new array.</p>\n\n<h3>Some end notes</h3>\n\n<p>Hopefully this short post has opened up a number of possibilities for array iteration to you other than using the for loop.</p>\n\n<p>The code in this post uses anonymous functions as callbacks but they can also be named. Also, I referenced underscore.js in the introduction but you don't even have to go as far using this script. The Mozilla developers have provided compatibility code for all the array methods which extend the Array.Prototype. As an example, cut the paste the code below and place it at the beginning of your script if you want to start using the filter method in all browsers. <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">For other code visit their global objects page</a>.</p>\n\n<pre>\n\nif (!Array.prototype.filter) {\n    Array.prototype.filter = function (fun /*, thisp */ ) {\n        &quot;use strict&quot;;\n\n        if (this == null) throw new TypeError();\n\n        var t = Object(this);\n        var len = t.length &gt;&gt;&gt; 0;\n        if (typeof fun != &quot;function&quot;) throw new TypeError();\n\n        var res = [];\n        var thisp = arguments[1];\n        for (var i = 0; i &lt; len; i++) {\n            if (i in t) {\n                var val = t[i]; // in case fun mutates this\n                if (fun.call(thisp, val, i, t)) res.push(val);\n            }\n        }\n\n        return res;\n    };\n}\n\n</pre>\n\n<p>For a further more fuller intellectual appraisement read <a href=\"http://dmitrysoshnikov.com/\">Dmitry Soshnikov's</a> article, <a href=\"http://dev.opera.com/articles/view/javascript-array-extras-in-detail/\">JavaScript array “extras” in detail</a>, on the Opera Developers website</p>","categories":[],"uniqueId":"132989","url":"using-advanced-javascript-array-methods","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-six.jpg"},{"title":"Resources for learning CodeIgniter","link":"http://www.suburban-glory.com/blog?page=149","author":"Andy Walpole","publishedDate":"1328860060000","contentSnippet":"It could be argued that CodeIgniter is the most popular Open Source PHP framework around. It certainly features heavily on ...","content":"<p>It could be argued that <a href=\"http://codeigniter.com\">CodeIgniter</a> is the most popular Open Source PHP framework around. It certainly features heavily on developer and designer sites like <a href=\"http://forrst.com\">Forrst</a>.</p>\n\n<p>Written in OOP code it takes a liberal approach to the <a href=\"http://en.wikipedia.org/wiki/Model-View-Controller\">Model–view–controller</a> (MVC) architecture that underpins all modern PHP frameworks, and it has a very active and supportive community around it.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/codeigniter.jpg\" width=\"150\" height=\"164\" alt=\"codeigniter logo\"></p>\n\n<p>I put aside some time during the winter to learn CodeIgniter. Anybody who has prior experience of using OOP PHP should pick up most of the code within a couple of weeks, but I went further and created my own Content Management System which I called <a href=\"https://github.com/TCotton/CodeSharp\">CodeSharp</a>.</p>\n\n<p>It was a fun but lengthy exercise as it stretched on further that I expected not least because of the JavaScript and AJAX I added to the administration section, but it pays dividends to recreate the wheel if you are trying to fully understand a new web technology.</p>\n\n<h3>Learning Resources</h3>\n\n<p>There are a number of tutorials that I used while learning this MVC framework, the most important of which were the Nettnuts+ online <a href=\"http://net.tutsplus.com/sessions/codeigniter-from-scratch/\">CodeIgniter from Scratch</a> video series. Easy to follow and free to watch they cover most of the code basics. Just using this online series alone will provide a solid foundation to your learning process.</p>\n\n<p>Nearly all available resources concerning CodeIgniter are for the older 1.7 version so the least confusing option for me was to pick up the framework using 1.7. Afterwards, I updated the code from 1.7 to the current 2.1. The backwards compatibility between the two major versions was excellent and it required very little code change. At the time of writing the next version will be 3.0 and it is currently in development stage.</p>\n\n<p>The second must-use online resource is the <a href=\"http://codeigniter.com/user_guide\">CodeIgniter User Guide</a>, available for both versions 1.7 and 2. I think this is the most easy to use and comprehensive online guide for any web technology that I have ever come across. Perhaps this is because a private company – Ellis Labs – is behind the entire initiative and so is better organised than other Open Source projects I have used in the past. As opposing examples, php.net and the jQuery documentation contains valuable information but they are non-user friendly and need to rewritten from the ground up.</p>\n\n<p>I brought two books on the Packt imprint: CodeIgniter 1.7 by Jose Argudo Blanco &amp; David Upton and CodeIgniter 1.7: Professional Development by Adam Griffiths. They were useful but the beef I have with Packt is that their books lack the depth that you would find in an O&#39;Reilly or Apress publication. The feeling after finishing a Packt book is akin to eating a sandwich when you was hoping for a three-course meal.</p>\n\n<h4>Some CodeIgniter feedback</h4>\n\n<p>If anybody is looking for a PHP framework to learn then I would certainly recommend CodeIgniter. Below are elements of the script I liked, and some which I didn't.</p>\n\n<p><strong><a href=\"http://codeigniter.com/user_guide/libraries/pagination.html\">Pagination class</a></strong>: Pagination is one of the more trickier server-side coding problems to solve. Using the CodeIgniter pagination class makes this challenge dead easy with typical code in the controller class looking like this:</p>\n\n<pre>\n\n$config[&#39;base_url&#39;] = site_url(&quot;content/index/&quot;);\n\n$config[&#39;total_rows&#39;] = $this-&gt;content_model-&gt;find_content_rows($visible = true);\n\n$config[&#39;per_page&#39;] = 3;\n\n$config[&#39;num_links&#39;] = 2;\n\n$config[&#39;uri_segment&#39;] = 3;\n\n$this-&gt;pagination-&gt;initialize($config);\n\n</pre>\n\n<p><strong><a href=\"http://codeigniter.com/user_guide/libraries/encryption.html\">Encryption class</a></strong>: If want to be 100% sure of securing your database in the event of a cracking, then using PHP Mcrypt is the only feasible solution. Hashing using SHA1 alone will not secure your data to the necessary unbreakable level. CodeIgniter has its own encryption class that uses PHP Mcrypt, hashing, base64 encoding and adds cipher noise to protect against Man-in-the-middle attacks.</p>\n\n<p>The encryption class, while being secure, increases the size of the encoded messages 2.6 times the size of the original message – according to the documentation. I found that it was increasing the size of my data by as much as eight or nine times. If you use the encryption class keep an eye on this expansion because if the database field isn't big enough then the encrypted information becomes unusable.</p>\n\n<p><strong><a href=\"http://codeigniter.com/user_guide/database/index.html\">The Database class</a></strong>: I used the <a href=\"http://codeigniter.com/user_guide/database/active_record.html\">Active Record Class</a> (ARC) for all database queries as I prefer the placeholder method of inserting database info rather than escaping data. As I am already using PDO I'm not sure whether the ARC brought anything new to the table, and it will be slower than using straight inbuilt PHP objects.</p>\n\n<p><strong><a href=\"http://codeigniter.com/user_guide/helpers/form_helper.html\">Form helper</a></strong>: I used the form helper in  my views but it never saved any time as I am already more than familiar with correct HTML form markup. Perhaps its useful if you are working on a collaborative project and need to make sure that the code is consistent throughout.</p>\n\n<p><strong><a href=\"http://codeigniter.com/user_guide/libraries/image_lib.html\">Image manipulation class</a></strong>. I wasn't happy with the quality of the image thumbnails it was producing so I used the <a href=\"https://github.com/avalanche123/Imagine\">Imagine</a> script instead.</p>\n\n<p><strong><a href=\"http://codeigniter.com/user_guide/libraries/typography.html\">Typography class</a></strong>: The auto_typography() class is really useful for formatting non-HTML text taken from the database. On previous PHP builds I was using HTML Purifier for the same functionality.</p>\n\n<p><strong>Routes / _remap</strong>: This is a sane way of creating human and search engine friendly URLs without pissing around with regex in the .htaccess file. It took a bit of tinkering to work out the correct code,  but it is the most sensible method for altering a URL.</p>\n\n<h5>Conclusion</h5>\n\n<p>I hope above has given you some enthusiasm to try out CodeIgniter if you haven't already. If you want to write safe, well-tested PHP code then this certainly is a framework that you will need to investigate. It is not the only <a href=\"http://www.phpframeworks.com/\">PHP framework</a> but it is one that is widely used in commercial development.</p>\n\n<p>Footnote: PHP queen Lorna Jane Mitchell has just written a short piece on the net magazine site called <a href=\"http://www.netmagazine.com/opinions/php-land-thousand-frameworks\">PHP: land of a thousand frameworks</a> and which is worth reading as a supplementary article to this post.</p>","categories":[],"uniqueId":"132886","url":"resources-learning-codeigniter","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-seven.jpg"},{"title":"Some more tips on learning JavaScript","link":"http://www.suburban-glory.com/blog?page=148","author":"Andy Walpole","publishedDate":"1328778893000","contentSnippet":"In February 2011 Think Vitamin published an article written by me entitled Tips on Learning JavaScript. In 2010 I had added ...","content":"<p>In February 2011 Think Vitamin published an article written by me entitled <a href=\"http://thinkvitamin.com/code/tips-on-learning-javascript/\">Tips on Learning JavaScript</a>. In 2010 I had added learning JavaScript to my “things to do list” for that year, and the Think Vitamin item offered feedback on my progress so far. Re-reading my article nearly all the advice I gave out is correct but I did write: “I would now classify my skills as intermediate”. I was a little hasty in making that statement.</p>\n\n<p>One year on and I've learned so much more about JavaScript. Having gone through various stages of anger and confusion, I have got to a state where I've grown quite fond of its peculiar idiosyncrasies and welcome the challenge JavaScript coding brings. Dare I say it, JavaScript is fun!</p>\n\n<p>If you have just started learning JavaScript then you too will go through the stages of anger, acceptance and then, hopefully, enjoyment.</p>\n\n<p>In the same spirit as my original item, I hope some points below will help you in your quest to learn this important development language.</p>\n\n<h3>JavaScript isn't PHP (or Ruby or any other common web development language)</h3>\n\n<p>The first point of confusion many new users face is: Where are all the functions? If you have used a server-side language like PHP then you would be familiar with clicking through the php.net trying to find the right inbuilt function as solution for your problem. There are thousands of inbuilt functions that come with PHP. JavaScript only has a fraction of these functions (actually they are methods not functions in JS) and it even has some vital functions missing that are regularly used in PHP like trim() (now in modern browsers – see <a href=\"http://kangax.github.com/es5-compat-table/\">ECMA5</a>) or a simple way of formatting dates and times such as used in PHP date().</p>\n\n<p>What initially seems like a handicap then hits you as liberation because you realise that you don't have to worry about thousands of already existing functions, with many – like in PHP – not subservient to a standard naming convention. In JavaScript, when necessary, you create your own functions and methods to be reused again in later jobs.</p>\n\n<p>There is a well established Open Source project called <a href=\"http://phpjs.org\">phpjs.org</a>. On this site contributors have recreated dozens if not hundreds of PHP functions in JavaScript. I've no doubt that the intention behind this project is well-meaning but aiming to ape PHP in JavaScript is not the way forward.</p>\n\n<p>JavaScript has its own unique approach different to common web development languages and that is prototypal inheritance. To understand this and use it is to truly harness the power of this client-side script (Now server-side also too! See node.js for further details).</p>\n\n<p>Take for instance the <a href=\"http://phpjs.org/functions/trim:566\">trim function on php.js</a>:</p>\n\n<pre>\n\nfunction trim(str, charlist) {\n    // Strips whitespace from the beginning and end of a string  \n    i = 0;\n    str += &#39;&#39;;\n\n    if (!charlist) { // default list\n        whitespace = &quot; nrtfx0bxa0u2000u2001u2002u2003u2004u2005u2006u2007u2008u2009u200au200bu2028u2029u3000&quot;;\n    } else {\n        // preg_quote custom list\n        charlist += &#39;&#39;;\n        whitespace = charlist.replace(/([[]().?/*{}+$^:])/g, &#39;$1&#39;);\n    }\n\n    l = str.length;\n    for (i = 0; i &lt; l; i++) {\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\n            str = str.substring(i);\n            break;\n        }\n    }\n    l = str.length;\n    for (i = l - 1; i &gt;= 0; i--) {\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\n            str = str.substring(0, i + 1);\n            break;\n        }\n    }\n\n    return whitespace.indexOf(str.charAt(0)) === -1 ? str : &#39;&#39;;\n}\n\n</pre>\n\n<p>I count two loops in there and some regex plus lots of use of the indexOf and charAt methods.</p>\n\n<p>Now take a look at a version as created by <a href=\"http://javascript.crockford.com/remedial.html\">Douglas Crockford using the prototype object</a>. This means that in browsers where there is no trim string method (IE8 and below) then the regex will be used.</p>\n\n<pre>\n\nif (!String.prototype.trim) {\n    String.prototype.trim = function () {\n        return this.replace(/^s*(S*(?:s+S+)*)s*$/, \"$1\");\n    };\n}\n\n</pre>\n\n<p>This seems to me a much more manageable solution.</p>\n\n<p>You would use the above code like so:</p>\n\n<pre>\n\nvar aString = “ This is a sentence that needs white space from the beginning and end to be removed ”; \nvar newString = aString.trim();\n\n</pre>\n\n<p></p>\n\n<h4>Object Orientated JavaScript and Design Patterns</h4>\n\n<p>If you are serious about learning JavaScript then make a point of using Object Orientated Programming (OOP) as early on as you can. <a href=\"http://ejohn.org/\">John Ressig</a> has a whole chapter donated to OOP techniques in his book Pro JavaScript Techniques but I found Ross Harmes and Dustin Diaz's book <a href=\"http://jsdesignpatterns.com/\">Pro JavaScript Patterns</a> particularly invaluable in dramatically improving the quality of my code.</p>\n\n<p>It's a bit confusing talking about Object Orientated Programming with JavaScript as nearly everything in the language is an object, but I use OOP and design patterns interchangeably in this section as a means of a call to bring order to the code.</p>\n\n<p>Before using OOP my output was becoming a mess with all the code written procedurally and which became impossible to maintain beyond 500 lines. If any poor bugger had hoped to collaborate with me on a project she would have run away screaming!</p>\n\n<p>Using some of the design patterns in Harmes and Diaz's book made my output so much more manageable. If you don't come from a programming background then you would not of heard of the singleton, facade or module patterns (amongst many others). Nevertheless, these are well-established programming approaches that are applied to lots of different languages, JavaScript included, and understanding them will result in more professionally written code.</p>\n\n<p>There are also other advantages to OOP like the ability to use a global namespace. This means that clashes between other JavaScript libraries you might be using or somebody else's code is kept to a minimum. Also, using OOP properly will mean a far more efficient code reuse and ultimately a much shorter page of script.</p>\n\n<p>Much that we take for granted in other languages such as private and public attributes and methods, constants, passing variables by reference and even classes themselves are not used in JavaScript. But there are various ways to emulate them. “My god,” I hear you cry, “This is nothing but a hack script!”. Well, that's one of looking at the Big J, but if you are programmer who loves a challenge - and what programmer worth his / her salt doesn't? - then you will enjoy climbing over the hurdles JavaScript brings.</p>\n\n<p>One last point about OOP design patterns in JavaScript. In my previous Think Vitamin article I stated that I used a dollar sign in front of variables so as to make scanning a document easier. Once I started using OOP and in particular the <a href=\"http://www.yuiblog.com/blog/2007/06/12/module-pattern/\">module pattern</a> which uses private and public attributes and methods, the addition of the dollar sign for extra readability became unnecessary.</p>\n\n<h5>Use semantic names</h5>\n\n<p>Try to avoid abbreviations or, heaven forbid, just a single letter for variables and attributes.</p>\n\n<p>I use single letters in loops when that letter represents a digit:</p>\n\n<pre>\n\nfor (var i = 0; i &lt; form.elements.length; i += 1) {\n\n    // loop through the values of the form elements\n    alert(form.elements[i].values);\n\n} // end for loop\n\n</pre>\n\n<p>But other than for loops I use names for variables / attributes that demonstrate their purpose.</p>\n\n<p>As an example, look at the names for the attributes I created in an object called CS.GlobalSet:</p>\n\n<pre>\n\nnameForm: null,\nsloganForm: null,\nemailForm: null,\nmetaDescription: null,\nmetaKeywords: null\n\n</pre>\n\n<p>These were the name of the form fields from where they took their values.</p>\n\n<pre>\n\nCS.GlobalSet.nameForm = this.nameForm.value.trim();\nCS.GlobalSet.sloganForm = this.sloganForm.value.trim();\nCS.GlobalSet.emailForm = this.emailForm.value.trim();\nCS.GlobalSet.metaDescription = this.metaDescription;\nCS.GlobalSet.metaKeywords = this.metaKeywords;\n\n</pre>\n\n<p>This makes the code far easier for others to understand then if I had given them initials like nF, sF or eF.</p>\n\n<p>(<a href=\"https://github.com/TCotton/CodeSharp/blob/master/javascript/admin/main-file.js#L580\">The full object referenced above can be found here</a>).</p>\n\n<p>There are lots of JavaScript coding standards that should be observed. Read from beginning to end the collaborative document hosted on GitHub called <a href=\"https://github.com/rwldrn/idiomatic.js\">Principles of Writing Consistent, Idiomatic JavaScript</a>. No matter your level of JavaScript skills, you will find some new ideas in this extensive article.</p>\n\n<h6>Keep you code neat and tidy</h6>\n\n<p>In my 2011 article “Tips on Learning JavaScript” I endorsed using <a href=\"http://jsbeautifier.org/\">JSBeautifier</a> for automatic spacing and advocated liberally using comments so as to leave a clear explanation of the purpose of the code for when you return to utilize it at a later date. I still state that the correct use of space and full commenting are not optional, but essential.</p>\n\n<p>If you want to see JavaScript as code poetry then look at some work produced by Juriy Zaytsev - aka kangax – in his <a href=\"https://github.com/kangax/fabric.js/blob/master/dist/all.js\">fabric.js project</a>. Note how he spaces out his code and how and when he leaves comments. This clearly is a project intended for collaboration between two or more developers and with over 12,000 lines of code it needs to be super-organised so as to keep it manageable.</p>\n\n<h6>Can you use JavaScript and never use a library?</h6>\n\n<p>Well that depends on the complexity of the code you are writing and the experience of the coder. But it's really tough to use 100% of your own DOM JavaScript and never, ever use a library.</p>\n\n<p>As an example, I just recently I created a form with two different submit buttons. Each button produced two totally different outcomes: submit and delete. This wasn't a problem for the server-side script to handle, but JavaScript was a bloody nuisance. I found one event property called explicitOriginalTarget that was perfect for the purpose, but it is only used in Firefox! Similar alternatives in Webkit such as originalTarget were not cutting the mustard.</p>\n\n<p>Eventually, I fell back to using jQuery like so:</p>\n\n<pre>\n\n$(document.forms['adminEditContent'].elements['submit']).click(function (event) {\n\n                    // code here for form submission\n                    event.preventDefault();\n                });\n\n$(document.forms['adminEditContent'].elements['detete']).click(function (event) {\n\n                    // code here for deletion\n                    event.preventDefault();\n                });\n\n</pre>\n\n<p>Clearly, there is JavaScript solution because jQuery are using it in their script, but I didn't have the experience to work it out myself so I used a library. There's nothing wrong with relying on an established Open Source project when needs must. Just make a note of trying to crack the problem yourself at a later date.</p>\n\n<p>I've also had a lot of problems in creating smooth animation in Internet Explorer so I use a library like animator.js or one of the big beasts such as jQuery or Dojo if I need to use JS animation.</p>\n\n<p>And if you are working on a commercial project such as creating a Drupal or Wordpress theme, then using jQuery is a logical solution as it will save you considerable time. This is an important consideration if you are a professional because time is money.</p>\n\n<h6>Conclusion</h6>\n\n<p>So after two years of learning JavaScript can I now state that I have reached an intermediate skill level? Yes, I think so, but thoroughly learning any programming language is an exhaustive process that takes years; and although I have learned a hell of a lot there's still so much more to soak up yet.</p>\n\n<p>I say, bring it on! I'm loving it.</p>","categories":[],"uniqueId":"132877","url":"some-tips-learning-javascript","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-eight.jpg"},{"title":"Pushing CSS to its limits","link":"http://www.suburban-glory.com/blog?page=147","author":"Andy Walpole","publishedDate":"1328525239000","contentSnippet":"As CSS3 roars ahead in spite of the old Internet Explorer legacy browsers acting like a drag weight on faster adoption, there ...","content":"<p>As CSS3 roars ahead in spite of the old Internet Explorer legacy browsers acting like a drag weight on faster adoption, there have been some really fascinating experiments with CSS3 properties and values which have created design styles far beyond what the original participants behind the W3C CSS modules could have imagined.</p>\n\n<p>There seems to be a craze for recreating cartoon characters like <a href=\"http://www.radium-v.com/stuff/homer/\">Homer Simpson</a> in HTML and CSS only, but I don't see any point in creating work with no practical value. Of far more interest to me are those that are pushing CSS to its limit but whose work can be replicated and expanded upon by other coders.</p>\n\n<h3>Pseudo Elements, Box Shadows and some CSS3 animation</h3>\n\n<p>Pseudo elements have a lot of practical, albeit minor uses. I've use them to add typographically correct smart quotes around blockquotes such as below (note the added space in the value for the before content property):</p>\n\n<pre>\nblockquote:before {\n\tcontent :\"201C\" ' ';\n\tfont-size : 2em;\n\tvertical-align : middle;\n\tfont-style : italic;\n}\n\n blockquote:after {\n\tcontent : \"201D\";\n\tfont-size : 2em;\n\tvertical-align : middle;\n\tfont-style : italic;\n}\n</pre>\n\n<p>I use unicode characters rather than HTML entities because the latter has a habit of producing strange mistakes when cutting and pasting CSS.</p>\n\n<p>I have also used pseudo elements in the past to add an extra oomph to menu links on the hover state like so:</p>\n\n<pre>\n#main-menu ul li a:hover:after {\ncontent: &quot; GO! -&gt;&quot;;\ncolor : #ffffff;\n}\n</pre>\n\n<p>Other coders are taking it further.</p>\n\n<p>I really like Chris Coyier's use of pseudo elements to create<a href=\"http://css-tricks.com/examples/FullBrowserWidthBars/\"> full browser width bars</a>, while Nicolas Gallagher combines CSS3 transitions with ::before to create <a href=\"http://jsfiddle.net/necolas/KbNq7/\">impressive shiny buttons</a> (hover over the them).</p>\n\n<p>The W3C working draft document <a href=\"http://www.w3.org/TR/css3-content/\">CSS3 Generated and Replaced Content Module</a> dated May 2003 and allows multiple pseudo elements per element. When browsers implement this standard expect another wave of ultra-complex CSS experimentation on par or more inventive then these <a href=\"http://nicolasgallagher.com/pure-css-gui-icons/demo/\">pure CSS GUI icons</a>.</p>\n\n<p>Unfortunately, CSS 2.1 pseudo elements :before and :after do not work in Internet Explorer versions 6 and 7. Thankfully though there is a polyfil in the form of Dean Edwards <a href=\"http://code.google.com/p/ie7-js/\">ie7-js script</a>. This script covers a myriad of <a href=\"http://ie7-js.googlecode.com/svn/test/index.html\">advanced CSS not used in IE versions 6-8</a>. It is the only script that gives support to pseudo elements. Be careful when using it though as it is a big file and it will create a Flash of Unstyled Content as the JavaScript is loaded.</p>\n\n<p>Box shadows have been implemented for a couple of years now in Firefox and Webkit-based browsers. It didn't take long for coders to realise that adding layers of values, with pseudo elements and CSS3 transforms can create amazingly attractive and complex shadows.</p>\n\n<p><a href=\"http://nicolasgallagher.com/css-drop-shadows-without-images/demo/\">A popular demo was created by Nicolas Gallagher</a>.</p>\n\n<p>Likewise the Viget crew have had a lot of fun creating their <a href=\"http://www.viget.com/uploads/file/boxshadows/\">39 Box Shadows, No Good Reason</a> page (only works in Webkit-based browsers).</p>\n\n<p>Like Nicolas Gallagher they only achieved their complex shadow effects by mixing box shadows with other important CSS3. In their case they liberally used gradients, pseudo classes and animation.</p>\n\n<p>CSS3 transitions and transforms are a nice added bonus to the coders arsenal. When they first appeared my initial reaction was, 'Well that is what JavaScript is there for'; but they do add another welcome means of adding motion to elements on a page.</p>\n\n<p>In its favour the syntax is easy to implement. There really is very little to using CSS3 animation. Secondly, it can animate elements on a page and animate them in particular ways that would be difficult even with a JavaScript library like jQuery.</p>\n\n<p>I particularly like using animation on forms to give an extra usability feature. On the :focus selector I add a scale value like so:</p>\n\n<pre>\ninput[type=\"text\"]:focus, input[type=\"email\"]:focus, input[type=\"tel\"]:focus, textarea:focus {\n\t-moz-transform : scale(1.05);\n\t-webkit-transform : scale(1.05);\n\t-o-transform : scale(1.05);\n\ttransform : scale(1.05);\n}\n</pre>\n\n<p>Through experience I wouldn't recommend using CSS3 animation on page load and only use it on mouse and keyboard events. Presumably CSS3 transitions and transforms are quite resource hungry as whenever I have added them to a style sheet to fire on page load it creates a stuttering, non-smooth movement on the page.</p>\n\n<p>Unfortunately, due to lack of support in the legacy browsers, you would have to be cautious in using a lot of the above in commercial jobs; but they clearly signpost a future direction for CSS users in which far, far more complex code will become standard.</p>\n\n<h4>CSS branching</h4>\n\n<p>Due to the frustrations of using a non-programming language like CSS, JavaScript and Ruby developers have created their own forks called <a href=\"http://lesscss.org/\">LESS</a> and <a href=\"http://sass-lang.com/\">Sass</a> respectively.</p>\n\n<p>Here you can create CSS but do so too with variables, mixins, namespaces and nested rules amongst much else. Both LESS and Sass have their own bands of loyal users who would only reluctantly return to straight CSS as used by the vast majority of front-end developers.</p>\n\n<p>Both of these projects have created a valuable contribution to the industry because they present working alternatives to CSS that are radically different to the current W3C recommendations and drafts. However, should we be branching out into mutually exclusive CSS formats? To me this seems like walking into an uninspiring dead-end rather a viable and sustainable future.</p>\n\n<h5>Boilerplates &amp; resets</h5>\n\n<p>A number of years ago Eric Mayer produced his famous <a href=\"http://meyerweb.com/eric/tools/css/reset/\">CSS reset</a>. It allowed web developers to approach a project knowing that before they have even written a single line of code, many browser inconstancies and quirks had been levelled.</p>\n\n<p>Today, <a href=\"http://developer.yahoo.com/yui/reset/#code\">YUI reset</a> and David Hellsing's <a href=\"http://www.cssreset.com/scripts/tripoli-css-reset-david-hellsing/\">Tripoli Reset</a> have been become, if not obsolete, then certainly dated in the face of software and HTML and CSS changes.</p>\n\n<p>As a modern CSS reset, Nicolas Gallagher (him again!) and Jonathan Neal created <a href=\"http://necolas.github.com/normalize.css/\">normalize.css</a>. I'm particularly impressed with their detailed comments that describe the purpose of every line of code and I like the attention to detail in the form section.</p>\n\n<p>Beyond just a CSS reset is <a href=\"http://html5boilerplate.com/\">HTML5 Boilerplate</a>, the creation of Irish Paul. There's a ton of code in this project to learn from. I really like the work they have done in the <a href=\"https://github.com/h5bp/html5-boilerplate/blob/master/.htaccess\">.htaccess file</a>. Proper Apache configuration is vital for a fast, non-buggy website, and they have covered a wide territory including GZIP, expires headers, proper MIME types and UTF-8 encoding.</p>\n\n<p>Building upon this project is Andy Clarke's <a href=\"http://stuffandnonsense.co.uk/projects/320andup/\">320 and Up Boilerplate</a> that takes a “mobile first” approach to web design. Again, this is a really interesting project to study and use.</p>\n\n<p>I can't begin to tell you how much I have learned by examining the code in these boilerplates and resets. But, as a word of caution, the worse thing you can do is just cut and paste code without a clear understanding of what it does. Question everything. Just because a face like Irish Paul or Eric Mayer deems a particular line of CSS a necessity, doesn't mean that it is or is suitable for your web builds.</p>\n\n<h6>New layout modules</h6>\n\n<p>Last year saw a buzz of activity around new CSS layout modules. Originally back in the 90s tables were the preferred method of page layout. During the last decade this approach was chased out of existence by standards evangelists such as Jeffrey Zeldman who insisted on the separation between presentation and content, and in its place came the CSS solution of floats. However, CSS floats were never intended as means of laying out an entire page but of positioning objects like images within a body of text. Many involved in the web design industry have longed for a different approach to layout.</p>\n\n<p>By my counting there are now five different W3C sponsored alternatives to floats! They are <a href=\"http://dev.w3.org/csswg/css3-exclusions/\">Exclusions and Shapes</a>, <a href=\"http://dev.w3.org/csswg/css3-regions/\">Regions</a>, <a href=\"http://www.w3.org/TR/css3-layout\">Template Layout</a>, <a href=\"http://dev.w3.org/csswg/css3-grid-align/\">Grid Layout</a> and <a href=\"http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/\">Flexible Box Layout</a>. For a thorough explanation of all of them read net magazine's article <a href=\"http://www.netmagazine.com/features/future-css-layouts\">The Future of CSS Layouts</a>.</p>\n\n<p>I find it difficult to get exciting about these new layout options. Using floats can be tricky (hello clearfix), but ultimately I've never had any serious problems creating complex layouts. Also, none of the above will be backwards compatible. I'm not against a fundamentally different approach to CSS page layout, but I would baulk at having different layout systems for different browsers in the same web build. It's also worth noting that Flexibox was first introduced in 2009 and it is now going through a radical rethink because the original draft proved lacking. I wonder how many of the other four will also be subject to major revision in the coming years?</p>\n\n<h6>Conclusion</h6><p>\n \nCSS: use and abuse it. Time spend trying out new techniques is important to personal development. Make sure that you set aside some quality time to play around with CSS3 and see what you can produce. Look at the code linked to above and learn from it. Use it as a base for further experimentation. <em>Avante!</em></p>","categories":[],"uniqueId":"132852","url":"pushing-css-to-limits","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-nine.jpg"},{"title":"Barking and Dagenham Chamber of Commerce seminar: Practical Advice for Smaller Businesses","link":"http://www.suburban-glory.com/blog?page=146","author":"Andy Walpole","publishedDate":"1327848428000","contentSnippet":"Topics and speakers include:\n\nSearch Engine Optimisation, Andy Walpole, Suburban Glory Web Design\n\nHow to Maximise your ...","content":"<p>Topics and speakers include:</p>\n\n<p>Search Engine Optimisation, Andy Walpole, Suburban Glory Web Design</p>\n\n<p>How to Maximise your Branding, Ray Calder, Acumen Design</p>\n\n<p>Simple tips to increase your £££ Flow and reduce Tax bill in 2012, Ron Mansfield, TaxAssist Accountants</p>\n\n<p>Date: Wednesday, 1 February, 2012</p>\n\n<p>Time: 9.30am - 12.30pm</p>\n\n<p>Address: Seminar Room, Ground Floor, Roycroft House , 15 Linton Road, Barking, IG11 8HE</p>\n\n<p>No Cost to Attend but please download and fill in the form below and send to the B&amp;D Chamber of Commerce: <a href=\"http://www.bdchamber.co.uk/i/events/1325604512.pptx\">http://www.bdchamber.co.uk/i/events/1325604512.pptx</a></p>","categories":[],"uniqueId":"132784","url":"barking-dagenham-chamber-commerce-seminar-practical-advice-smaller-businesses","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-ten.jpg"},{"title":"An introduction to Deck JS","link":"http://www.suburban-glory.com/blog?page=145","author":"Andy Walpole","publishedDate":"1314712843000","contentSnippet":"PowerPoint has been the choice of software for corporate presentations since the 1990s. Easy to use and configure, it takes ...","content":"<p>PowerPoint has been the choice of software for corporate presentations since the 1990s. Easy to use and configure, it takes real skill to mess a PowerPoint presentation up. However, for web coders seeking greater visual flare there are now a number of browser-based solutions that are dependent on HTML, CSS and JavaScript.</p>\n\n<p>One such script is <a href=\"http://imakewebthings.github.com/deck.js/\">Deck JS</a>. Created by <a href=\"http://imakewebthings.com/\">Caleb Troughton</a>, it is a jQuery plugin and has recently recently been exposed to wider attention after being promoted on the Smashing Magazine Twitter feed.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/deckjs.jpg\" alt=\"deck js\" width=\"417\" height=\"255\"></p>\n\n<p>I recently spent a few days using Deck JS in order to create a presentation for a forthcoming <a href=\"http://www.suburban-glory.com/blog?page=143\">Foundation Internet Marketing course</a> at Redbridge College, and I would recommend this nifty little script to others.</p>\n\n<p>Using it is straightforward and requires only the bare minimum knowledge of jQuery.</p>\n\n<p>Firstly, download the files and link to them from the head of the document.</p>\n\n<p>Then, create you HTML as so:</p>\n\n<pre>\n\n&lt;div class=&quot;slide&quot; id=&quot;frame-one&quot;&gt;\n  &lt;h1&gt;Frame One&lt;/h1&gt;\n  &lt;p&gt;Sed sem ligula, rhoncus et pharetra vel, vulputate interdum lacus. Ut turpis magna, dictum vel porttitor eu, mattis ut ipsum. Vestibulum varius lorem a diam varius pretium. Phasellus condimentum, turpis id pretium accumsan, augue felis adipiscing orci, vitae ultricies massa justo vitae ipsum. Maecenas consectetur, ligula sit amet auctor dictum, orci odio elementum nulla, in rutrum lectus lectus vel ipsum. &lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=&quot;slide&quot; id=&quot;frame-two&quot;&gt;\n  &lt;h1&gt;Frame Two&lt;/h1&gt;\n  &lt;p&gt;Integer massa massa, tincidunt interdum convallis vitae, sollicitudin id nisi. Aenean dictum hendrerit metus, eu tempus eros placerat eleifend. Vivamus mi felis, ultrices at dapibus nec, dapibus eget odio. &lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=&quot;slide&quot; id=&quot;frame-three&quot;&gt;\n  &lt;h1&gt;Frame Three&lt;/h1&gt;\n  &lt;p&gt; Sed nulla libero, scelerisque nec laoreet a, pellentesque sed diam. Donec venenatis, arcu ac tempus cursus, mi felis malesuada justo, vel consectetur eros diam vel diam. Proin non risus ut elit tristique gravida eget sed mauris. Praesent neque dolor, rhoncus eu lobortis facilisis, consequat et lacus. Praesent scelerisque viverra arcu ut aliquam. Ut luctus sapien vehicula nibh tristique hendrerit. &lt;/p&gt;\n&lt;/div&gt;\n\n</pre>\n\n<p>And now in the head add the following jQuery:</p>\n\n<pre>\n\n/* &lt;![CDATA[ */\n$(document).ready(function() {\n\n$.deck(&#39;.slide&#39;);\n\n$.deck([\n &#39;#frame-one&#39;,\n &#39;#frame-two&#39;,\n &#39;#frame-three&#39;\n]);\n\n}); // End document ready\n/*  */\n\n]]&gt;</pre>\n\n<p>And that is it. Easy. Note that the order of presentation is decided by jQuery not the divs in the HTML.</p>\n\n<p>In the best tradition of Blue Peter here is one I made earlier: <a href=\"http://www.linkbuilding.suburban-glory.com/\">http://www.linkbuilding.suburban-glory.com/</a></p>\n\n<p>And here is another one: <a href=\"http://www.keywords.suburban-glory.com/\">http://www.keywords.suburban-glory.com/</a></p>\n\n<p>The biggest upside of creating a presentation with Deck JS is that you also have the full arsenal of HTML, CSS and JavaScript at your disposal and all you need to display it is a browser.</p>","categories":[],"uniqueId":"131471","url":"introduction-deck-js","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-one.jpg"},{"title":"An easy way to use the Twitter API","link":"http://www.suburban-glory.com/blog?page=144","author":"Andy Walpole","publishedDate":"1314035280000","contentSnippet":"Twitter, surely, has had one of the most successful developer outreach programmes of all time. Their relaxed attitude to data ...","content":"<p>Twitter, surely, has had one of the most successful developer outreach programmes of all time. Their relaxed attitude to data access has meant that a myriad of superb side projects has sprung up and which, in turn, fed back into the popularity of Twitter.</p>\n\n<p>Universally loved by software developers, the Twitter API has set the standard for other companies when allowing open access to their database.</p>\n\n<p>Recently I had reason to use the Twitter API on a personal project (<a href=\"http://www.andywalpoletwo.suburban-glory.com/\">a new personal portfolio actually</a>). Since the summer of 2010 Twitter has made access to their API mandatory only if using QAuth authentication – or so I thought.</p>\n\n<p>The problem with using QAuth for Twitter is one of finding the right script because you'll stumble upon that old chestnut - <a href=\"http://pear.php.net/package/Services_Twitter/\">a PEAR module without any documentation</a>.</p>\n\n<p>After faffing around for a couple of hours I thought, “Why do I need QAuth for if all I want to do is access my personal Twitter stream and not update it on a third-party site?”</p>\n\n<p>Then a more simple method hit me and all it involved was building up a query string from <a href=\"https://dev.twitter.com/docs/api/1/get/statuses/user_timeline\">GET statuses/user_timeline</a> like so: http://api.twitter.com/1/statuses/user_timeline.json?include_entities=true&amp;include_rts=true&amp;screen_name=andywalpole&amp;count=20&amp;exclude_replies=true</p>\n\n<p>If you read the Twitter resource linked to above then you can add many different queries to the string including specifying whether you would like the returned resource to be JSON or XML; the number of tweets, or whether you would like to exclude replies.</p>\n\n<p>From there it is just a case of using PHP's trusted Client URL Library (cURL) like so:</p>\n\n<pre>\n$ch = curl_init();\n\n$file = fopen(&quot;textfile.json&quot;, &quot;w+&quot;);\n\ncurl_setopt($ch, CURLOPT_URL,\n    &#39;http://api.twitter.com/1/statuses/user_timeline.json?include_entities=true&amp;include_rts=true&amp;screen_name=andywalpole&amp;count=20&amp;exclude_replies=true&#39;);\n\ncurl_setopt($ch, CURLOPT_FILE, $file);\n\ncurl_setopt($ch, CURLOPT_HEADER, 0);\n\ncurl_exec($ch);\ncurl_close($ch);\n\nfclose($file);\n</pre>\n\n<p>Now that you have your Twitter stream in a JSON file it is just a question of accessing and then looping through the content:</p>\n\n<pre>\n$twitter = file_get_contents(&#39;textfile.json&#39;);\n\n$twitter = json_decode($twitter);\n\n$rows = &quot;&quot;;\n\nforeach ($twitter as $keys =&gt; $rows) {\n    \n    // looped data here\n\n    }\n</pre>\n\n<p>And that is it :)\n</p>","categories":[],"uniqueId":"131403","url":"easy-way-use-twitter-api","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-two.jpg"},{"title":"Redbridge College Workshop: Foundation Internet Marketing","link":"http://www.suburban-glory.com/blog?page=143","author":"Andy Walpole","publishedDate":"1313226428000","contentSnippet":"Speakers Andy Walpole from Suburban Glory Web Design &amp; Rob Keating from Offline to Online.\n\n\n\nTuesday September 20th, ...","content":"<p>Speakers Andy Walpole from Suburban Glory Web Design &amp; Rob Keating from <a href=\"http://www.offlinetoonline.co.uk/\">Offline to Online</a>.</p>\n\n<p><img src=\"http://www.suburban-glory.com/redbridge/images/redbridge_logo.jpg\" width=\"167\" height=\"50\" alt=\"redbridge_logo.jpg\"></p>\n\n<p>Tuesday September 20th, 6.30pm – 8.30pm</p>\n\n<p>Are you starting a business or already running a business? Are you frustrated that your competitors outrank you on Google? If you are unhappy with your current online marketing or just want to find out more come along to our workshop. It has been designed for small to medium-sized businesses and is delivered by two industry experts. The aim of this two hour workshop is to teach you both the theory and practice of some key aspects of online marketing.</p>\n\n\n\n<p>A one-off workshop especially for business owners in east London including Romford, Ilford, Barking and Dagenham who are interesting in learning about some of the basic concepts behind internet marketing and SEO.</p>\n\n<p><a href=\"http://us2.campaign-archive2.com/?u=3bfb657e8bdb9c1973d89c48f&amp;id=d94efe3093\">For more information please visit this site.</a></p>","categories":[],"uniqueId":"131322","url":"redbridge-college-workshop-foundation-internet-marketing","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-three.jpg"},{"title":"Using JavaScript to emulate HTML5 placeholders in Internet Explorer","link":"http://www.suburban-glory.com/blog?page=142","author":"Andy Walpole","publishedDate":"1312382559000","contentSnippet":"HTML5 is now the default choice of HTML version for most developers but poor support in Internet Explorer has proven to be a ...","content":"<p>HTML5 is now the default choice of HTML version for most developers but poor support in Internet Explorer has proven to be a hindrance to the wider adoption of the language.</p>\n\n<p>This lack of native support in IE has lead to a wide array of workarounds which now come under the banner of polyfills. These usually consist of a JavaScript solution that replaces the lack of advanced HTML support in legacy browsers.</p>\n\n<p>A comprehensive polyfill list curated by Paul Irish can be <a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills\">found on GitHub</a>.</p>\n\n<img src=\"http://www.suburban-glory.com/images/html5-alternative.png\" alt=\"alternative HTML5 logo\" height=\"324\" width=\"324\"><span>Image reproduced with kind permission from Phil Banks.Twitter: <a href=\"https://twitter.com/#!/emirpprime\">https://twitter.com/#!/emirpprime</a>; Website: <a href=\"http://stickmanphotography.co.uk/\">http://stickmanphotography.co.uk/</a></span>\n\n<p>But where possible it is always best to create your own solution rather than rely on somebody else's script.</p>\n\n<p>Placeholders are a new HTML5 attribute which allow text to be placed in a form input field so as to guide the user to what they should be entering. They are a great asset to usability in form design.</p>\n\n<p>Form placeholders are integrated in the latest version of Safari, Firefox, Opera and Chrome but are absent from versions of Internet Explorer 9 and below.</p>\n\n<p>Using a little DOM JavaScript and the for loop it is possible to emulate their behaviour in IE.</p>\n\n<p>This tutorial will run through the following steps:</p>\n\n<p>1. Use Modernizr object detection to check whether the browser is capable of using HTML5 placeholders.</p>\n<p>2. If not, loop through form elements replacing the blank input value with that of the placeholder attribute value.</p>\n<p>3. Make sure placeholder text in Internet Explorer is a light colour.</p>\n<p>4. Make sure placeholder text disappears when user enters value into the input form.</p>\n<p>5. Text entered into the input field must have high contrast with the background.</p>\n\n<p>Firstly, if you have not come across <a href=\"http://www.modernizr.com/\">Modernizr</a> before then let me introduce you to this essential third party script.</p>\n\n<p>This little helper is an intelligent way of detecting whether various components of HTML5 and CSS3 are present in the user's browser. In this tutorial we will use its object sniffing method like so:</p>\n\n<pre>\n\nif (!Modernizr.input.placeholder) {\n\n// code here\n\n}\n\n</pre>\n\n<p>If placeholder is not an active feature of this browser then run some code. First we'll take all the elements for the form with an id of “contact-form” and declare them in a variable called $form.</p>\n\n<pre>\n\nif (!Modernizr.input.placeholder) {\n\n    var $form;\n\n    $form = document.getElementById('contact-form').elements;\n\n}\n\n</pre>\n\n<p>Now we'll use a common method to loop through all the form elements and which allows us to give the placeholder value to the form input value. If you are unsure about this method then read <a href=\"http://pietschsoft.com/post/2006/06/01/Javascript-Loop-through-all-elements-in-a-form.aspx\">Chris Pietschamnn's tutorial</a>.</p>\n\n<pre>\n\nif (!Modernizr.input.placeholder) {\n\n    var $form, $i;\n\n    $form = document.getElementById(&#39;contact-form&#39;).elements;\n\n    $i = 0;\n\n    //set placeholder values for internet explorer\n    for ($len = $form.length; $i &lt; $len; $i += 1) {\n\n        if ($form[$i].getAttribute(“placeholder”) != undefined) {\n\n            // five placeholder value to form value\n            $form[$i].value = $form[$i].getAttribute(“placeholder”);\n\n        } // if not undefined\n    } // end for loop\n\n}\n\n</pre>\n\n<p>And that is it. If you have used the HTML5 placeholder attribute in your form, the text will now be visible in Internet Explorer.</p>\n\n<p>However, we also need to make sure that the placeholder text itself is a light colour. If you need to change the placeholder text in Firefox or Chrome then you can use the follow CSS:</p>\n\n<pre>\n\n::-webkit-input-placeholder {\n   color: #cccccc;\n}\n\n:-moz-placeholder {\n    color: #cccccc;\n}\n\n</pre>\n\n<p>\nIn JavaScript we'll need to do it by looping through the form input values. Notice the !== submit. We are not interesting in styling the submit input field here, just the input fields such as text and email.</p>\n\n<pre>\n\n$inputField = document.forms.contactUs.getElementsByTagName(&#39;input&#39;);\n\n$x = 0;\n\n// loop through input areas to make sure placeholder disappears on focus\nfor ($len = $inputField.length; $x &lt; $len; $x += 1) {\n\n    if ($inputField[$x].type !== &quot;submit&quot;) {\n\n        $inputField[$x].style.color = &quot;#999&quot;;\n\n\n    }\n\n</pre>\n\n<p>Lastly, we need to make sure that the placeholder text disappears when the user starts to enter their own text and the colour changes to something more darker and readable:</p>\n\n<pre>\n\n   $inputField = document.forms.contactUs.getElementsByTagName(&#39;input&#39;);\n\n$x = 0;\n\n// loop through input areas to make sure placeholder disappears on focus\nfor ($len = $inputField.length; $x &lt; $len; $x += 1) {\n\n    if ($inputField[$x].type !== &quot;submit&quot;) {\n\n        $inputField[$x].style.color = &quot;#999&quot;;\n\n        // place holder text disappears on focus\n        $inputField[$x].onfocus = function () {\n\n            this.value = &quot;&quot;;\n            this.style.color = &quot;#000&quot;;\n\n        };\n\n    }\n\n</pre>\n\n<p>And altogether the code looks like this:</p>\n\n<pre>\nif (!Modernizr.input.placeholder) {\n\n    // always declare javascript variables at the top of the script\n    var $elements, $i, $x, $len, $formInput, $inputField, $form;\n\n    $form = document.getElementById(&#39;contact-us&#39;).elements;\n\n    $i = 0;\n\n    //set placeholder values for internet explorer\n    for ($len = $form.length; $i &lt; $len; $i += 1) {\n\n        if ($form[$i].getAttribute(&quot;placeholder&quot;) != undefined) {\n\n            $form[$i].value = $form[$i].getAttribute(&quot;placeholder&quot;);\n\n        } // if not undefined\n    } // end for loop\n\n    $inputField = document.forms.contactUs.getElementsByTagName(&#39;input&#39;);\n\n    $x = 0;\n\n    // loop through input areas to make sure placeholder disappears on focus\n    for ($len = $inputField.length; $x &lt; $len; $x += 1) {\n\n        // Don&#39;t change the submit input!\n        if ($inputField[$x].type !== &quot;submit&quot;) {\n\n            // Give placeholder text a grey colour\n            $inputField[$x].style.color = &quot;#999&quot;;\n\n            //Delete the placeholder text and change CSS text colour to black on user focus\n            $inputField[$x].onfocus = function () {\n\n                this.value = &quot;&quot;;\n                this.style.color = &quot;#000&quot;;\n\n            };\n\n        }\n\n    } // if not undefined\n} // end modernizr\n</pre>\n\n<p>You can see a live example of this code on a website I built here - <a href=\"http://www.expertwillwriter.com/\">will writer</a> - and you grab the code on <a href=\"https://gist.github.com/1078011\">Gist</a>.</p>\n\n<p>This code has been tested on IE versions 7, 8 and 9.</p>","categories":[],"uniqueId":"131238","url":"using-javascript-emulate-html5-placeholders-internet-explorer","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-four.jpg"},{"title":"Review of HTML5 Canvas Libraries","link":"http://www.suburban-glory.com/blog?page=141","author":"Andy Walpole","publishedDate":"1310985492000","contentSnippet":"There's been a buzz around HTML5 for some time now with many leading commentators in the online tech community heavily pushing ...","content":"<p>There's been a buzz around HTML5 for some time now with many leading commentators in the online tech community heavily pushing the new standard.</p>\n\n<p>With the last version of HTML being released back in 1997 and XHMTL never really fulling its initial promises, a new version is needed that reflects the exhilarating pace of technological change and in particular meets the needs of the new platforms such as mobile and tablets.</p>\n\n<p>And some of the biggest web opinion formers and industrial heavyweights are HTML5 evangelists.</p>\n\n<p>When in 2010 Steve Jobs published a demolition job of Adobe's animation software in an article entitled “<a href=\"http://www.apple.com/hotnews/thoughts-on-flash/\">Thoughts on Flash</a>”, it brought a lot of focus to the maturing standard:</p>\n\n<blockquote><p>Rather than use Flash, Apple has adopted HTML5, CSS and JavaScript – all open standards. Apple’s mobile devices all ship with high performance, low power implementations of these open standards. HTML5, the new web standard that has been adopted by Apple, Google and many others, lets web developers create advanced graphics, typography, animations and transitions without relying on third party browser plug-ins (like Flash). HTML5 is completely open and controlled by a standards committee, of which Apple is a member.\n</p></blockquote>\n\n<p>When the boss of Apple Inc. makes announcements like above then every developer should sit up and listen.</p>\n\n<img src=\"http://www.suburban-glory.com/images/html5-alternative.png\" width=\"324\" height=\"324\" alt=\"alternative HTML5 logo\"><span>Image reproduced with kind permission from Phil Banks.Twitter: <a href=\"https://twitter.com/#!/emirpprime\">https://twitter.com/#!/emirpprime</a>; Website: <a href=\"http://stickmanphotography.co.uk/\">http://stickmanphotography.co.uk/</a></span>\n\n<p>The other great commercial tech player, Microsoft, has also thrown their immense weight behind HTML5 with Vice President Julie Larson-Green <a href=\"http://arstechnica.com/microsoft/news/2011/06/html5-centric-windows-8-leaves-microsoft-developers-horrified.ars\">recently announcing</a> their intention to focus on the new format for their Windows 8 developer platform.</p>\n\n<p>When I wrote an introduction to <a href=\"http://www.suburban-glory.com/blog?page=135\">HTML5 Canvas</a> at the beginning of the year I noted how limited the new technology is with a big block to uptake being the prohibitive low-end, verbose coding, especially when compared to ActionScript.</p>\n\n<p>I finished the article with this paragraph:</p>\n\n<blockquote><p>Hopefully, somebody will create a code library for canvas animation. Creating objects is cumbersome but straight forward; however, in order for the popularity of this particular HTML5 API to spread there needs to be easy access to animation features as you would find in jQuery or Mootools.\n</p></blockquote>\n\n<p>In this article I will examine a number of HTML5 canvas libraries. This is mainly a usability review and I won't examine the code too closely, but I also wanted to create some solid code examples with supporting comments as an aid to other developers interested in using these projects.</p>\n\n<p>The projects reviewed are jCanvaScript, CAKE, fabric.js and doodle.js</p>\n\n<p>If you do want to try these scripts out then you really need knowledge of vanilla JavaScript. If your only experience is through a package like jQuery or Mootools then you'll struggle when attempting to use any of these tools.</p>\n\n<p>I should firstly state that they are all competent libraries but some are more ready for wider adoption than others, in particular a couple have a lack of documentation and working demos. </p>\n\n<p>They are all open source and are issued under liberal licenses that allow integration into commercial projects. Also note that all the libraries featured are being regularly updated by their respective developers.</p>\n\n<h3>jCanvaScript</h3>\n\n<p><img src=\"http://www.suburban-glory.com/images/jcanvascript-html5-canvas-library.jpg\" width=\"450\" height=\"450\" alt=\"jCanvaScript HTML5 Canvas Library homepage\"></p>\n\n<p>Alexander Savin is the prime mover behind this library released under the MIT and GPL2 licenses. The <a href=\"http://jcscript.com/\">jCanvaScript</a> beta was launched at the beginning of 2011 and several versions have since been released.</p>\n\n<p>The features of this library are the main planks of HTML5 canvas: the ability to create shapes, animation, images and text and to animate them and also allowing user interactivity via the mouse or keyboard.</p>\n\n<p>To use jCanvaScript you first need to create the jc object and from their you can access its methods. The code below creates a white circle 100px wide positioned 150px from the left and 250px from the top of the canvas:</p>\n\n<pre>\njc.start(\"canvas_1\");\n\njc.circle({\n    x: 150,\n    y: 250,\n    radius: 100,\n    color: '#ffffff',\n    fill: 1\n});\n</pre>\n\n<p>The above method uses literal notation but it's also possible to use shorthand like so:</p>\n\n<pre>\njc.circle(150.250.100,'#ffffff',true);\n</pre>\n\n<p>I prefer to use the more robust literal notation where ever possible, that way the objects are labelled and are also self documenting which serves a similar purpose to code comments.</p>\n\n<p>The documentation for jCanvaScript is excellent with clear examples of both functions and objects given. I would state that it would take a day to master the entire library. </p>\n\n<p>An example of animation is as below:</p>\n\n<pre>\njc.start('canvas_1', 160);\njc.circle({\n    x: 90,\n    y: 500,\n    radius: 150,\n    color: 'rgb(255,241,12)',\n    fill: 1\n}).animate({\n    x: 500,\n    y: 90\n}, 100, {\n    type: 'in',\n    fn: 'linear'\n}).fadeOut(100, {\n    type: 'in',\n    fn: 'linear'\n});\n</pre>\n\n<p>The second parameter in jc.start is frames per second. It's possible to join the methods together – in the above example animation and fadeOut are added to circle object. Anybody familiar with a common JavaScript library will be familiar with this syntax. The use of object notation for animation reminds me of Dojo.</p>\n\n<p>I was using setTimeout to repeat the animation but I found it confusing to compare the FPS of the library code with the milliseconds of setTimeout, but that's says more about my skills than the library.</p>\n\n<p><a href=\"http://www.suburban-glory.com/html5-experiments/jcanvascript.php\">Click on here to see a jCanvaScript demo</a>.</p>\n\n<p>Compressed, the script weighs 50kB.</p>\n\n<h4>Fabric.js</h4>\n\n<p><img src=\"http://www.suburban-glory.com/images/fabricjs-html5-library.jpg\" width=\"450\" height=\"450\" alt=\"fabric.js HTML Canvas library homepage\"></p>\n\n<p>Released under a MIT license fabric.js is the work of former Prototype developer <a href=\"http://perfectionkills.com/\">Juriy Zaytsev</a> - aka <a href=\"https://twitter.com/#!/kangax\">kangax</a> - that grew from a commercial project he was engaged in.</p>\n\n<p>The first commit on GitHub dates from the summer of 2010 and since then the principle coder has been regularly expanding and revising the script.</p>\n\n<p>Fabric.js is a far more feature rich offering than jCanvaScript. Included in the hefty download file is an SVG-to-canvas parser, unit testing and even limited IE support through Explorer Canvas.</p>\n\n<p>Below is how to use fabric.js to create a red triangle 200px by 200px in size:</p>\n\n<pre>\n// create the canvas object\n$canvas = new fabric.Canvas('canvas_1');\n\n// create a triangle\n$triangle = new fabric.Triangle({\n    top: 450,\n    left: 500,\n    width: 200,\n    height: 200,\n    fill: 'rgb(204,0,107)'\n});\n\n// add it to the canvas\n$canvas.add($triangle);\n</pre>\n\n<p>The quality of the code is fantastic – it's more like looking at art; but the entry point for interested users is too high.</p>\n\n<p>The documentation is minimal or non-existent with the technical manual being impenetrable for those not already familiar with the code. For instance, could you work out how to create a gradient from the <a href=\"http://kangax.github.com/fabric.js/docs/symbols/fabric.Gradient.html\">information on this page?</a>. No, neither could I and as there isn't a live example to study this makes matters especially problematic. An API reference is important – but there needs to more than just that.</p>\n\n<p>The are some live demos but too few of them – there needs to be examples of every type of class / shape. Of those that exist none feature crucial code commenting as this <a href=\"http://kangax.github.com/fabric.js/demos/cross/index.html\">animation page highlights</a>.</p>\n\n<p>It looks promising as feature-rich HTML5 canvas Swiss army knife, but there's too many unnecessary barriers that will prevent wider adoption.</p>\n\n<p><a href=\"http://www.suburban-glory.com/html5-experiments/fabric-library.php\">Click on here to see a fabric.js demo</a></p>\n\n<h5>CAKE</h5>\n\n<p><img src=\"http://www.suburban-glory.com/images/cake-html5-library.jpg\" width=\"450\" height=\"450\" alt=\"CAKE HTML5 Canvas library homepage\"></p>\n\n<p>Written principally by Google employee <a href=\"http://fhtr.blogspot.com/\">Ilmari Heikkinen</a> <a href=\"http://code.google.com/p/cakejs/\">CAKE</a> is, in a description from the homepage, “a JavaScript scene graph library for the HTML5 canvas tag. You could think of it as SVG sans the XML and not be too far off.”</p>\n\n<p>Ilmari is a regularly contributor to <a href=\"http://www.html5rocks.com/en/\">HTML5 Rocks</a> and has a host of <a href=\"http://fhtr.org/\">HTML5 related projects under his belt</a>.</p>\n\n<p>Unlike all the other libraries reviewed in this post, CAKE actually has a number of comprehensive online tutorials. Written by <a href=\"https://twitter.com/#!/mcasperson\">Matthew Casperson</a> they cover both a <a href=\"http://www.codeproject.com/KB/scripting/GettingStartedWithCAKE.aspx\">basic introduction</a> and more <a href=\"http://www.brighthub.com/hubfolio/matthew-casperson/blog/archive/2009/08/24/cake-programming-tutrorials.aspx\">complex animation</a>.</p>\n\n<p>The code below is how to create a yellow circle 150px wide with a 20px border stroke.</p>\n\n<pre>\nvar $canvas, $circle;\n\n$canvas = new Canvas(document.getElementById(\"code\"), 600, 400);\n\n$circle = new Circle(150, {\n    x: 200,\n    y: 200,\n    fill: 'rgb(0,147,211)',\n    stroke: 'rgb(255,241,12)',\n    strokeWidth: 20,\n    endAngle: Math.PI * 2\n});\n\n$canvas.append($circle);\n</pre>\n\n<p>Notice that with CAKE you create the HTML element first – declared above to be the child of “code” and 600 x 400 – rather than reference an already existing one.</p>\n\n<p>Also note the value for endAngle – ouch. A library should avoid the use of radians for creating basic shapes.</p>\n\n<p>Beyond the Casperson tutorials there a number of working demos: a <a href=\"http://glimr.rubyforge.org/cake/hello_world.html\">simple introduction</a> and a serious of <a href=\"http://glimr.rubyforge.org/cake/canvas.html#KeyboardTest\">full-on examples</a>.</p>\n\n<p>There is also some <a href=\"http://code.google.com/p/cakejs/w/list\">limited documentation on the home page</a>.</p>\n\n<p>The whole point of creating a HTML Canvas library is to create an accessible entry point for developers. CAKE fails to do that. While there are a number of clear tutorials, CAKE has an over-reliance on geometry for even basic functionality. While this can't be avoided altogether (see the conclusion) it should be minimalised. </p>\n\n<p>It's just far too low level for a library – I laughed at the complexity of some of the coding examples.</p>\n\n<p>Finn <a href=\"https://twitter.com/#!/ilmarihei\">Ilmari Heikkinen</a> is clearly a coding genius but he's left most of us behind with CAKE.</p>\n\n<p><a href=\"http://www.suburban-glory.com/html5-experiments/cake-library.php\">Click here to see a demo of CAKE</a>.</p>\n\n<h6>Doodle.js</h6>\n\n<p><img src=\"http://www.suburban-glory.com/images/doodlejs-html5-canvas-library.jpg\" width=\"450\" height=\"450\" alt=\"doodle.js HTML5 Canvas library homepage\"></p>\n\n<p><a href=\"https://github.com/billyist/doodle-js\">Doodle.js</a> takes a totally different approach to all the other libraries presented here in that it doesn't try to fit in with either JavaScript or the Canvas API but instead mimics ActionScript.</p>\n\n<p>It's an original take on Canvas and one worthy of further inspection.</p>\n\n<p><a href=\"http://www.lamberta.org/\">Billy Lamberta</a> together with <a href=\"http://www.bit-101.com/blog/\">Keith Peters</a> created the library for their forthcoming book <a href=\"http://www.amazon.co.uk/Foundation-HTML5-Animation-with-JavaScript/dp/1430236655/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1310818598&amp;sr=8-1\">Foundation HTML5 Animation with JavaScript</a> [edit: this wrong. See comments]. The premise behind the project is that it will be of assistance to Flash developers who are interested in using HTML5.</p>\n\n<p>This is how you create a circle with doodle.js:</p>\n\n<pre>\n // declare variables\n var $canvas, $element, $circle;\n\n //dom block element wrapper\n $element = doodle.createDisplay(\"canvas\");\n //creates new canvas element wrapper\n $canvas = $element.createLayer();\n\n $circle = doodle.createSprite();\n $circle.graphics.beginFill(0xfff10c);\n $circle.graphics.circle(0, 0, 150);\n $circle.graphics.endFill();\n\n $circle.x = $element.width / 2;\n $circle.y = $element.height / 2;\n\n $canvas.addChild($circle);\n</pre>\n\n<p>The breadth of <a href=\"http://www.lamberta.org/doodle-js/doc/examples/making-things-move/\">coding demos</a> attached to doodle.js is easily the most thorough of all the other libraries reviewed. By studying the code you'll be able to create smooth <a href=\"http://www.lamberta.org/doodle-js/doc/examples/making-things-move/chap03/02-up_down_motion.html\">up and down motion</a>, make the <a href=\"http://www.lamberta.org/doodle-js/doc/examples/making-things-move/chap05/04-follow_mouse_1.html\">object follow the mouse</a> and even create <a href=\"http://www.lamberta.org/doodle-js/doc/examples/making-things-move/chap16/08-pyramid.html\">complex 3d shapes</a>.</p>\n\n<p>Doodle.js also has the most complex <a href=\"http://lamberta.org/doodle-js/doc/api/\">API reference</a> of the lot.</p>\n\n<p>As it's a relatively new project and built to coincide with the release of a yet to be published book, hardly any attention has been given to doodle.js from the wider developer community. But don't let that put you off from trying it out. It's one to watch.</p>\n\n<p><a href=\"http://www.suburban-glory.com/html5-experiments/doodle.php\">Click on here to see a demo of doodle.js</a>.</p>\n\n<h6>Conclusion</h6>\n\n<p>Due to time restrictions none of the above are complete reviews but I hope they gave you a flavour of what to expect if you try either jCanvaScript, fabric.js, doodle.js or CAKE.</p>\n\n<p>There are a number of other Canvas projects out there such as <a href=\"https://github.com/rsandor/gury\">Gury</a>, <a href=\"https://canvastoolkit.codeplex.com/\">HTML5 Canvas Library</a> and <a href=\"http://forvar.de/js/mcl/examples.html\">MooTools Canvas Library</a> but they are either too fresh or too stagnant to be worthy of review.</p>\n\n<p>From my investigation all have elements which are commendable but all are far from being complete, rounded libraries.</p>\n\n<p>Many coders have been spoilt by JavaScript libraries such as jQuery and Dojo over the last few years. The ease of creating animation means no more than adding slideUp() or slideDown() at the end of a coding chain.</p>\n\n<p>These are at such a high-level that they bear no resemblance whatsoever to the underlying JavaScript that creates these methods.</p>\n\n<p>jCanvaScript attempts to follow this path and because of that it is easy learn. However, as we look to using the Canvas API for more complex purposes other than fade in and out or horizontal linear movement, more full code will be required – complex animation <em>will</em> require complex code.</p>\n\n<p>Sure, a library will assist in this process but it will require a deeper understanding by the developer of programming techniques that use geometry calculations.</p>\n\n<p>For that reason, I really don't see how jCanvaScript can produce the sort of necessarily complex animation such as <a href=\"http://lamberta.org/doodle-js/doc/examples/making-things-move/chap13/10-real_walk.html\">this</a> and <a href=\"http://lamberta.org/doodle-js/doc/examples/making-things-move/chap16/12-move_cube_2.html\">this</a> (created with doodle.js).</p>\n\n<p>So for now perhaps doodle.js edges in front of the others but fabric.js could be a serious contender if usability issues are addressed.</p>\n\n<p>If you have tried any of the above then please feel free to add your thoughts below.</p>","categories":[],"uniqueId":"131098","url":"review-html5-canvas-libraries","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-five.jpg"},{"title":"Replace a form submit button with an image using just CSS","link":"http://www.suburban-glory.com/blog?page=140","author":"Andy Walpole","publishedDate":"1309022477000","contentSnippet":"There are tons of articles out there on the subject of styling forms with individual web designers developing their own ...","content":"<p>There are tons of articles out there on the subject of styling forms with individual web designers developing their own particular coding preferences over time. </p>\n\n<p>For developers and designers, creating and styling forms is the bread'n'butter of their trade and one of their most regular activities.</p>\n\n<p>Some parts of the form such as checkboxes and file uploads can only be partially altered by CSS with these form elements being reliant on the inbuilt OS and browser style, but the submit button can be radically altered. It can even be totally replaced with an image like so:</p>\n\n<pre>\nImage submit button:\n&lt;input type=”image” src=”button.png” alt=”submit” name=”submit” /&gt;\n\nNormal submit button:\n&lt;input type=”submit” name=”submit” value=”submit” /&gt;\n</pre>\n\n<p>As creating an image button is so straight forward it may seem pointless to use another method; however, there are a number of problems with HTML image buttons.</p>\n\n<p>Firstly, there are issues with PHP form submission because it follows the mouse coordinates and creates two different values based on the X and Y coordinates instead of just one straight submission.</p>\n\n<p>Secondly, you may be using a CMS and it may be not immediately obvious just how to alter an HTML form.</p>\n\n<p>This is a foolproof way of using an CSS to replace a form submit button with an image and which works in any browser and platform.</p>\n\n<p>The first part of the code uses <a href=\"http://www.suburban-glory.com/blog?page=130\">CSS3</a> attribute selectors and places an image as a background for the element (use an alternative selector method for Internet Explorer). Make sure the background image isn't repeated and is centred on both axis'. The width and height must be the same as the image.</p>\n\n<p>Now make sure that there is no border and the text has a transparent colour so that it is invisible.</p>\n\n<pre>\nform input[type=submit] {\n\tbackground : url(\"submit.png\") no-repeat center center;\n\twidth : 115px;\n\theight :52px;\n\tborder : none;\n\tcolor : transparent;\n}\n</pre>\n\n<p>One problem though is that Internet Explorer below version 8 doesn't recognise transparent as a valid value so for the legacy browsers we'll give the font a size of zero.</p>\n\n<pre>\nform input[type=submit] {\n\tbackground : url(\"submit.png\") no-repeat center center;\n\twidth : 115px;\n\theight :52px;\n\tborder : none;\n\tcolor : transparent;\n\tfont-size : 0\n}\n</pre>\n\n<p>It's easy to change the image on the hover state:</p>\n\n<pre>\nform input[type=submit]:hover {\n\tbackground : url(\"submit-hover.png\") no-repeat center center;\n}\n</pre>\n\n<p>Screen readers will still be able to read the submit button text despite it being invisible to other web users.</p>\n\n<p>These are a couple of examples from recent jobs that I have done:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/submit-button-image-one-small.jpg\" alt=\"Submit button example one\" width=\"300\" height=\"200\"><img src=\"http://www.suburban-glory.com/images/submit-button-two-small.jpg\" alt=\"submit button example two\" width=\"300\" height=\"200\"></p>\n\n<h3>Using sliding doors for submit buttons</h3>\n\n<p>It is also possible to use the sliding doors technique for submit buttons. For those that don't know, sliding doors is a means of creating a dynamic background image that expands as the text increases. It is most commonly used on menu list items.</p>\n\n<p>Here's the image. A left hand side and a right hand side:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/submit-button-image-small-four.png\" alt=\"sliding doors images\" width=\"500\" height=\"32\"></p>\n\n<p>The HTML submit button is as before but this time we will encase it in a div like so:</p>\n\n<pre>\n&lt;div class=”outer-submit”&gt;\n&lt;input type=”submit” name=”submit” value=”submit” /&gt;\n&lt;/div&gt;\n</pre>\n\n<p>\nAnd here is the CSS code:</p>\n\n<pre>\nform .outer-submit {\n\tmargin : 0 auto;\n\tbackground:transparent url(\"images/topic_button.png\") no-repeat top left;\n\tmax-width : 240px;\n\twidth : 50%;\n\tpadding : 0 0 10px 0;\n}\nform input[type=submit] {\n\tcolor : #fff;\n\tpadding:9px;\n\tmargin:0px 0px 5px 3px;\n\tborder : none;\n\twidth : 100%;\n\tbackground:transparent url(\"images/topic_button.png\") no-repeat top right;\n}\nform .outer-submit:hover {\n\tbackground:transparent url(\"images/topic_button_hover.png\") no-repeat top left;\n}\nform input[type=submit]:hover {\n\tbackground:transparent url(\"images/topic_button_hover.png\") no-repeat top right;\n}\n</pre>\n\n<p>This is what the above code looks like on a website.</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/submit-button-image-three-small.jpg\" alt=\"sliding doors submit button\" width=\"300\" height=\"200\"></p>","categories":[],"uniqueId":"130902","url":"replace-form-submit-button-with-image-using-just-css","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-six.jpg"},{"title":"Creating a pull down (nested) menu in Drupal 7","link":"http://www.suburban-glory.com/blog?page=139","author":"Andy Walpole","publishedDate":"1302693992000","contentSnippet":"Special note: Don't follow this tutorial just download and use the Menu Block module instead.\n\nDrupal was originally a ...","content":"<p><strong>Special note: Don't follow this tutorial just download and use the <a href=\"http://drupal.org/project/menu_block\">Menu Block module</a> instead.</strong></p>\n\n<p>Drupal was originally a developers toy but over the last few years the thrust of the CMS has been to try lower the entry point for non-technical users.</p>\n\n<p>The administration section in version 7 is now far, far more user friendly to lay people and is closer to Wordpress in its logical layout and smooth navigation.</p>\n\n<p>However, creating themes can still be a taxing process.</p>\n\n<p>Out of the box, primary and secondary menus do not allow nested structures (unless you use them in the blocks). This isn't a CSS issue – it simple won't publish the necessary HTML despite being allowed to create a nested menu in the admin section.</p>\n\n<p>Secondary and primary are placed into the theme by using the <a href=\"http://api.drupal.org/api/drupal/includes--theme.inc/function/theme/7\">theme()</a> function which creates a nested array like so:</p>\n\n<pre>\n\n        &lt;?php print theme(&#39;links__system_main_menu&#39;, array(&#39;links&#39; =&gt; $main_menu, &#39;attributes&#39; =&gt; array(&#39;id&#39; =&gt; &#39;main-menu&#39;, &#39;class&#39; =&gt; array(&#39;links&#39;, &#39;inline&#39;, &#39;clearfix&#39;)), &#39;heading&#39; =&gt; t(&#39;Main menu&#39;))); ?&gt;\n\n</pre>\n\n<p>The above sets the id, classes and a header title and associates this with the menu in the database.</p>\n\n<p>In order to allow nested menus it is necessary to replace the above code with this:</p>\n\n<pre>\n\n\t&lt;?php\n$pid = variable_get(&#39;menu_main_links_source&#39;, &#39;main-menu&#39;);\n$tree = menu_tree($pid);\n$tree = str_replace(&#39; class=&quot;menu&quot;&#39;, &#39;&#39;, $tree);\n$main_menu = drupal_render($tree);\nprint $main_menu; \n?&gt;\n\n</pre>\n\n<p>This uses three different inbuilt Drupal functions: <a href=\"http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/variable_get\">variable_get()</a>, \n<a href=\"http://api.drupal.org/api/drupal/includes--menu.inc/function/menu_tree/7\">menu_tree()</a> and\n<a href=\"http://api.drupal.org/api/drupal/includes--common.inc/function/drupal_render/7\">drupal_render()</a>.</p>\n\n<p>To explain, persistent variables are created with the variable_set() function and are kept cached in the database to prevent easy retrieval with variable_get().</p>\n\n<p>The id of the main menu – called 'main-menu' – is then used as a parameter in the menu_tree() function. This calls the nested array for the main menu.</p>\n\n<p>The magic comes with the simple PHP str_replace() function. You are looking for the needle menu class in the menu nested array haystack and removing it.</p>\n\n<p>Then it is stuck back together again using the drupal_render() function.</p>\n\n<p>Isn't there a way of doing this with just the theme() function? Those nested arrays make my head spin. Perhaps a more experienced Drupalista can comment.\n</p>","categories":[],"uniqueId":"130269","url":"creating-pull-down-nested-menu-drupal-7","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-seven.jpg"},{"title":"Altering the read more link in Drupal 7","link":"http://www.suburban-glory.com/blog?page=138","author":"Andy Walpole","publishedDate":"1302633272000","contentSnippet":"How to change the position of the read more link at the bottom of node teasers has been a discussion point for Drupal themers ...","content":"<p>How to change the position of the read more link at the bottom of node teasers has been a discussion point for Drupal themers for years. Four Kitchens even created a module to add this functionality: <a href=\"http://drupal.org/project/ed_readmore\">http://drupal.org/project/ed_readmore</a>.</p>\n\n<p>For those not familiar with the default Drupal layout, the read more link is at the bottom of the node teaser with other links such as comments. It's positioning there  doesn't flow very well and it looks better  sitting directly underneath the teaser text.</p>\n\n<p>It is easy to remove this link in Drupal 7 by using the new functions <a href=\"http://api.drupal.org/api/drupal/includes--common.inc/function/hide/7\">hide()</a> and <a href=\"http://api.drupal.org/api/drupal/includes%E2%80%94common.inc/function/render/7\">render()</a>. ( render() uses an old Drupal function, drupal_render() ).</p>\n\n<p>Drupal code originates from a PHP era before the widespread adoption of Object Orientated Programming, therefore much of it is dependent on nested arrays.</p>\n\n<p>These can be quite maddening to deal with and it is not recommended do so without the <a href=\"http://drupal.org/project/devel\">Devel module</a> and using the Devel helper dsm() function.</p>\n\n<p>Hide() and render() allows themers to modify arrays without using preprocess functions in the template.php file.</p>\n\n<p>In node.tpl.php they work as so.</p>\n\n<p>By using render() it is possible to display the whole node – text, date, comment, links, the lot:</p>\n\n<pre>\n\n&lt;div&gt;\n&lt;?php print render($content); ?&gt;\n&lt;/div&gt;\n\n</pre>\n\n<p>Removing parts of the page and then placing them elsewhere is easy with Drupal 7.</p>\n\n<p>Before calling the parent $content you can hide some or all of its children.</p>\n\n<p>Below prevents comments from being rendered.</p>\n\n<pre>\n\n&lt;div&gt;\n&lt;?php\nhide($content[&#39;comments&#39;]);\nphp print render($content); \n?&gt;\n&lt;/div&gt;\n\n</pre>\n\n<p>If you then wish to display them separately you'd then need to call comments like so elsewhere on the page:</p>\n\n<pre>\n\n&lt;?php print render($content[&#39;comments&#39;]); ?&gt;\n\n</pre>\n\n<p>Using this method hiding the read more link is achieved with the following:</p>\n\n<pre>\n\n&lt;?php hide($content[&#39;links&#39;][&#39;#links&#39;][&#39;node-readmore&#39;]); ?&gt;\n\n</pre>\n\n<p>Simple, er?</p>\n\n<p>Inserting it elsewhere requires the use of the <a href=\"http://api.drupal.org/api/drupal/includes--common.inc/function/l\">l()</a> and <a href=\"http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/t/7\">t()</a> functions to create a link:</p>\n\n<pre>\n\n  &lt;?php \nif($teaser){\n      print l(t(&#39;Read more&#39;), &#39;node/&#39; . $nid, array(&#39;attributes&#39; =&gt; array(&#39;class&#39; =&gt; t(&#39;node-readmore-link&#39;)))); \n  } \n?&gt;\n\n</pre>\n\n<p>The l() and t() functions are needed when inserting links into Drupal so as to ensure they integrate safely with the rest of the code.</p>\n\n<p>Adding all of the above together would create a node.tpl.php page like so:</p>\n\n<pre>\n\n&lt;div id=&quot;node-&lt;?php print $node-&gt;nid; ?&gt;&quot; class=&quot;&lt;?php print $classes; ?&gt; clearfix&quot;&lt;?php print $attributes; ?&gt;&gt;\n\n  &lt;div class=&quot;content-box&quot;&gt;\n  \n    &lt;div class=&quot;views-field-title&quot;&gt; &lt;?php print render($title_prefix); ?&gt;\n    \n      &lt;?php if (!$page): ?&gt;\n      \n      &lt;p&gt;&lt;?php print $title; ?&gt;&lt;/p&gt;\n      &lt;?php endif; ?&gt;\n      \n      &lt;?php print render($title_suffix); ?&gt; &lt;/div&gt;\n    &lt;!-- End views-field-title --&gt;\n    \n    &lt;?php\n\t\n\t\thide($content[&#39;comments&#39;]);\n      hide($content[&#39;links&#39;]);\n\t  hide($content[&#39;field_image&#39;]); \n\t  hide($content[&#39;links&#39;][&#39;#links&#39;][&#39;node-readmore&#39;]);\n\t ?&gt;\n     \n    &lt;div class=&quot;field-content&quot;&gt; \n\t&lt;?php print render($content[&#39;field_image&#39;]); ?&gt;\n    \n      &lt;div class=&quot;content-date&quot;&gt;&lt;?php print $date; ?&gt;&lt;/div&gt;\n\t  \n      &lt;?php print render($content); ?&gt;\n      \n      &lt;?php if($teaser){ ?&gt;\n      &lt;p class=&quot;last-read&quot;&gt;&lt;?php print l(t(&#39;Read more&#39;), &#39;node/&#39; . $nid, array(&#39;attributes&#39; =&gt; array(&#39;class&#39; =&gt; t(&#39;node-readmore-link&#39;)))); ?&gt;&lt;/p&gt;\n      &lt;?php } ?&gt;\n    &lt;/div&gt;\n    &lt;!-- End field-content --&gt;\n    \n    &lt;div class=&quot;read-more&quot;&gt; &lt;?php print render($content[&#39;links&#39;]); ?&gt;&lt;/div&gt;\n    &lt;!-- End read-more --&gt;\n    \n  &lt;/div&gt;\n  &lt;!-- End content box --&gt;\n  \n  &lt;?php print render($content[&#39;comments&#39;]); ?&gt; \n  \n  &lt;/div&gt;\n\n</pre>","categories":[],"uniqueId":"130263","url":"altering-read-link-drupal-7","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-eight.jpg"},{"title":"Using JavaScript to create equal height columns","link":"http://www.suburban-glory.com/blog?page=137","author":"Andy Walpole","publishedDate":"1300985297000","contentSnippet":"Creating websites with tables didn't have many advantages over using CSS, but the ability to easily create equal height columns ...","content":"<p>Creating websites with tables didn't have many advantages over using CSS, but the ability to easily create equal height columns was one of them. </p>\n\n<p>There are a small number of tried and tested CSS techniques to achieve equal height columns but an ever increasing favourite amongst designers is to use server-side script.</p>\n\n<p>This can be achieved by using DOM JavaScript as below:</p>\n\n<pre>\n// This function below is necessary to take the CSS values as they appear in the external style sheet\nfunction retrieveComputedStyle(element, styleProperty) {\n    var computedStyle = null;\n\n    if (typeof element.currentStyle != \"undefined\") {\n        computedStyle = element.currentStyle;\n    } else {\n        computedStyle = document.defaultView.getComputedStyle(element, null);\n    }\n    return computedStyle[styleProperty];\n}\n\nvar $columnOne = document.getElementById(\"content-left\");\nvar $columnTwo = document.getElementById(\"content-right\");\n\nvar $columnOneHeight = document.getElementById(\"content-left\").offsetHeight;\nvar $columnTwoHeight = document.getElementById(\"content-right\").offsetHeight;\n\nvar $columnOneBorderTopWidth, $columnOneBorderBottomWidth, $columnOnePaddingTop, $columnOnePaddingBottom;\nvar $columnTwoBorderTopWidth, $columnTwoBorderBottomWidth, $columnTwoPaddingTop, $columnTwoPaddingBottom;\n\n// Find border and padding dimensions of #content-left\n$columnOneBorderTopWidth = retrieveComputedStyle($columnOne, \"borderTopWidth\");\n$columnOneBorderBottomWidth = retrieveComputedStyle($columnOne, \"borderBottomWidth\");\n$columnOnePaddingTop = retrieveComputedStyle($columnOne, \"paddingTop\");\n$columnOnePaddingBottom = retrieveComputedStyle($columnOne, \"paddingBottom\");\n\n// Find border and padding dimensions of #content-right\n$columnTwoBorderTopWidth = retrieveComputedStyle($columnTwo, \"borderTopWidth\");\n$columnTwoBorderBottomWidth = retrieveComputedStyle($columnTwo, \"borderBottomWidth\");\n$columnTwoPaddingTop = retrieveComputedStyle($columnTwo, \"paddingTop\");\n$columnTwoPaddingBottom = retrieveComputedStyle($columnTwo, \"paddingBottom\");\n\n// Remove pixels with replace method aand then add top and botton heights\nvar $columnOneBorderNumber = Number($columnOneBorderTopWidth.replace(\"px\", \"\")) + Number($columnOneBorderBottomWidth.replace(\"px\", \"\"));\nvar $columnOnePaddingNumber = Number($columnOnePaddingTop.replace(\"px\", \"\")) + Number($columnOnePaddingBottom.replace(\"px\", \"\"));\nvar $columnTwoBorderNumber = Number($columnTwoBorderTopWidth.replace(\"px\", \"\")) + Number($columnTwoBorderBottomWidth.replace(\"px\", \"\"));\nvar $columnTwoPaddingNumber = Number($columnTwoPaddingTop.replace(\"px\", \"\")) + Number($columnTwoPaddingBottom.replace(\"px\", \"\"));\n\n// Now take the total margins and padding numbers away from the height\nvar $columnOneFinal = $columnOneHeight - $columnOneBorderNumber - $columnOnePaddingNumber;\nvar $columnTwoFinal = $columnTwoHeight - $columnTwoBorderNumber - $columnTwoPaddingNumber;\n\n// Use the Maths object to find the highest number and set that in the maxNumber variable\nvar maxNumber = Math.max($columnOneFinal, $columnTwoFinal);\n\n// Set the height of the columns to be equal\n$columnOne.style.height = maxNumber + \"px\";\n$columnTwo.style.height = maxNumber + \"px\";\n</pre>\n\n<p>The enormous slab of code above creates equal heights for two divs, but by using a library such as jQuery it is possible just to use this:</p>\n\n<pre>\n    var $columnOne = $('#content-left').height();\n    var $columnTwo = $('#content-right').height();\n\n    var maxNumber = Math.max($columnOne, $columnTwo,);\n\n    $('#content-left').css(\"height\", maxNumber + \"px\");\n    $('#content-right').css(\"height\", maxNumber + \"px\");\n</pre>\n\n<p>The above finds the height of the two columns and then uses the JavaScipt Math object to find which value is the largest and then sets that in the CSS. This method does not take into account padding or margin measurments. If required, you'll have to add that separately.</p>\n\n<p>Using this method recently I had a problem with the Webkit browsers. I worked out that Webkit was adding the height of the images to the above calculations, thus, creating uneven columns.</p>\n\n<p>Thinking that it was a new Webkit DOM glitch that jQuery hadn't caught up with yet I tried the JavaScript longhand method but it was still the same.</p>\n\n<p>I finally worked out that the problem lay in how JavaScript was being called as the page loaded.</p>\n\n<p>The usual method of placing jQuery on the page is by using the $(document).ready() function. This calls the JavaScript <em>after</em> the DOM has loaded but <em>before</em> the page content.</p>\n\n<p>Another option is to use the  $(window).load() function like so:</p>\n\n<pre>\n\n$(window).load(function() {\n\n// Code here\n\n});\n</pre>\n\n<p>This allows the script to be executed after both the DOM and the page has been rendered. </p>\n\n<p>Using this function meant that the equal height columns code now worked perfectly.\n</p>","categories":[],"uniqueId":"130098","url":"using-javascript-create-equal-height-columns","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-nine.jpg"},{"title":"Ideas of March","link":"http://www.suburban-glory.com/blog?page=136","author":"Andy Walpole","publishedDate":"1300280681000","contentSnippet":"It can be argued that blogging and blog commenting is on the wane because social media – in particular Twitter and Facebook – ...","content":"<p>It can be argued that blogging and blog commenting is on the wane because social media – in particular Twitter and Facebook – has captivated web users attention, but none of these services are in themselves a replacement for blogging.</p>\n\n<p>Twitter is first-class for the quick dissemination of breaking news stories and the writing of witty one-liners has become an art in itself, but with only 140 characters maximum this provides a break on the style and substance of the platform. Bloggers face no such restraints.</p>\n\n<p>There is still a need for traditional blogging.</p>\n\n<p>At the moment Google is waging a war against content farms as it seeks to improve the quality of the search index. Few, if any, could seriously complain that this isn't a righteous move by the big G. At <a href=\"http://www.webpronews.com/did-googles-algorithm-update-go-far-enough-on-content-farms-2011-02\">WebProNews</a> Chris Crum questions whether we want high ranking content from non-professional sources on important subjects such as cancer:</p>\n\n<blockquote><p>\nYou can still search for \"level 4 brain cancer\" on Google and the top 2 results are from eHow. The top one comes from a freelance writer with a background in marriage psychology and family therapy, whose other featured articles on the site include titles like \"Kohler Toilet Won’t Flush Completely\", \"Roper Dryer Won’t Start\", and \"My Toilet Water Smells</p></blockquote>\n\n<p>In my Google reader I subscribe to about 100 feeds. Some of these are magazines such as Sitepoint, Smashing and SeoMOZ, but most of them are individual bloggers like <a href=\"http://www.copywritingdean.com/\">Stephen Dean</a>, <a href=\"http://cruncht.com/\">Murray Woodman</a>, <a href=\"http://davidwalsh.name/\">David Walsh</a>, <a href=\"http://www.jankoatwarpspeed.com/\">Janko Jovanovic</a>, <a href=\"http://www.linkspiel.com/\">Debra Mastaler</a> and <a href=\"http://perishablepress.com/css3-remove-box-shadow/\">Jeff Starr</a>.</p>\n\n<p>If, during my web travels, I come across a quality post then I check the output of the author and if they write consistently top notch items I subscribe to their feed. Using this methodology rarely do I subsequently unsubscribe.</p>\n\n<p>For the online industries such as web design and search engine optimization, bloggers have played a crucial role in the dissemination and revision of ideas and best work practices. Blogging, at its best, provides quality information to the web audience.</p>\n\n<p>I don't envisage this changing in the future.</p>\n\n<p><a href=\"http://www.rachelandrew.co.uk/archives/2011/03/15/the-ideas-of-march/\">Rachel Andrew</a> reflects on ten years of blogging and how Twitter has eaten into her daily routine:</p>\n\n<blockquote><p>\nAs I stopped posting trivial stuff to my blog, without any conscious decision, the blog then became the place I posted <em>important</em> things. My recent posts tend to be about business or web issues, and take the form of short essays rather than the short posts of the past. Again, this hasn’t been a conscious change of direction for the blog, however the more I post things I feel are important, the less I feel able to post the trivial. (her emphasis)\n</p></blockquote>\n\n<p>I would suggest that Rachel's experience of moving the whimsical to Twitter and leaving in-depth analysis on her blog is the norm rather than the exception.</p>\n\n<p>So if blogging is on the retreat then perhaps this is just the quantity rather than quality?</p>\n\n<p>Intellectual detractors of the net often disparagingly talk about “the cult of the amateur”. But this is both a strength and weakness. Clearly, I don't want to be handed information about brain cancer by a non-medical writer; but the professional, semi-professional or amateur enthusiasts are an essential part of the web environment and especially in the new media and creative industries.</p>\n\n<p>To celebrate and rejuvenate blogging Chris Shiflett recently issued a call under the banner of “<a href=\"http://shiflett.org/blog/2011/mar/ideas-of-march\">Ideas for March</a>”. The points of his manifesto read:</p>\n\n<ul><li>Write a post called Ideas of March.</li>\n<li>List some of the reasons you like blogs.</li>\n<li>Pledge to blog more the rest of the month.</li>\n<li>Share your thoughts on Twitter with the #ideasofmarch hashtag.</li>\n</ul><p>This is my contribution under the Shiflett standard.</p>\n\n<p>I blog for both altruistic and selfish reasons. Sometimes during the course of work I come across tricky problems that take time to solve. Often partial ideas for solutions have already been recorded by other bloggers or forum users and I want to contribute to the wider discourse. <a href=\"http://www.suburban-glory.com/blog?page=133\">Using PEAR Cache Lite with Drupal 6 and Varnish</a> and <a href=\"http://www.suburban-glory.com/blog?page=134\">Google Analytics and Drupal</a> are two recent articles in this vein. I don't do anything to promote these types of posts. I just write them, publish them and then let them float.</p>\n\n<p>Other posts are about self-promotion (SEO) and autodidacticism. As an example, I recently spent a few days playing around with HTML5 canvas. Afterwards I wrote what I had learnt into a tutorial and then went on a link building exercise. Writing my coding experience down solidifies my knowledge of the subject matter and improves the learning process. Read <a href=\"http://www.suburban-glory.com/blog?page=135\">Using HTML5 canvas</a>, <a href=\"http://www.suburban-glory.com/blog?page=130\">A Complete Guide to CSS Functions</a> and <a href=\"http://www.suburban-glory.com/blog?page=125\">A complete guide to CSS pseudo-classes</a>.</p>\n\n<p>Most importantly, I enjoy writing. As a young adult I had little grasp of the English language and I found it impossible to spell any word over six letters. I was so awful that I wondered whether I was dyslexic (Don't be stupid, my mum said, You just didn't pay any attention at school).</p>\n\n<p>Many years have passed since then but throughout most of my adult life I have learned to love both writing and reading and consider them fundamental to a healthy, informed outlook to life. Indeed, the written word is the bedrock of modern civilisation.</p>\n\n<p>Writing quality blog posts takes time. For me, they are often 1,500 to 2,000 words long, and I want to be certain that all information is correct and spelling and grammar mistakes are kept at a minimum. This often means revisions before publication. To sum up, I take it seriously. </p>\n\n<p>This is why I blog: contributing to a community, self-promotion and enjoyment.</p>\n\n<p>And in keeping with the spirit of things I pledge to write one extra article in March.</p>\n\n<p>Fellow bloggers trending at the moment for <a href=\"http://twitter.com/#!/search/ideasofmarch\">#ideasofmarch</a> are </p>\n\n<p><a href=\"http://weierophinney.net/matthew/archives/259-The-Ideas-of-March.html\">Matthew Weier O'Phinney</a>, <a href=\"http://lisamusing.com/writes\">Lisa Denlinger</a>, <a href=\"http://nateabele.com/the-ideas-of-march\">Nate Abele</a>, <a href=\"http://www.eschrade.com/page/ideas-of-march/\">Kevin Schroeder</a>, <a href=\"http://theother.leonpaternoster.com/the-ideas-of-march\">Leon Paternoster</a>, <a href=\"http://alwaystwisted.com/post.php?s=2011-03-15-ideas-of-march\">Stu Robson</a>, <a href=\"http://vampyrebytes.com/2011/03/15/the-ideas-of-march/\">Sean Prunka</a>, <a href=\"http://naramore.net/blog/the-ide-a-s-of-march\">Elizabeth Naramore</a>, <a href=\"http://stream.thisisapipe.com/post/3877904308/ideas-of-march\">Cameron Koczon</a>, <a href=\"http://blog.rafaeldohms.com.br/2011/03/15/the-ideas-of-march/\">Rafael Machado Dohms</a> and <a href=\"http://nocturnalmonkey.com/writing/entry/ideas_of_march\">Sam Hardacre</a></p>","categories":[],"uniqueId":"130028","url":"ideas-march","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-ten.jpg"},{"title":"Using HTML5 canvas","link":"http://www.suburban-glory.com/blog?page=135","author":"Andy Walpole","publishedDate":"1297770815000","contentSnippet":"Unless you have been in a coma for the last couple of years you would have noticed the upturn in interest in HTML5 and the ...","content":"<p>Unless you have been in a coma for the last couple of years you would have noticed the upturn in interest in HTML5 and the canvas tag.</p>\n\n<p>The Canvas API is a means of creating shapes, graphs and even animation using just JavaScript and which, unlike Flash, doesn't require a plug-in and, unlike Flash again, is not proprietary but open.</p>\n\n<p>Due to all the euphoria around HTML5 you may have come across list articles such as <a href=\"http://www.hongkiat.com/blog/48-excellent-html5-demos/\">48 Potential Flash-Killing Demos</a> and <a href=\"http://webdesignledger.com/inspiration/10-html5-demos-to-make-you-forget-about-flash\">10 HTML5 Demos to Make You Forget About Flash</a>, and which in their screaming hyperbole give the impression that all the cool kids hang out with HTML5 while Flash is the preferred technology for your senile, incontinent granddad. </p>\n\n<p>But this is not the case. HTML5 canvas is still a juvenile cousin to a much more mature Flash. As Mozilla themselves admit on their own <a href=\"https://developer.mozilla.org/en/Canvas_tutorial%3ABasic_animations\">canvas guide</a>:</p>\n\n<blockquote><p>\nUnfortunately the canvas element was never designed to be used in this way [to make animation] (unlike Flash) so there are limitations.</p>\n\n<p>Probably the biggest limitation is that once a shape gets drawn it stays that way. If we need to move it we have to redraw it and everything that was drawn before it. It takes a lot of time to redraw complex frames and the performance depends highly on the speed of the computer it's running on.\n</p></blockquote>\n\n<p>A user on Stack Overflow started a thread entitled <a href=\"http://stackoverflow.com/questions/4737258/why-is-creating-content-with-html5-canvas-much-more-complicated-than-authoring-wi\">Why is creating content with HTML5 Canvas much more complicated than authoring with Flash?</a> with the following exasperated plea: </p>\n\n<blockquote><p>\nHi, I've been doing Flash for couple of months and I love it. I can easily use a rectangle tool to draw a rectangle and do shape/motion tweening within seconds.</p>\n\n<p>Lots of people are talking about HTML5 vs Flash nowadays and I took a look on HTML5 Canvas today. To my surprised, I see whole bunch of \"code\". It's so complicated, they need to make a lot of calls (fill, stroke, moveto, closepath etc...) to make a simple shape. And even dozens lines of code mixing with javascript to do a simple movement???</p>\n\n<p>Am I missing something? It'll make animation 10x more complicated with HTML5 Canvas than Flash.\n</p></blockquote>\n\n<p>Read the answers to understand both the underlying differences between the two different technologies and reasons why Flash is still best for online animation.</p>\n\n<p>Two problems for canvas at the moment are the lack of thorough tutorials and a decent library so as to allow more widespread access to the complicated animation features.</p>\n\n<p>At the time of writing there is no one comprehensive book on the subject although a number are due to be released in 2011 including <a href=\"http://oreilly.com/catalog/0636920013327/\">HTML5 Canvas</a> by Steve and Jeff Fulton on the O'Reilly imprint (Send me a copy to review please!!).</p>\n\n<p>Nevertheless despite these handicaps below are some ways that it can be used.</p>\n\n<h3>Create a rectangle with HTML5 canvas</h3>\n\n<p>The current development of the canvas API means that it is only possible to create rectangles or squares – all other shapes need to be made using paths.</p>\n\n<p>The first and most important thing is to create the html:</p>\n\n<pre>\n\n&lt;canvas id=”canvas-one” width=”400” height=”400”&gt;&lt;/canvas&gt;\n\n</pre>\n\n<p>If no width or height is specified then the browser will fall back to a pre-defined size.</p>\n\n<p>Every use of the canvas API must begin with calling the rendering context, which below is 2d:</p>\n\n<pre>\n\nvar $canvas = document.getElementById(“canvas-one”);\nvar $cd = $canvas.getContext('2d');\n\n</pre>\n\n<p>Note that there is no 3d rendering yet.</p>\n\n<p>If you are creating a rectangle shape you will need to first declare the colour of the body and specify the colour and width of the border:</p>\n\n<pre>\n\n    $cd.strokeStyle = &quot;#000&quot;;\n    $cd.fillStyle = &quot;#FFFF00&quot;;\n    $cd.lineWidth = &quot;5&quot;;\n\n&lt;/pre&gt;\n\n&lt;p&gt;And now reference the above and create a rectangle:&lt;/p&gt;\n\n&lt;pre&gt;&lt;![CDATA[\n\n$cd.fillRect(30,30,200,300);\n$cd.strokeRect(30,30,200,300);\n\n</pre>\n\n<p>The values above are, from left to right, x coordinate, y coordinate, width in pixels and height.</p>\n\n<p>Place all of the above in an object detection statement so that it looks like below:</p>\n\n<pre>\n\nif ($canvas.getContext) {\n\n    $cd = $canvas.getContext('2d');\n\n    $cd.strokeStyle = \"#000\";\n    $cd.fillStyle = \"#FFFF00\";\n    $cd.lineWidth = \"5\";\n\n$cd.fillRect(30,30,200,300);\n$cd.strokeRect(30,30,200,300);\n\n} else {\n\n    alert(\"Your browser does not support HTML5 canvas. Use a decent browser, douchebag\");\n\n}\n\n</pre>\n\n<p>This creates the following shape:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/canvas-one-rectangle.jpg\" width=\"300\" height=\"366\" alt=\"rectangle created with HTML5 canvas\"></p>\n\n<p>It is possible to delete all the canvas content by using the following line of code:</p>\n\n<pre>\n\n$cd.clearRect(0,0,$canvas.width,$canvas.height);\n\n</pre>\n\n<p>Or just:</p>\n\n\n<pre>\n\n$canvas.height = $canvas.width;\n\n</pre>\n\n<h4>Create a face with HTML5 canvas</h4>\n\n<p>Now use some different methods and create a face like so:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/canvas-two-face.jpg\" width=\"300\" height=\"223\" alt=\"face created with HTML5 canvas\"></p>\n\n<p>Start off as before:</p>\n\n<pre>\n\nvar $canvas = document.getElementById(\"canvas-one\"),\n    $cd;\n\nif ($canvas.getContext) {\n\n$cd = $canvas.getContext('2d');\n\n$cd.strokeStyle = \"#000\";\n$cd.fillStyle = \"#FFFF00\";\n$cd.lineWidth =\"2\";\n\n// New code here\n\n} else {\n\nalert(\"Your browser does not support HTML5 canvas. Use something decent, douche bag\");\n\n}\n\n</pre>\n\n<p>To create a face you are going to need different shapes to represent the different parts. </p>\n\n<p>You'll need to create a circle for the face shape. Unlike the previous rectangle you always begin creating a shape by calling the <a href=\"https://developer.mozilla.org/en/Canvas_tutorial%3ADrawing_shapes#section_5\">beginPath</a> method:</p>\n\n<pre>\n\n$cd.beginPath();\n$cd.arc(300,200,50,0,Math.PI*2, false);\n$cd.fill();\n\n</pre>\n\n<p>The <a href=\"https://developer.mozilla.org/en/Canvas_tutorial%3ADrawing_shapes#section_10\">arc</a> method creates a circle. The measurements, from left to right, are the x coordinate, the y coordinate, the radius size, the start angle, the end angle and whether it runs clockwise or anti-clockwise. Note how the mathematical formula PI is used to create a perfect circle. </p>\n\n<p>Now for a mouth:</p>\n\n<pre>\n\n$cd.beginPath();\n$cd.moveTo(270,210)\n$cd.lineTo(330,210);\n$cd.stroke();\n\n</pre>\n\n<p>Again, call the beginPath method before you create the shape. Here the straight line moves along the specified X and Y coordinates. <a href=\"https://developer.mozilla.org/en/Canvas_tutorial%3ADrawing_shapes#section_6\">MoveTo</a> starts the line and <a href=\"https://developer.mozilla.org/en/Canvas_tutorial%3ADrawing_shapes#section_8\">lineTo</a> is the next coordinate. By using more lineTo methods it is possible to create a myriad of different shapes.</p>\n\n<p>Now add some more line paths to create the eyes and the final code looks like this:</p>\n\n<pre>\n\nvar $canvas = document.getElementById(\"canvas-one\"),\n    $cd;\n\nif ($canvas.getContext) {\n\n    $cd = $canvas.getContext('2d');\n\n    $cd.strokeStyle = \"#000\";\n    $cd.fillStyle = \"#FFFF00\";\n    $cd.lineWidth = \"2\";\n\n    $cd.beginPath();\n    $cd.arc(300, 200, 50, 0, Math.PI * 2, false);\n    $cd.fill();\n\n    $cd.beginPath();\n    $cd.moveTo(270, 210)\n    $cd.lineTo(330, 210);\n    $cd.stroke();\n\n    $cd.fillStyle = \"#000\";\n    $cd.beginPath();\n    $cd.arc(285, 180, 5, 0, Math.PI * 2, false);\n    $cd.fill();\n\n    $cd.beginPath();\n    $cd.arc(315, 180, 5, 0, Math.PI * 2, false);\n    $cd.fill();\n\n\n} else {\n\n    alert(\"Your browser does not support HTML5 canvas. Use something decent, douche bag\");\n\n}\n\n</pre>\n\n<p>Note above how the colour isn't kept in a variable but needs to be changed as the document progresses.</p>\n\n<h5>Create a smiling face with HTML5 canvas</h5>\n\n<p>The face looks very glum so give him a smile by using the <a href=\"https://developer.mozilla.org/en/Canvas_tutorial%3ADrawing_shapes#section_12\">quadratic bezier curve method</a>.</p>\n\n<pre>\n\n$cd.moveTo(270, 210);\n$cd.quadraticCurveTo(300, 250, 330, 210);\n$cd.stroke();\n\n</pre>\n\n<p>As always, moveTo is at the start. The measurements in the quadraticCurveTo, from left to right, are the first control point, the second control point, the x coordinate and the y coordinate. Just like using bezier curves in Illustrator, they are not easy to master.</p>\n\n<p>Added with the rest of the code it looks as so:</p>\n\n<pre>\n\nvar $canvas = document.getElementById(\"canvas-one\"),\n    $cd;\n\nif ($canvas.getContext) {\n\n    $cd = $canvas.getContext('2d');\n\n    $cd.strokeStyle = \"#000\";\n    $cd.fillStyle = \"#FFFF00\";\n    $cd.lineWidth = \"2\";\n\n    $cd.beginPath();\n    $cd.arc(300, 200, 50, 0, Math.PI * 2, false);\n    $cd.fill();\n\n    $cd.strokeStyle = \"#000\";\n    $cd.beginPath();\n    $cd.arc(300, 200, 50, 0, Math.PI * 2, false);\n    $cd.stroke();\n\n    $cd.moveTo(270, 210);\n    $cd.quadraticCurveTo(300, 250, 330, 210);\n    $cd.stroke();\n\n    $cd.fillStyle = \"#000\";\n\n    $cd.beginPath();\n    $cd.arc(285, 180, 5, 0, Math.PI * 2, false);\n    $cd.fill();\n\n    $cd.beginPath();\n    $cd.arc(315, 180, 5, 0, Math.PI * 2, false);\n    $cd.fill();\n\n} else {\n\n    alert(\"Your browser does not support HTML5 canvas. Use something decent, douchebag\");\n\n}\n\n</pre>\n\n\n<p>\n<img src=\"http://www.suburban-glory.com/images/canvas-three-face.jpg\" width=\"300\" height=\"199\" alt=\"smiling face created with HTML5 canvas\"></p>\n\n<h6>Create random multiple circles with HTML5 canvas</h6>\n\n<p>Next, create this:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/canvas-four-circle.jpg\" width=\"300\" height=\"206\" alt=\"circles created with HTML5 canvas\"></p>\n\n<p>It is 5,000 little circles of varying size and colour and uses the methods already detailed above:</p>\n\n<pre>\n\nvar $canvas = document.getElementById(&quot;canvas-one&quot;),\n    $cd;\n\nif ($canvas.getContext) {\n\n    $cd = $canvas.getContext(&#39;2d&#39;);\n\n    for (i = 0; i &lt;= 5000; i++) {\n\n        $cd.fillStyle = &quot;rgb(&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;)&quot;;\n\n        $cd.strokeStyle = &quot;rgb(&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;)&quot;;\n\n        $cd.lineWidth = &quot;2&quot;;\n\n        var $x = 150 + Math.floor(Math.random() * 150);\n        var $y = 150 + Math.floor(Math.random() * 150);\n        var $radius = 0.1 + Math.floor(Math.random() * 10);\n\n        $cd.beginPath();\n        $cd.arc($x, $y, $radius, 0, Math.PI * 2, true);\n\n        $cd.stroke();\n        $cd.fill();\n\n    }\n}\n\n</pre>\n\n<h6>Create random multiple spots with HTML5 canvas</h6>\n\n<p>Finally, introducing the essential JavaScript method for animation and motion, <a href=\"http://www.elated.com/articles/javascript-timers-with-settimeout-and-setinterval/\">setTimeout</a>. This instructs the browser to re-run the function after the number of milliseconds specified:</p>\n\n<pre>\n\nvar $canvas = document.getElementById(&#39;canvas-one&#39;),\n $cd;\nif ($canvas.getContext) {\n\n    function create_spots() {\n\n        $cd = $canvas.getContext(&#39;2d&#39;);\n\n        for (i = 0; i &lt;= 100; i++) {\n\n            $cd.fillStyle = &quot;rgba(&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 10) / 10 + &quot;)&quot;;\n\n            $cd.strokeStyle = &quot;rgba(&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 255) + &quot;,&quot; + Math.floor(Math.random() * 10) / 10 + &quot;)&quot;;\n\n            var $x = 10 + Math.floor(Math.random() * 491);\n\n            var $y = 10 + Math.floor(Math.random() * 491);\n\n            var $radius = 0.1 + Math.floor(Math.random() * 2);\n\n            $cd.beginPath();\n\n            $cd.arc($x, $y, $radius, 0, Math.PI * 2, true);\n\n            $cd.stroke();\n\n            $cd.fill();\n\n        } // End for loop\n        setTimeout(&#39;create_spots()&#39;, 1000);\n\n    } // end create spots functions\n    create_spots();\n\n</pre>\n\n<p>The above code creates 100 multi-coloured spots every 1000 milliseconds: <a href=\"http://www.testing-two.suburban-glory.com/\">check it out here</a>.</p>\n\n<p>The truth is that apart from the famous website for Arcade Fire's <a href=\"http://www.thewildernessdowntown.com/\">The Wilderness Down</a>, much of the current showcased HTML5 looks no more impressive than Java animation from 10 or 15 years ago. </p>\n\n<p>Of course, this will change. The Canvas API will develop, browsers will become faster and more capable and the community of users around this HTML5 feature will grow and become stronger.</p>\n\n<p>Hopefully, somebody will create a code library for canvas animation. Creating objects is cumbersome but straight forward; however, in order for the popularity of this particular HTML5 API to spread there needs to be easy access to animation features as you would find in jQuery or Mootools.</p>\n\n<p>If you are interested in finding out more about canvas then read the following guides:</p>\n\n<ul><li>\n<a href=\"http://www.ibm.com/developerworks/web/library/wa-html5canvas/index.html?cmp=dw&amp;cpb=dwwdv&amp;ct=dwgra&amp;cr=twitter&amp;ccy=zz&amp;csr=dehtml5canvas\">Create great graphics with the HTML5 canvas</a></li>\n\n<li><a href=\"https://developer.mozilla.org/en/Canvas_tutorial\">Mozilla canvas tutorial</a></li>\n\n<li><a href=\"http://www.storiesinflight.com/html5/\">Stories in Flight: HTML5 / CSS3 cheatsheet</a></li>\n\n<li><a href=\"http://waynecater.wordpress.com/2011/02/07/html5-canvas-animation-overview/\">HTML5 Canvas Animation Overview</a></li>\n\n<li><a href=\"http://www.html5canvastutorials.com/\">HTML5 Canvas Tutorials</a></li>\n\n<li><a href=\"http://diveintohtml5.org/canvas.html#divingin\">Lets Call it a Draw(ing Surface) – Dive Into HTML5</a></li>\n\n<li><a href=\"http://dev.opera.com/articles/view/html-5-canvas-the-basics/\">HTML5 canvas - the basics</a></li>\n\n<li><a href=\"http://answers.oreilly.com/topic/1929-how-to-use-the-canvas-and-draw-elements-in-html5/\">How to Use the Canvas and Draw Elements in HTML5</a></li>\n\n<li><a href=\"http://sixrevisions.com/html/canvas-element/\">HTML5 Canvas Element Guide</a></li>\n\n</ul>","categories":[],"uniqueId":"129777","url":"using-html5-canvas","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-one.jpg"},{"title":"Varnish, Google Analytics and Drupal","link":"http://www.suburban-glory.com/blog?page=134","author":"Andy Walpole","publishedDate":"1296663285000","contentSnippet":"If you are using Drupal on a virtual or dedicated server and you haven't yet installed Varnish then make sure you set aside ...","content":"<p>If you are using Drupal on a virtual or dedicated server and you haven't yet installed <a href=\"http://www.varnish-cache.org/\">Varnish</a> then make sure you set aside some time in the near future to do so. It is, by far, the most effective way of presenting a cache to anonymous users.</p>\n\n<p>The best guide for setting up Varnish can be found in the excellent Lullabot video <a href=\"http://drupalize.me/videos/drupal-performance-scalability\">Drupal Performance &amp; Scalability</a>. This video covers Varnish, Pressflow and PHP and MySQL optimisation techniques. However, although only released at the turn of the year, some of the information is now out of date. For instance, it recommends using a <a href=\"https://wiki.fourkitchens.com/display/PF/Replacement+init+script+for+memcached+on+CentOS+5\">replacement init script for memcached</a>; but the latest version of the Memcache Drupal module makes this script redundant.</p>\n\n<p>You can also find help on the <a href=\"http://groups.drupal.org/high-performance\">Drupal Performance group site</a>.</p>\n\n<p>One big issue with Varnish is that the presence of even a single cookie will mean the user bypasses the cached content. That is why it is essential to use <a href=\"http://pressflow.org/\">Pressflow</a> because it removes unnecessary session cookies that can be found in Drupal.</p>\n\n<p>If you follow the existing guides carefully then you shouldn't encounter too many problems installing Varnish, however trying to deal with Google Analytics cookies gave me a real headache.</p>\n\n<p>There is a <a href=\"https://wiki.fourkitchens.com/display/PF/Configure+Varnish+for+Pressflow\">Drupal-optimised Varnish configuration file script</a> that is possible to cut and paste into the default.vcl file; but getting to grips with it requires knowledge of the homegrown language that it uses, details of which can be <a href=\"http://www.varnish-cache.org/docs/2.1/\">found here</a>.</p>\n\n<p>In the script linked to above there is a line that strips Google Analytics cookies before it is processed, thus allowing the cache to proceed.</p>\n\n<pre>\n\n  // Remove has_js and Google Analytics cookies.\n  set req.http.Cookie = regsuball(req.http.Cookie, \"(^|;s*)(__[a-z]+|__utma_a2a|has_js)=[^;]*\", \"\");\n\n</pre>\n\n<p>I've tried the above code and a number of different variations that I found elsewhere on the web and I couldn't get the cache to work with Google Analytics. There is clearly something fundamental I'm misunderstanding about how the script processes cookies.</p>\n\n<p>However, there is an alternative to the standard JavaScript analytics code and which is not dependent on cookies.</p>\n\n<p>Because a number of mobile phone browsers don't accept JavaScript or cookies, in 2009 Google released a version that was non-JavaScript and non-cookie analytics code for sites aimed at this market.</p>\n\n<p>So what is good for mobile phones is good for Varnish. When you sign up and grab the code click on the advanced tab and then click on “a site built for a mobile phone” and from there use the code provided.</p>\n\n<p>As an aside, I use a couple of co.cc domains for sites in development. I couldn't get Google to recognise the tracking code when placed on co.cc domains. Has anybody else encountered this problem before? It is mickey mouse domain so I suppose there must be problems with the DNS.</p>","categories":[],"uniqueId":"129666","url":"varnish-google-analytics-drupal","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-two.jpg"},{"title":"Using PEAR Cache Lite with Drupal 6","link":"http://www.suburban-glory.com/blog?page=133","author":"Andy Walpole","publishedDate":"1296494734000","contentSnippet":"The PEAR repository is a well-used and well-loved library of reusable Open Source PHP code. Perhaps in recent years it has ...","content":"<p>The PEAR repository is a well-used and well-loved library of reusable Open Source PHP code. Perhaps in recent years it has fallen a bit out of favour and has become somewhat neglected; but there are some useful scripts to be found on there, with one of those being Cache Lite.</p>\n\n<p>This article describes how I implemented Cache Lite with Drupal CMS.</p>\n\n<p>One aspect of Drupal that can give users grief is its cache. The inbuilt Drupal cache is, although better than nothing, dependent on database storage and isn't the best solution. Easily the best solution for top notch Drupal performance is using Alternative PHP Cache (APC), Varnish HTTP accelerator and Memcache for the database. Most major Drupal sites use all or some of these three.</p>\n\n<p>It is unthinkable to run Drupal without a server-side cache as slow load times are detrimental to the user experience, especially for an eCommerce cart where there is a well-proven correlation between fast page load times and happy customers.</p>\n\n<p>However, if you are running Drupal on a shared server then these solutions are not going to be possible to use. There are a number of credible Drupal third-party cache modules such as Boost but I wanted to try Drupal with <a href=\"http://pear.php.net/package/Cache_Lite/redirected\">PEAR Cache Lite</a>.</p>\n\n<p>If I was to build a PHP site from scratch I would consider using PEAR Cache Lite which uses PHP output buffering with OOP.</p>\n\n<p>It's certainly one of the easiest solutions to implement. </p>\n\n<p>Lets take a look at Cache Lite implemented for caching various blocks on the standard Drupal page.tpl.php page:</p>\n\n\n<pre>\n\n&lt;?php\nrequire_once (drupal_get_path(&#39;module&#39;, &#39;cachelite&#39;) . &#39;/Cache/Lite/Output.php&#39;);\n\n$id = md5(&#39;http://&#39;.$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;REQUEST_URI&#39;]);\n\n$options = array(\n&#39;cacheDir&#39; =&gt; &#39;./sites/default/files/cache/&#39;,\n&#39;lifeTime&#39; =&gt; 3600,\n&#39;caching&#39; =&gt; TRUE\n);\n\n/* Set a key for this cache item */\n$cache = new Cache_Lite_Output($options);\n\nif ( !($cache-&gt;start($id . &#39;block-one&#39;)) ) {\n\t \n    \t     echo &#39;&lt;!-- Served From Cache block one: &#39;. date(&#39;l jS of F Y h:i:s A&#39;).&#39; --&gt;&#39;;\n\t\n\t\t\t\t ?&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;\n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;&lt;?php print $language-&gt;language ?&gt;&quot; lang=&quot;&lt;?php print $language-&gt;language ?&gt;&quot; dir=&quot;&lt;?php print $language-&gt;dir ?&gt;&quot;&gt;\n\n&lt;head&gt;\n  &lt;?php print $head; ?&gt;\n  &lt;title&gt;&lt;?php print $head_title; ?&gt;&lt;/title&gt;\n  &lt;?php print $styles; ?&gt;\n  &lt;?php print $scripts; ?&gt;\n  &lt;script type=&quot;text/javascript&quot;&gt;&lt;?php /* Needed to avoid Flash of Unstyled Content in IE */ ?&gt; &lt;/script&gt;\n&lt;/head&gt;\n&lt;body class=&quot;&lt;?php print $body_classes; ?&gt;&quot;&gt;\n  &lt;div id=&quot;page&quot;&gt;\n    &lt;div id=&quot;header&quot;&gt;\n      &lt;div id=&quot;logo-title&quot;&gt;\n\n        &lt;?php if (!empty($logo)): ?&gt;\n          &lt;a href=&quot;&lt;?php print $front_page; ?&gt;&quot; title=&quot;&lt;?php print t(&#39;Home&#39;); ?&gt;&quot; rel=&quot;home&quot; id=&quot;logo&quot;&gt;\n            &lt;img src=&quot;&lt;?php print $logo; ?&gt;&quot; alt=&quot;&lt;?php print t(&#39;Home&#39;); ?&gt;&quot; /&gt;\n          &lt;/a&gt;\n        &lt;?php endif; ?&gt;\n\t\t\n\t\t&lt;?php  \n\n$cache-&gt;end();\n\n\t}\n\n?&gt;\n\n&lt;p&gt;This will not be cached&lt;/p&gt;\n\n&lt;?php\nif ( !($cache-&gt;start($id . &#39;block-two&#39;)) ) {\n\t \n    \t     echo &#39;&lt;!-- Served From Cache block two: &#39;. date(&#39;l jS of F Y h:i:s A&#39;).&#39; --&gt;&#39;;\n\t\n\t\t\t\t ?&gt;\n\n        &lt;div id=&quot;name-and-slogan&quot;&gt;\n          &lt;?php if (!empty($site_name)): ?&gt;\n            &lt;h1 id=&quot;site-name&quot;&gt;\n              &lt;a href=&quot;&lt;?php print $front_page ?&gt;&quot; title=&quot;&lt;?php print t(&#39;Home&#39;); ?&gt;&quot; rel=&quot;home&quot;&gt;&lt;span&gt;&lt;?php print $site_name; ?&gt;&lt;/span&gt;&lt;/a&gt;\n            &lt;/h1&gt;\n          &lt;?php endif; ?&gt;\n\n          &lt;?php if (!empty($site_slogan)): ?&gt;\n            &lt;div id=&quot;site-slogan&quot;&gt;&lt;?php print $site_slogan; ?&gt;&lt;/div&gt;\n          &lt;?php endif; ?&gt;\n        &lt;/div&gt; &lt;!-- /name-and-slogan --&gt;\n      &lt;/div&gt; &lt;!-- /logo-title --&gt;\n\n      &lt;?php if (!empty($search_box)): ?&gt;\n        &lt;div id=&quot;search-box&quot;&gt;&lt;?php print $search_box; ?&gt;&lt;/div&gt;\n      &lt;?php endif; ?&gt;\n\n      &lt;?php if (!empty($header)): ?&gt;\n        &lt;div id=&quot;header-region&quot;&gt;\n          &lt;?php print $header; ?&gt;\n        &lt;/div&gt;\n      &lt;?php endif; ?&gt;\n\n    &lt;/div&gt; &lt;!-- /header --&gt;\n\t\n\t\t&lt;?php  \n\n$cache-&gt;end();\n\n\t}\n\n?&gt;\n\n&lt;p&gt;This will not be cached&lt;/p&gt;\n\n&lt;?php\nif ( !($cache-&gt;start($id . &#39;block-three&#39;)) ) {\n\t \n    \t     echo &#39;&lt;!-- Served From Cache block three: &#39;. date(&#39;l jS of F Y h:i:s A&#39;).&#39; --&gt;&#39;;\n\t\n\t\t\t\t ?&gt;\n\n    &lt;div id=&quot;container&quot; class=&quot;clear-block&quot;&gt;\n\n      &lt;div id=&quot;navigation&quot; class=&quot;menu &lt;?php if (!empty($primary_links)) { print &quot;withprimary&quot;; } if (!empty($secondary_links)) { print &quot; withsecondary&quot;; } ?&gt; &quot;&gt;\n        &lt;?php if (!empty($primary_links)): ?&gt;\n          &lt;div id=&quot;primary&quot; class=&quot;clear-block&quot;&gt;\n            &lt;?php print theme(&#39;links&#39;, $primary_links, array(&#39;class&#39; =&gt; &#39;links primary-links&#39;)); ?&gt;\n          &lt;/div&gt;\n        &lt;?php endif; ?&gt;\n\n        &lt;?php if (!empty($secondary_links)): ?&gt;\n          &lt;div id=&quot;secondary&quot; class=&quot;clear-block&quot;&gt;\n            &lt;?php print theme(&#39;links&#39;, $secondary_links, array(&#39;class&#39; =&gt; &#39;links secondary-links&#39;)); ?&gt;\n          &lt;/div&gt;\n        &lt;?php endif; ?&gt;\n      &lt;/div&gt; &lt;!-- /navigation --&gt;\n\n      &lt;?php if (!empty($left)): ?&gt;\n        &lt;div id=&quot;sidebar-left&quot; class=&quot;column sidebar&quot;&gt;\n          &lt;?php print $left; ?&gt;\n        &lt;/div&gt; &lt;!-- /sidebar-left --&gt;\n      &lt;?php endif; ?&gt;\n\n      &lt;div id=&quot;main&quot; class=&quot;column&quot;&gt;&lt;div id=&quot;main-squeeze&quot;&gt;\n        &lt;?php if (!empty($breadcrumb)): ?&gt;&lt;div id=&quot;breadcrumb&quot;&gt;&lt;?php print $breadcrumb; ?&gt;&lt;/div&gt;&lt;?php endif; ?&gt;\n        &lt;?php if (!empty($mission)): ?&gt;&lt;div id=&quot;mission&quot;&gt;&lt;?php print $mission; ?&gt;&lt;/div&gt;&lt;?php endif; ?&gt;\n\t\t\n\t\t\t&lt;?php  \n\n$cache-&gt;end();\n\n\t}\n\n?&gt;\n\n&lt;p&gt;This will not be cached&lt;/p&gt;\n\n&lt;?php\nif ( !($cache-&gt;start($id . &#39;block-four&#39;)) ) {\n\t \n    \t     echo &#39;&lt;!-- Served From Cache block four: &#39;. date(&#39;l jS of F Y h:i:s A&#39;).&#39; --&gt;&#39;;\n\t\n\t\t\t\t ?&gt;\n\n        &lt;div id=&quot;content&quot;&gt;\n          &lt;?php if (!empty($title)): ?&gt;&lt;h1 class=&quot;title&quot; id=&quot;page-title&quot;&gt;&lt;?php print $title; ?&gt;&lt;/h1&gt;&lt;?php endif; ?&gt;\n          &lt;?php if (!empty($tabs)): ?&gt;&lt;div class=&quot;tabs&quot;&gt;&lt;?php print $tabs; ?&gt;&lt;/div&gt;&lt;?php endif; ?&gt;\n          &lt;?php if (!empty($messages)): print $messages; endif; ?&gt;\n          &lt;?php if (!empty($help)): print $help; endif; ?&gt;\n          &lt;div id=&quot;content-content&quot; class=&quot;clear-block&quot;&gt;\n            &lt;?php print $content; ?&gt;\n          &lt;/div&gt; &lt;!-- /content-content --&gt;\n          &lt;?php print $feed_icons; ?&gt;\n        &lt;/div&gt; &lt;!-- /content --&gt;\n\n      &lt;/div&gt;&lt;/div&gt; &lt;!-- /main-squeeze /main --&gt;\n\n      &lt;?php if (!empty($right)): ?&gt;\n        &lt;div id=&quot;sidebar-right&quot; class=&quot;column sidebar&quot;&gt;\n          &lt;?php print $right; ?&gt;\n        &lt;/div&gt; &lt;!-- /sidebar-right --&gt;\n      &lt;?php endif; ?&gt;\n\n    &lt;/div&gt; &lt;!-- /container --&gt;\n\n    &lt;div id=&quot;footer-wrapper&quot;&gt;\n      &lt;div id=&quot;footer&quot;&gt;\n        &lt;?php print $footer_message; ?&gt;\n        &lt;?php if (!empty($footer)): print $footer; endif; ?&gt;\n      &lt;/div&gt; &lt;!-- /footer --&gt;\n    &lt;/div&gt; &lt;!-- /footer-wrapper --&gt;\n\n    &lt;?php print $closure; ?&gt;\n\n  &lt;/div&gt; &lt;!-- /page --&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\t&lt;?php  \n\n$cache-&gt;end();\n\n\t}\n\n?&gt;\n\n</pre>\n\n<p>At the top of the page the require_once is used to link to the Cache Lite PHP file that is in the module; cacheDir is the folder that needs to be manually created and where the cache files will be stored; lifeTime is the amount of seconds that the cache will be kept and caching can either be TRUE or FALSE.</p>\n\n<p>For a full list of parameters read the manual: <a href=\"http://pear.php.net/manual/en/package.caching.cache-lite.cache-lite.cache-lite.php\">http://pear.php.net/manual/en/package.caching.cache-lite.cache-lite.cache-lite.php</a></p>\n\n<p>From there the first cache block is built. The $id I used was a uniquely generated number for every individual page plus the block number for every section. I also added a time stamp so that it can be determined whether the section has been cached or not. In the example above the areas not being cached are clearly labelled. </p>\n\n<p>There is no mechanism for flushing the cache and that needs to be integrated with the administration section. The code below will do that:</p>\n\n<pre>\n\n&lt;?php\n// $ID$\n// Andy Walpole andy@suburban-glory.com January 23 2010\n\n// Sets permissions\nfunction cachelite_perm()\n{\n    return array(\n        &#39;cachelite module&#39;\n    );\n    \n}\n\n// Implementation of hook_menu()\nfunction cachelite_menu()\n{\n    $items = array();\n    \n    $items[&#39;admin/settings/cachelite&#39;] = array(\n        \n        // Title of module as it appears on the &lt;title&gt; tags\n        &#39;title&#39; =&gt; t(&#39;Cache Lite Settings&#39;),\n        \n        // Appears at the top of the screen\n        &#39;description&#39; =&gt; t(&#39;Configuration options for the Cache Lite module&#39;),\n        \n        // Function that is called when the page is loaded\n        &#39;page callback&#39; =&gt; &#39;cachelite_admin_form&#39;,\n        \n        // find more about access callback\n        &#39;access callback&#39; =&gt; &#39;user_access&#39;,\n        \n        &#39;access arguments&#39; =&gt; array(\n            &#39;administer site configuration&#39;\n        )\n        \n    );\n    \n    return $items;\n    \n}\n\n\nfunction cachelite_admin_form()\n{\n    // call the function below\n    return drupal_get_form(&#39;cachelite_form&#39;);\n    \n}\n\nfunction cachelite_form()\n{\n    $form = array();\n    \n    // This below creates a fieldset for the submit button\n    $form[&#39;fieldset-one&#39;] = array(\n        &#39;#type&#39; =&gt; &#39;fieldset&#39;,\n        &#39;#title&#39; =&gt; t(&#39;Flush the cache here&#39;)\n    );\n    \n    $form[&#39;fieldset-one&#39;][&#39;submit&#39;] = array(\n        // creates the submit button\n        &#39;#type&#39; =&gt; &#39;submit&#39;,\n        &#39;#value&#39; =&gt; &#39;Submit&#39;\n        \n    );\n    \n    return $form;\n    \n}\n\n\n// Presents message on successful completion of email\nfunction cachelite_form_submit($form_id, &amp;$form_state)\n{\n    $result = &quot;&quot;;\n    \n    require_once(drupal_get_path(&#39;module&#39;, &#39;cachelite&#39;) . &#39;/Cache/Lite/Output.php&#39;);\n    \n    $options = array(\n        &#39;cacheDir&#39; =&gt; &#39;./sites/default/files/cache/&#39;\n    );\n    $cache   = new Cache_Lite($options);\n    $cache-&gt;clean();\n    $result = true;\n    \n    \n    if ($result == true) {\n        drupal_set_message(t(&#39;The cache has been flushed&#39;));\n    } else {\n        drupal_set_message(t(&#39;There have been problems with the cache&#39;));\n    }\n    \n} // end cachelite_form_submit\n\n</pre>\n\n<p>The code above is standard Drupal module creation code and uses hook_perm() and hook_menu() as well as the Form API. In the admin section it is now possible to flush the cache with just a quick form submission.</p>\n\n<p>But this still leaves the problem of old pages from the cache being called despite user interaction. For instance, if you want to show a message after the user has submitted the form this will not be possible with the current set up because it will pull an old page from the cache.</p>\n\n<p>So I added a bit more code to the module file:</p>\n\n<pre>\n\nfunction cachelite_form_alter(&amp;$form, $form_state, $form_id)\n{\n    $key = $form_id;\n    \n    // Flushes the cahce on submitting a button - clumsy\n    \n    $form[&#39;#submit&#39;][] = &#39;cache_flush&#39;;\n    \n    switch ($key) {\n        \n        case &#39;uc_cart_view_form&#39;:\n            $form[&#39;checkout&#39;][&#39;#submit&#39;][] = &#39;cache_flush&#39;;\n            $form[&#39;update&#39;][&#39;#submit&#39;][]   = &#39;cache_flush&#39;;\n            break;\n            \n            \n    }\n    \n    \n} // end cachelit_form_alter\n\n\n// Presents message on successful completion of email\nfunction cache_flush()\n{\n    $result = &quot;&quot;;\n    \n    require_once(drupal_get_path(&#39;module&#39;, &#39;cachelite&#39;) . &#39;/Cache/Lite/Output.php&#39;);\n    \n    $options = array(\n        &#39;cacheDir&#39; =&gt; &#39;./sites/default/files/cache/&#39;\n    );\n    $cache   = new Cache_Lite($options);\n    $cache-&gt;clean();\n    \n} // end cache_flush\n\n</pre>\n\n<p>Whenever a user submits a form the cache is now flushed. It's a clumsy, primitive way of regenerating the cache but it is okay for now.</p>\n\n<p>So above is an implementation of PEAR Cache Lite for Drupal.</p>\n\n<p><em>BUT</em> testing the page rendering times with Apache benchmark it is apparent that there is hardly any gain by using Cache Lite with Drupal – at least, not the class I have used.</p>\n\n<p>So in conclusion Cache Lite is... useless with Drupal. LOL! Oh well, it doesn't hurt to try these things out.</p>\n\n<p>The full code including that of Cache Lite is in a module which you can <a href=\"http://www.suburban-glory.com/cachelite.zip\">download here</a>. Be my guest if you want to persist with this experiment.</p>\n\n<p>For more info on Cache Lite then read: <a href=\"http://kevin.vanzonneveld.net/techblog/article/speedup_your_website_with_cache_lite/\">Speedup your website with Cache_Lite</a> and <a href=\"http://articles.sitepoint.com/article/caching-php-performance\">Cache it! Solve PHP Performance Problems</a>.\n</p>","categories":[],"uniqueId":"129649","url":"using-pear-cache-lite-drupal-6","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-three.jpg"},{"title":"A Complete Guide to CSS Colour and Background Properties","link":"http://www.suburban-glory.com/blog?page=132","author":"Andy Walpole","publishedDate":"1296026831000","contentSnippet":"The background colour and images are the basics of any website build. The first section of this article, for CSS2.1, covers the ...","content":"<p>The background colour and images are the basics of any website build. The first section of this article, for CSS2.1, covers the more rudimentary aspects, while the second part covers CSS3 and in particular properties for multiple images for backgrounds, background-origin, background-clip and background-size.</p>\n\n<h3>CSS 2.1 colour and background properties</h3>\n\n<p>Level 2.1 CSS colour and background is the nuts and bolts of any website build. If you aren't familiar with any of these then practice and practice until you are and then move on to CSS3 later.</p>\n\n<p><strong>color</strong></p>\n\n<p>For newcomers this can an early stumbling block because although color can refer to any foreground colour of an element it is always used for the color of text only. </p>\n\n<p>An example being:</p>\n\n<pre>\n\np {\ncolor: #008000;\n}\n\n</pre>\n\n<p>The above would change the text in the paragraph (stipulated by the p selector) to green. </p>\n\n<p>There are several different ways of specifying colour in CSS and they are HEX, RGB, RGBA, HSA, HSLA and <a href=\"http://www.w3schools.com/css/css_colornames.asp\">set CSS color names</a>.</p>\n\n<p>This post does not concern itself with the different web colour values but the official W3C guide to colour units is here: <a href=\"http://www.w3.org/TR/css3-iccprof#colorunits\">http://www.w3.org/TR/css3-iccprof#colorunits</a>. As with all W3C documents it is a dull read – if you know of a worthy article on this subject then post a link in the comments section.</p>\n\n<p>Those not familiar with colour on the web should familiarise themselves with HEX and RGB (the same values but two different formats) first and then pay closer attention to the remainders listed above later.</p>\n\n<p>Newbies please also note the American English spelling of color (compared to British standardised colour). It has to be spelled color in your stylesheet.</p>\n\n<p><strong>background-color</strong></p>\n\n<p>Following on from changing the colour of text here is how you change the colour of the background. An example being:</p>\n\n<pre>\n\n#example {\nbackground-color : #000000;\n}\n</pre>\n\n<p>This would change the background of the HTML element on the page labelled with the id of example to black. The notation is a HEX value.</p>\n\n<p><strong>background-image</strong></p>\n\n<p>Images are placed into a stylesheet by using the URL path, for instance:</p>\n\n<pre>\n\n#example {\nbackground-image : url(images/background-portrait.jpeg);\n}\n\n</pre>\n\n<p>This places the JPEG called “background-potrait” into the example id. </p>\n\n<p>The path can be absolute or relative. To explain, this is an absolute path: http://www.suburban-glory.com/images/main-icon.png, while this is a relative path: /images/main-icon.png/. It means relative to the page you are currently on.</p>\n\n<p><strong>background-position</strong></p>\n\n<p>Once you have specified an image to be used for a background then you may need to position it. This is done on the X and Y coordinates. </p>\n\n<pre>\n\n#example {\nbackground-image : url(images/background-portrait.jpeg);\nbackground-position : right bottom;\n}\n\n</pre>\n\n<p>This places the image in the bottom right-hand corner. A background position of “left top” would place the image in the top left-hand corner.</p>\n\n<p>The total list of usable keywords are:</p>\n\n<p>left top<br>\nleft center<br>\nleft bottom<br>\nright top<br>\nright center<br>\nright bottom<br>\ncenter top<br>\ncenter center<br>\ncenter bottom </p>\n\n<p>These should be self-explanatory.</p>\n\n<p>The values can also be specified as pixels or percentages:</p>\n\n<pre>\n\n#example {\nbackground-image : url(images/background-portrait.jpeg);\nbackground-position : 40px 50px;\n}\n\n</pre>\n\n<p>The above places the image 40px from the left and 50px from the top.</p>\n\n<p><strong>background-repeat</strong></p>\n\n<p>Unless you specify otherwise any background image is automatically repeated both along its X and Y coordinates until the element is filled.</p>\n\n<p>You can take control of that by using the background-repeat property:</p>\n\n<pre>\n\n#example {\nbackground-image : url(images/background-portrait.jpeg);\nbackground-position : right bottom;\nbackground-repeat : no-repeat;\n}\n\n</pre>\n\n<p>Using the same declaration block as previous we have now made sure that the image appears only once.</p>\n\n<p>Simple, yes? Changing the value of “no-repeat” to “repeat-x” or “repeat-y” means that the image can be repeated along either the x or y axis respectively.</p>\n\n<p><strong>background-attachment</strong></p>\n\n<p>Out of all of the above this is probably the least used but can provide an impressively stylistic touch. All background images scroll with the content, but be declaring a fixed background attachment the image remains static no matter the scrolling.</p>\n\n<pre>\n\nbody (\nbackground-image : url(images/background-portrait.jpeg);\nbackground-repeat : no-repeat;\nbackground-attachment:fixed; \n}\n\n</pre>\n\n<p>The above will fix an image to the body of an html page. Note that background-attachment does not work in Internet Explorer 6.</p>\n\n<p>As a live example see <a href=\"http://www.salon-one.suburban-glory.com/\">this website I created here</a> – the fixed background is on #wrapper.</p>\n\n<p>It is worth noting that all of the above five properties can be shortened onto one line; however, this isn't an article about CSS shorthand and for that I would recommend Dustin Diaz's feature <a href=\"http://www.dustindiaz.com/css-shorthand/\">CSS Shorthand Guide</a> or Shane Jeffers item <a href=\"http://www.threestyles.com/tutorials/css-shorthand-guide/\">CSS Shorthand – A Guide to Cleaner and Faster Coding</a>.</p>\n\n<h4>CSS3 colour and background properties</h4>\n\n<p>These are now regarded as advanced features of CSS, but very soon – when all the browsers catch up with CSS3 specifications – they will be regarded as basic to a designer as 2.1 is now.</p>\n\n<p><strong>background (multiple images)</strong></p>\n\n<p>With CSS2.1 it is only possible to add one background image for every element, but with CSS3 it is now possible to add as many images as you desire. </p>\n\n<p>The only way this could be done before was to add extra HTML markup but now it is possible to do this as so:</p>\n\n<pre>\n\n#example {\nbackground : url(images/picture-one.jpg), url(images/picture-two.jpg), url(images/picture-three.jpg);\n}\n\n</pre>\n\n<p>Just list the images and separate them with a comma.</p>\n\n<p>I cannot begin to tell you just what a bonus this is when it comes to web design. It really does open up new aesthetic doors to explore. </p>\n\n<p>The bad news? It doesn't work in the legacy browsers, namely Internet Exploer 6, 7 and 8. The good news? Use <a href=\"http://css3pie.com/\">CSS3 Pie</a> for a solution to this problem. I bless thee CSS3 Pie developer, <a href=\"http://twitter.com/lojjic\">Jason Johnston</a>.</p>\n\n<p><strong>background-size</strong></p>\n\n<p>This, as the name suggests, changes the background image size; and, like much of CSS3, lacks IE support (apart from version 9).</p>\n\n<p>However, this CSS3 property has been receiving a lot of attention and is being widely adopted despite of the usual IE issues.</p>\n\n<p>Although Webkit (Safari and Chrome) have supported this property for sometime; Firefox 3.6, launched in January 2010, added it to their browser through the usual Mozilla prefix.</p>\n\n<p>There are two basic values that can be used: cover and contain.</p>\n\n<p>They are written like so:</p>\n\n<pre>\n\n#example {\nbackground : url(images/picture-one.jpg);\n-moz-background-size : cover;\nbackground-size : cover;\n}\n\n</pre>\n\n<p>(-moz-background-size is required for versions of Firefox less than 4). </p>\n\n<p>This stretches the image to cover the entire container, in this case the example id.</p>\n\n<p>To stretch the image but keep it's proportions then use contain instead:</p>\n\n<pre>\n\n#example {\nbackground : url(images/picture-one.jpg);\n-moz-background-size : contain;\nbackground-size : contain;\n}\n\n</pre>\n\n<p>But the fun doesn't stop there. It is also possible to specify percentages and pixels.</p>\n\n<p>This would change the dimensions of the image to 75% of the size of the container (not shrinking to 75% of the original size!)</p>\n\n<pre>\n\n#example {\nbackground : url(images/picture-one.jpg);\n-moz-background-size : 75%;\nbackground-size : 75%;\n} \n\n</pre>\n\n<p>It is also possible to use pixels:</p>\n\n<pre>\n\n#example {\nbackground : url(images/picture-one.jpg);\n-moz-background-size : 75px;\nbackground-size : 75px;\n} \n\n</pre>\n\n<p>The above changes the size of image to 75px square.</p>\n\n<p>This property also allows the coder to change the proportions on its X and Y axis, so “background-size: 75px 100px” would create a rectangle shape.</p>\n\n<p>An example of background-size in action is <a href=\"http://www.carpentry-one.suburban-glory.com/\">this website here</a>.</p>\n\n<p>If you look at the central wrapper area (in non-IE browsers) then that is actually a 12 pixel square cut from the image in the left hand corner. I gave it a slight opacity and then used the background-size cover value to stretch it across the entire div.</p>\n\n<p>For further reading take a look at A List Apart's seminal article <a href=\"http://www.alistapart.com/articles/supersize-that-background-please/\">Supersize that Background, Please!</a></p>\n\n<p><strong>background-origin / background-clip</strong></p>\n\n<p>I've grouped these two properties together as the same keyword values are used for them both.</p>\n\n<p>To recap, we have learned how to add an image, position it, repeat it (or not) and even stretch it in various way. Background-origin / background-clip is concerned with how the background image relates to the padding and border of the container it is within.</p>\n\n<p>As way of a visual representation I'm going to nick the diagram from <a href=\"http://www.css3.info/preview/background-origin-and-background-clip/\">the CSS3.info page</a>:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/background-origin-and-clip.gif\" width=\"453\" height=\"300\" alt=\"background origin and clips\"></p>\n\n<p>Compared to background-size, these are only capable of relatively minor design changes.</p>\n\n<p>If you wish to check cross-browser issues with CSS backgrounds then take a look at the table on <a href=\"http://www.quirksmode.org/css/background.html\">Quirksmode</a>.</p>","categories":[],"uniqueId":"129602","url":"complete-guide-css-colour-background-properties","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-four.jpg"},{"title":"A Complete Guide to CSS Combinators","link":"http://www.suburban-glory.com/blog?page=131","author":"Andy Walpole","publishedDate":"1295434469000","contentSnippet":"Ever since the 1990s there has been a concerted attempt in web design to use CSS as a means to separate presentation from ...","content":"<p>Ever since the 1990s there has been a concerted attempt in web design to use CSS as a means to separate presentation from content.</p>\n\n<p>Often it was the case that web designers were adding extra classes or ids to page elements just so that they could use CSS to alter their design; but with CSS 2, and especially in the ongoing version 3, the push has been towards minimising HTML markup.</p>\n\n<p>CSS combinators assist in this quest but it isn't just about following <a href=\"http://en.wikipedia.org/wiki/Separation_of_presentation_and_content\">theoretical aesthetics</a>, but also about making you a faster, more efficient web designer.</p>\n\n<p>They may be slightly confusing at first, but practice makes perfect so try to incorporate them into your designs wherever possible.</p>\n\n<p>Like much of the other CSS I have been highlighting in this series of guides, they aren't used as widely as they should be. As <a href=\"http://www.smashingmagazine.com/2010/06/10/50-new-useful-css-techniques-tools-and-tutorials/\">Vitaly Friedman of Smashing Magazine wrote</a>:</p>\n\n<blockquote><p>Combinators are an overlooked part of CSS development. Most juniors don’t even know they are making use of them, others are unaware of their full potential and let’s face it, even most professionals don’t really know about the ins and outs of css combinators.</p></blockquote>\n\n<p>It's worth noting that there is total support for these CSS properties from Internet Explorer version 7 onwards and partial support in IE6.</p>\n\n<h3>CSS 2.1 Combinators</h3>\n\n<p><strong>E + F / Adjacent Sibling</strong></p>\n\n<p>Before explaining the finer points of this CSS code lets present a problem first and then bring the adjacent sibling property in as the solution.</p>\n\n<p>Example: You want to style the first paragraph under each heading and the first paragraph only. Lets say you want to change the first letter in the paragraph.</p>\n\n<p>You could just add an extra class to this paragraph, but has been stated before the aim is to minimise HTML markup.</p>\n\n<p>Here comes the adjacent sibling combinator to the rescue:</p>\n\n<pre>\n\n#content h1 + p:first-letter{\nfont-size : 2em;\ncolor : red;\nfont-style : italic;\n}\n\n</pre>\n\n<p>And this is how it would look:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/css-combinators.jpg\" width=\"540\" height=\"298\" alt=\"CSS cobminators\"></p>\n\n<p>Without the + sign then no design changes would be made as p is not a straight descendent of h1.</p>\n\n<p>More practical examples of uses for the adjacent sibling can be found here: <a href=\"http://css-tricks.com/fine-use-for-the-adjacent-sibling-selector/\">Fine Use for the Adjacent Sibling (“+”) Selector</a>, <a href=\"http://meyerweb.com/eric/articles/webrev/200007a.html\">The Adjacent-Sibling Selector</a> and <a href=\"http://acquia.com/blog/between-lines-adjacent-sibling-selector-technique\">In Between the Lines: The adjacent sibling selector technique</a>.</p>\n\n<p><strong>E &gt; F / Child</strong></p>\n\n<p>The child selector is probably the most complicated of all four to understand. It involves having to climb up and down the DOM tree and probably even falling off now and again as you become lost!</p>\n\n<p>Lets take a look at inheritance. Whenever you place HTML onto a page it is always the child of another page element.</p>\n\n<p>Take a look at this simple makup.</p>\n\n<pre>\n\n&lt;body&gt;\n\n&lt;div id=”wrapper”&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n\n</pre>\n\n<p>The wrapper is a <em>child</em> of the body. The HTML order starts from the body (as on every HTML page) and in this example then moves on to the #wrapper.</p>\n\n<p>With a line of text added:</p>\n\n\n<pre>\n\n&lt;body&gt;\n\n&lt;div id=”wrapper”&gt;\n&lt;p&gt;This is a line of text&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n\n</pre>\n\n<p>The paragraph is a <em>child</em> of the wrapper while the wrapper is a <em>child</em> of the body but a <em>parent</em> to the paragraph. </p>\n\n<p>Take note of the terminology <em>parent</em> and <em>child</em>. They are used a lot in JavaScript libraries like jQuery as well as in CSS.</p>\n\n<p>However, the paragraph is not a child of the body, it is a <em>descendent</em>.</p>\n\n<p>The daughter is the child of the mother, but if the daughter then has a baby of her own then that baby is a descendent or the original mother, not her child.</p>\n\n<p>Here is an example of child selectors in action:</p>\n\n<pre>\n\n&lt;div id=&quot;example&quot;&gt;\n &lt;ul&gt;\n  &lt;li&gt;List item 1&lt;/li&gt;\n &lt;/ul&gt;\n &lt;div&gt;\n  &lt;ul&gt;\n   &lt;li&gt;List item nested\n    &lt;ul&gt;\n     &lt;li&gt;Nested list item&lt;/li&gt;\n    &lt;/ul&gt;\n   &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n\n#example &gt; ul &gt; li {\nfont-weight : bold\n}\n\n</pre>\n\n<p>The only way of changing “list item 1” without adding a class is to use the child selector.</p>\n\n<p>Confused? Well I never promised it would be easy. It is logical but it's an issue that needs explaining from different angles. Read CSS don Eric Meyer's article from 2000, <a href=\"http://meyerweb.com/eric/articles/webrev/200006b.html\">The Child Selector</a>, for a different guide.</p>\n\n<p>To sum up: child selectors allow pin point precision of elements on a page while at the same time minimising markup, although if you have clean, semantic HTML you should only need to use child selectors infrequently.</p>\n\n<p>Perhaps if you regularly use child selectors you may like to post up an example and an explanation of why you feel it is the best solution for that particular purpose.</p>\n\n<p><strong>E F / Descendant</strong></p>\n\n<p>From the hard to the easy. This is actually from CSS1 released in 1996.</p>\n\n<p>Lets take a look at some code:</p>\n\n<pre>\n\n&lt;body&gt;\n\n&lt;div id=”wrapper”&gt;\n\n&lt;div id=”content”&gt;\n&lt;p&gt;This is a line of text in the wrapper&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div id=”footer”&gt;\n&lt;p&gt;This is a line of text in the wrapper&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/div&gt;\n\n&lt;/body&gt;\n\n</pre>\n\n<p>In order to highlight the text content div then you would write:</p>\n\n<pre>\n\n#content p {\nfont-style: bold;\n}\n\n</pre>\n\n<p>P is a descendent of #wrapper.</p>\n\n<p>This would highlight the text in the content div too:</p>\n\n<pre>\n\n#wrapper p{\nfont-style : bold;\n}\n\n</pre>\n\n<p>But also in the #footer as p is a descendent of #wrapper, #content and #footer.</p>\n\n<p>As a rule, in webdesign you keep your list of descendent selectors as short as possible. It makes it easier to edit later on but it is also more efficient for browser speed; read the Mozilla article <a href=\"https://developer.mozilla.org/en/Writing_Efficient_CSS\">Writing Efficient CSS for use in the Mozilla UI</a>. Also don't forget to separate the selectors with white space.</p>\n\n<p>If you are having trouble understanding the concepts discussed here then read the Sitepoint articles called <a href=\"http://reference.sitepoint.com/css/inheritance\">Inheritance</a> and <a href=\"http://reference.sitepoint.com/css/csslayout\">CSS Layout and Formatting</a>.</p>\n\n<h4>CSS3 Combinators</h4>\n\n<p><strong>E ~ F / General Sibling</strong></p>\n\n<p>If you understand adjacent siblings (E + F) then you'll have no problem comprehending this.</p>\n\n<p>See the following code:</p>\n\n<pre>\n\nh2 ~ p {\ncolor : #ffffff;\n}\n\n</pre>\n\n<p>This changes the colour of <em>every</em> sibling paragraph under the h2 header.</p>\n\n<p>Again, to understand this CSS correctly you need to have an appreciation of inheritance and the DOM tree which is why I have linked out several times in this post.</p>\n\n<p>It's not just efficient CSS though that requires a working knowledge of these types of CSS properties but also JavaScript libraries such as Dojo and jQuery that use <a href=\"http://sizzlejs.com/\">Sizzle</a>. Learning CSS combinators will also help you become a better equipped JavaScript user too – bonus!\n</p>","categories":[],"uniqueId":"129543","url":"complete-guide-css-combinators","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-five.jpg"},{"title":"A Complete Guide to CSS Functions - Part One","link":"http://www.suburban-glory.com/blog?page=130","author":"Andy Walpole","publishedDate":"1294831518000","contentSnippet":"Yes, you read that correctly – functions. Commonly associated with programming languages, they are also a feature of CSS. Apart ...","content":"<p>Yes, you read that correctly – functions. Commonly associated with programming languages, they are also a feature of CSS. Apart from url(), they were rarely used in CSS2; but they are being widely deployed in CSS3.</p>\n\n<p>CSS functions are values used in conjunction with certain types of properties, as will be explained.</p>\n\n<h3>CSS 2.1 functions</h3>\n\n<p><strong>url()</strong></p>\n\n<p>The url() is used with either the background, list-style-image or border-image properties. They enable the CSS coder to bring an image into the page for either list or background purposes. You may well have been using this without referring to it as a function.</p>\n\n<p>An example:</p>\n\n<pre>\n#wrapper {\nbackground : url(images/photo-one.jpg);\n}\n</pre>\n\n<p>The path in url() can be either absolute or relative and is case sensitive.</p>\n\n<p><strong>Counter()</strong></p>\n\n<p>As you are aware it is possible to have two different sort of HTML lists: ordered (ol) and unordered (ul).</p>\n\n<p>For instance, the following CSS code will produce an ordered numbered list:</p>\n\n<pre>\n&lt;ol&gt;\n    &lt;li&gt;List item one&lt;/li&gt;\n    &lt;li&gt;List item two&lt;/li&gt;\n    &lt;li&gt;List item three&lt;/li&gt;\n&lt;/ol&gt;\n</pre>\n\n<p>However, it may be desirable to create a numbered list on block or inline level elements such as headers or paragraphs.</p>\n\n<p>This has particular relevance to academically presented work which requires a very tight structure but one that is easy to navigate and read.</p>\n\n<p>Of course, it is possible to just manually add numbers to the text in the HTML, but this method allows the web designer to add numbers dynamically.</p>\n\n<p>In order to use the counter function you must use the following three properties: counter-reset, counter-increment and content.</p>\n\n<p>Here is the code for number number every single paragraph on a page:</p>\n\n<pre>\nbody {\n\tcounter-reset: paras 0;\n}\n</pre>\n\n<p></p>\n\n<pre>\np:before {\n\tcounter-increment: paras 1;\n\tcontent: \"New Paragraph: \" counter(paras, decimal) \": \";\n}\n</pre>\n\n<p>To explain the above code, counter-reset always comes first. It is given a name, in this case paras with the subsequent number stipulating that the first occurrence is the number one.</p>\n\n<p>Counter-increment calls the previously named counter-reset and again declares a starting number.</p>\n\n<p>Lastly, in the content property is placed the counter() function. The first variable is the name of the counter-reset being called, the second is the numbering system and which corresponds exactly with the <a href=\"http://www.w3schools.com/css/pr_list-style-type.asp\">options for list-style-type</a>.</p>\n\n<p>Surely though there can't be an easier CSS syntax for an incremental increase? This feature is common in all programming and development languages with its use in PHP being merely the addition of two plus signs to a variable: $variable++</p>\n\n<p>There are two detailed articles on the counter() function published on the web. Louis Lazaris has written a very comprehensive blog post, <a href=\"http://www.impressivewebs.com/css-counter-increment/\">CSS Counters: counter-increment and Friends</a>, while David Storey at Opera has written <a href=\"http://dev.opera.com/articles/view/automatic-numbering-with-css-counters/\">Automatic numbering with CSS Counters</a>.</p>\n\n<p><strong>attr()</strong></p>\n\n<p>There is a commonly used jQuery function called attr(), and, like its jQuery namesake, the CSS function refers to a HTML attribute.</p>\n\n<p>Take a look at the code for this link:</p>\n\n<pre>\n&lt;a href=&quot;www.suburban-glory.com&quot; title=&quot;This is the title attribute for this link&quot;&gt; Nullam varius convallis accumsan&lt;/a&gt;. \n</pre>\n\n<p>The above has two attributes, the href and the title.</p>\n\n<p>If you are unsure what a HTML attribute is then read the W3Schools guide: <a href=\"http://www.w3schools.com/html/html_attributes.asp\">http://www.w3schools.com/html/html_attributes.asp</a></p>\n\n<p>Attr() in CSS is a means of content generation and can only be used with the content property in conjunction with the :before and :after pseudo-elements. (Functions,  pseudo-elements and the content property – ouch, who said CSS was easy?!)</p>\n\n<p>As the fundamental idea of CSS was to separate presentation and content it may seem a little strange that there is some deliberate muddling between the two, but attr() does have a few useful purposes.</p>\n\n<p>Used with the print media declaration, like below, it allows the full URL to be revealed when a page is printed.</p>\n\n<pre>\n@media print{\n       a:after{content:\" (\" attr(href) \") \"}\n}\n</pre>\n\n<p>This would create the following:</p>\n\n<p><img src=\"http://www.suburban-glory.com/images/functions-image-one.jpg\" width=\"544\" height=\"148\" alt=\"example of using the att() function\"></p>\n\n<p>As the above testifies this is useful CSS code as it allows your visitor to take note of full link details when they print off a page (rather than just “click here”).</p>\n\n<p>In the same fashion, they can also be used with HTML accessibility aids such as abbr and  acronyms. W3C accessibility guidelines recommend the use of these HTML tags when using abbreviations or  acronyms in the text. As an example, UN is an abbreviation of United Nations while an acronym, although being similar, can also be used for informal purposes – ASAP is an acronym of as soon as possible.</p>\n\n<p>Take a look at the following use of abbr:</p>\n\n<pre>\n &lt;p&gt;The &lt;abbr title=&quot;World Health Organization&quot;&gt;WHO&lt;/abbr&gt; was founded in 1948.&lt;/p&gt;\n</pre>\n\n<p>On the screen the title is not immediately visible – it is there as an aid for screen readers. </p>\n\n<p>By using the print media query it is possible to print out the full title and not just the abbreviation:</p>\n\n<pre>\n@media print{\n       abbr:after{\ncontent:\" (\" attr(title) \") \";\n}\n</pre>\n\n<p>Note the concatenation in the string to allow the addition of brackets.</p>\n\n<p>One other possible use is by allowing the URL to be revealed when the hovering over the link.</p>\n\n<pre>\na:hover:after{\ncontent:\" Page: (\" attr(href) \") \";\n}\n</pre>\n\n<p>Hover over any link in this blog post as a demonstration.</p>\n\n<p>As with most advanced CSS, Internet Explorer support below version 9 is poor or non-existent so don't expect your adventures in attr() to shine in these legacy browsers.</p>\n\n<p>It is planned that the use of the attr() function will be dramatically expanded in CSS3 by allowing it to be used with other properties other than content.</p>\n\n<h4>CSS 3 functions</h4>\n\n<p><strong>calc()</strong></p>\n\n<p>Get ready to throw out your calculators because soon CSS will enable you to add maths sums to your stylesheets, but it's more than a simple 1+1 feature as will be explained.</p>\n\n<p>The Webkit developers have been working on implementing calc() in their engine since 2007 but at the time of writing there are still no plans to incorporate it into a release. I have no knowledge of programming in C but I imagine it must be quite a nightmare to create due to its complexity.</p>\n\n<p>calc() is present in IE9 beta but there isn't a full implementation as stipulated by the W3C.  Unfortunately they haven't added a browser-specific prefix that other browsers do as a matter of routine for experimental CSS. calc() on Firefox can be accessed with -moz-calc() from version 4 onwards. </p>\n\n<p>calc() is particularly useful when it comes to fluid layouts and which are currently undergoing a revival due to design for mobile, and as Internet Explorer is an irrelevancy on the mobile platform designers will soon be free to use this CSS function without worrying about degradation for the legacy browsers.</p>\n\n<p>Here is typical CSS code for a fixed width HTML form layout</p>\n\n<pre>\nform {\nfont-size : 1.4em;\nborder : 1px solid #000;\npadding : 5px;\nwidth : 465px;\n}\nlegend {\ndisplay : block;\npadding-bottom : 9px;\n}\nlabel {\nwidth : 200px;\nfloat : left;\ndisplay : block;\nmargin-bottom : 9px;\n}\ninput {\nwidth : 200px;\nfloat : left;\ndisplay : block;\nmargin-bottom : 9px;\n}\ntextarea {\nmargin-bottom : 9px;\nwidth : 455px;\n}\ninput[type=\"submit\"] {\nwidth : auto;\nclear : both;\n}\n</pre>\n\n<p>Using calc() as below is how a form could be coded for a fluid layout:</p>\n\n<pre>\nform {\nfont-size : 1.4em;\nborder : 1px solid #000;\npadding : 5px;\nmargin : 0 10px;\nwidth: -moz-calc(50% - 20px);\n}\nlegend {\ndisplay : block;\npadding-bottom : 9px;\n}\nlabel {\nwidth : -moz-calc(50% - 10px);\nmargin-right : 10px;\nfloat : left;\ndisplay : block;\nmargin-bottom : 9px;\n}\ninput {\nwidth : -moz-calc(50% - 10px);\nfloat : left;\ndisplay : block;\nmargin-bottom : 9px;\n}\ntextarea {\nmargin-bottom : 9px;\nwidth : -moz-calc(100% - 10px);\n}\ninput[type=\"submit\"] {\nwidth : auto;\nclear : both;\n}\n</pre>\n\n<p>Note the addition of the padding and margin measurements in the functions. Potentially, relative or absolute units such as centimeters, pixels or percentages will be able to used, while -moz-calc() allows for standard mathematical operators +, -, * and /.</p>\n\n<p>Admittedly, the use of CSS3 box-sizing in the above example could also achieve the same results but it only uses calc() at its most basic level. </p>\n\n<p>I can guarantee that you will see a multitude of articles written about this function in the coming years. It will be particularly useful when a number of new CSS3 units such as viewport height and width come into play, and when the use of the attr() function is expanded upon.</p>\n\n<p><a href=\"http://lists.w3.org/Archives/Public/www-style/2010Sep/0356.html\">François Remy on the W3C mailing list</a> gives some examples of the likely possible uses of calc() once CSS3 matures:</p>\n\n<p>Calculating the width of a 'progress' element dynamically:</p>\n\n<pre>\n#example {\nwidth: calc(100% * (attr(value) - attr(min)) / (attr(max) – attr(min))\n}\n</pre>\n\n<p>Ensuring a fixed element will be visible:</p>\n\n<pre>\n#example {\nposition: fixed;\nheight: 25px; width: 300px;\ntop: calc(min(500px, 1vh-25px));\nleft: calc(min(30px, 1wh-300px));\n}\n</pre>\n\n<p>The downside of calc() is that while making the job of the web designers easier it will also make the syntax more complicated. It will be an absolute necessity to create well-commented style sheets so as to make your co-workers life easier as the origins of measurements will not necessarily be obvious.</p>\n\n<p>As long as Pesto (Opera) and Webkit (Chrome and Safari) quickly catch up with Gecko (Firefox) I can see the calc() function being widely used for mobile design by the end of 2011. It could be used for desktop design as well as it is easy to create a fallback for Internet Explorer without using conditional comments.</p>\n\n<p>Keep an eye out on how quickly the main browsers are implementing CSS3 by regularly checking the <a href=\"http://en.wikipedia.org/wiki/Comparison_of_layout_engines_%28Cascading_Style_Sheets%29\">Comparison of layout engines page</a> on Wikipedia.</p>\n\n<p><strong>max() and min()</strong></p>\n\n<p>Lastly, these functions are part of the CSS3 Values and Units module draft dated August 27, 2010 but it's not clear, at the time of writing, whether they will be incorporated into Firefox 4 or any other browser.</p>\n\n<p><strong>Part Two</strong></p>\n\n<p>Part two of this guide will cover the functions for 2-D and 3-D transforms.</p>","categories":[],"uniqueId":"129483","url":"complete-guide-css-functions---part-one","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-six.jpg"},{"title":"Jquery plugin Little Colour Boxes is launched","link":"http://www.suburban-glory.com/blog?page=129","author":"Andy Walpole","publishedDate":"1290973234000","contentSnippet":"Suburban Glory Web Design is proud to announce the release of jQuery plugin Little Colour Boxes and our first contribution to ...","content":"<p>Suburban Glory Web Design is proud to announce the release of jQuery plugin Little Colour Boxes and our first contribution to one of the web's must dynamic and worthy Open Source projects.</p>\n\n<p>The plugin creates a gentle but aesthetically sharp animation over an image of your choice (but not background image) that plays for a few seconds every time the page is loaded.</p>\n\n<p>A download link is at the bottom of this article.</p>\n\n<p>For an example of the animation see this page here: <a href=\"http://www.little-colour-boxes.suburban-glory.com/\">http://www.little-colour-boxes.suburban-glory.com/</a></p>\n\n<p>Another example is here: <a href=\"http://www.cleaner-one.suburban-glory.com/\">http://www.cleaner-one.suburban-glory.com/</a></p>\n\n<p>It is easy to set up.</p>\n\n<p>Firstly link to the file in the header as you would any other script:</p>\n\n<pre>\n&lt;script src=&quot;pathhere/jquery-littlecolourboxes.js&quot;&gt;&lt;/script&gt;\n</pre>\n\n<p>Then give the image you want to animate an ID of “image-boxes” like so:</p>\n\n<pre>\n&lt;img src=&quot;images/nice_pattern_islamic.gif&quot; width=&quot;425&quot; height=&quot;425&quot; id=&quot;image-boxes&quot;&gt;\n</pre>\n\n<p>And in the header call the function as you usually do with jQuery and add the colour of your choice:</p>\n\n<pre>\n&lt;script&gt;\n$(&quot;image-boxes&quot;).colboxes(&quot;#fff&quot;);\n&lt;/script&gt;\n</pre>\n\n<p>At the moment the script is divided into 7x7 boxes. The next release will allow control of the number of boxes via a function parameter.</p>\n\n<p>The animation does not work in Internet Explorer 6.</p>\n\n<p>It is released under the GNU General Public License (GPL) Version 2.</p>\n\n<p>We'll set up jQuery page and a an appropriate control system in the next couple of days, but for now you can download it from <a href=\"http://www.suburban-glory.com/little-colour-boxes-jquery-plugin.rar\">here</a>.</p>","categories":[],"uniqueId":"129097","url":"jquery-plugin-little-colour-boxes-launched","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-seven.jpg"},{"title":"Best of the web round-up – Autumn 2010","link":"http://www.suburban-glory.com/blog?page=128","author":"Andy Walpole","publishedDate":"1290516603000","contentSnippet":"The 2000 mile per hour technology drop we all seem to be living in shows not sign of abating. As the European economies stagger ...","content":"<p>The 2000 mile per hour technology drop we all seem to be living in shows not sign of abating. As the European economies stagger from bad to worse we might all be going to hell on a handcart, but at least we'll be able to drown out the screams of our fellow human beings by listening to iTunes on our iPods.</p>\n\n<p>And when it comes to technology the web is at the centre of much of the latest innovation with the mobile platform being the next great horizon closely followed by internet access via our TV's.</p>\n\n<p>These are all items that have arrived in my Google Reader inbox (subscribed to 70 plus blogs and  counting) and which I have marked as worthy of referring to at some later unspecified date; either for personal reasons, or as something worth passing on to a client.</p>\n\n<p>If your thing is CSS3, HTML5, JavaScript, PHP and internet marketing then there'll be something here for you.</p>\n\n<p>This is my first post since July and I have, dear reader, decided to set aside one day per week to enable me to write some quality posts, in particular I want to finish my complete guides to CSS.</p>\n\n<p>So, here we go...</p>\n\n<p><a href=\"http://www.kaushik.net/avinash/2010/11/beginners-guide-web-data-analysis-ten-steps-tips-best-practices.html\">Beginner&#39;s Guide To Web Data Analysis: Ten Steps To Love &amp; Success</a></p>\n\n<p>This is one for the statisticians amongst us but if you want to become serious about SEO then you'll need to be able to take apart the mountain of analytical data that even a modest website can accumulate. Avinash Kaushik gives us ten tips on how to do that in this lengthy article.</p>\n\n<p><a href=\"http://blogs.sitepoint.com/2010/11/19/mysql-mistakes-php-developers/\">Top 10 MySQL Mistakes Made By PHP Developers</a></p>\n\n<p>\nThe title of this Sitepoint article is self-explanatory but it's a worthy read for all PHP munchers out there.</p>\n\n<p>\n<a href=\"http://www.phpclasses.org/blog/post/135-Accelerate-Web-Pages-Automatically-using-Google-ModPageSpeed-Unusual-Site-Speedup-Techniques-Part-4.html\">Accelerate Web Pages Automatically using Google Mod_PageSpeed: Unusual Site Speedup Techniques Part 4 - PHP Classes blog</a></p>\n\n<p>Google are on a Mission To Speed Up The World Wide Web and they have just released a module for Apache servers to assist us.</p>\n\n<p>Manuel Lemos explains the features of mod_pagespeed stating “Mod_PageSpeed is definitely an awesome idea. I would say that it is kind of magic. It is like having an expert on Web page optimization working for you for free.”</p>\n\n<p><a href=\"http://blumenthals.com/blog/2010/11/17/google-places-updates-quality-guidelines/\">Google Places Updates Quality Guidelines</a></p>\n\n<p>I saved this one so as to forward the link on to my clients. If you use Google Places for you business website than you MUST read this article as it provides valuable advice about to avoid being rejected or penalised.</p>\n\n<p><a href=\"http://dailyseotip.com/all-you-need-to-know-about-link-building-in-60-seconds/1181/\">All You Need To Know About Link Building (in 60 seconds)</a></p>\n\n<p>This is another one I saved so as to use with clients: “There's this link building thing blah blah blah I tell you what read Zeke Camusio's article as that summarises the important points”.</p>\n\n<p><a href=\"http://www.1stwebdesigner.com/inspiration/creative-single-page-websites/\">50 Insanely Creative Examples of Single Page Websites</a></p>\n\n<p>One-page websites look set to continue with their popularity and here 1stwebdesigner.com present a number of examples from this particular style stable.</p>\n\n<p><a href=\"http://trevordavis.net/blog/jquery-one-page-navigation-plugin/\">jQuery One Page Navigation Plugin</a>\n</p>\n\n<p>And here's a jQuery plugin to help you with your one-page thang.</p>\n\n<p><a href=\"http://www.lullabot.com/articles/drupal-exposed\">Drupal: Exposed: Peeking behind the curtain at what makes Drupal tick</a>/p&gt;\n\n</p><p>One for all the Drupal coding kids from Lullabot's Angie Byron</p>\n\n<p><a href=\"http://www.chapterthree.com/blog/nica_lorber/how_run_creative_design_process_big_project\">How To Run A Creative Design Process For A Big Project</a></p>\n\n<p>Nica Lorber gives a fantastically insightful run-down of the Three Chapters design and development methodology. Kudos goes to Nica for this and for giving document examples at the end.</p>\n\n<p><a href=\"http://thinkvitamin.com/code/php-password-hashing/\">PHP: Password Hashing [Video Tutorial]</a></p>\n\n<p>A short, easy to follow vid on PHP password hashing from Think Vitamin</p>\n\n<p><a href=\"http://techportal.ibuildings.com/2010/10/07/understanding-apc/\">Understanding APC</a></p>\n\n<p>I bookmarked this one as a greater understanding of server technology is on My Things To Do In 2011 list.</p>\n\n<p><a href=\"http://blog.kissmetrics.com/color-psychology/\">How do colors affect purchases?</a></p>\n\n<p>I love this item – check out the diagram.</p>\n\n<p><a href=\"http://davidwalsh.name/dojo-widget\">Creating Dojo Widgets Programmatically or Declaratively</a></p>\n\n<p>JavaScript extraordinaire David Walsh kindly gives to us another Dojo tutorial.</p>\n\n<p><a href=\"http://blog.rebeccamurphey.com/scaffolding-a-buildable-dojo-application\">Scaffolding a Buildable Dojo Application</a></p>\n\n<p>Rebecca Murphy gives a detailed guide on how best to use the the Dojo framework without all the unnecessary code that comes with the CDN version. This is one for only the most serious Dojo heads.</p>\n\n<p><a href=\"http://www.1stwebdesigner.com/resources/fonts-big-headlines/\">40 Awesome Free Fonts for Big Headlines</a></p>\n\n<p>Lots of font inspiration here</p>\n\n<p><a href=\"http://www.1stwebdesigner.com/development/useful-css-snippets/\">25 Incredibly Useful CSS Snippets for Developers</a></p>\n\n<p>I bet even the most seasoned CSS coders will find a new snippet or two here.</p>\n\n<p><a href=\"http://www.alistapart.com/articles/kick-ass-kickoff-meetings/\">Kick Ass Kickoff Meetings</a></p>\n\n<p>A List Apart does it again (and again and again and again). Kevin M. Hoffman details how to get the most out of those initial planning meetings with clients.</p>\n\n<p><a href=\"http://blogs.sitepoint.com/2010/08/03/how-to-redirect-old-urls-php/\">How to Avoid 404s and Redirect Old URLs in PHP</a></p>\n\n<p>This Sitepoint article by Craig Buckler does what it says on the tin</p>\n\n<p><a href=\"http://webaim.org/blog/javascript-as-an-accessibility-concern/\">Javascript as an accessibility concern</a>\n</p>\n\n<p>Debunks the myth that graceful degradation is essential for accessibility.</p>","categories":[],"uniqueId":"129051","url":"best-the-web-round-up-autumn-2010","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-eight.jpg"},{"title":"A complete guide to CSS pseudo-elements","link":"http://www.suburban-glory.com/blog?page=127","author":"Andy Walpole","publishedDate":"1279558157000","contentSnippet":"Pseudo-elements are fantastically useful as they allow greater control of elements and selectors without extra HTML ...","content":"<p>Pseudo-elements are fantastically useful as they allow greater control of elements and selectors without extra HTML mark-up.</p>\n\n<p>As with much advanced CSS, pseudo-element take up has been slow amongst web designers because of poor support in Internet Explorer.</p>\n\n<p>However, as IE6 is rapidly becoming extinct that only leaves IE7 to consign to the dustbin of history.</p>\n\n<h3>CSS 2.1 pseudo-elements</h3>\n\n<p>There are only two pseudo-elements that are understood by all popular browsers including IE from version 5 upwards, and they are :first-letter and :first-line. </p>\n\n<p>Their purpose should be quite obvious but below are two examples of how they work.</p>\n\n<pre>\np:first-letter {\nfont-size : 150%;\n}\n</pre>\n\n<pre>\np:first-line {\nfont-size : 150%;\n}\n</pre>\n\n<p>The first code block increases the size of the first letter in the paragraph by 150% while the second increases the first line of the paragraph by 150%. It's definitely worth trying out :first-letter as that can add a nice typographic touch to your design.</p>\n\n<p>The final two CSS 2.1 pseudo-elements are :after and :before.</p>\n\n<p>A vital part of these two is also the :content declaration.</p>\n\n<p>As an example:</p>\n\n<pre>\np:before {\ncontent : \" Text added to the beginning of the paragraph\";\n}\n</pre>\n\n<pre>\np:after {\ncontent : \" Text added to the end of the paragraph\";\n}\n</pre>\n\n<p>This can actually add text to a document without using HTML! But you don't have to use it to add text, try adding images with a line such as content: url(“image.gif”).</p>\n\n<p>As with any CSS it really is a good to roll your sleeves up and experiment with it. Use the code above and play around with images, margins and padding – why not add an image of quotation marks on either side of a blockquote?</p>\n\n<p>You'll be surprised just how great it can look in action. They work in every browser apart from Internet Explorer 6 and 7.</p>\n\n<h4>CSS 3.0 pseudo-elements</h4>\n\n<p>It was decided by the W3C that as of 3.0 pseudo-elements should use the double colon instead of a single one. This is so they can be clearly distinguished from pseudo-classes. </p>\n\n<p>So the difference is:</p>\n\n<table border=\"1\"><tr><th>CSS 2.1</th>\n<th>CSS 3.0</th>\n</tr><tr><td>:after</td>\n<td>::after</td>\n</tr><tr><td>:before</td>\n<td>::before</td>\n</tr><tr><td>:first-letter</td>\n<td>::first-letter</td>\n</tr><tr><td>:first-line</td>\n<td>::first-line</td>\n</tr></table><p> \n\t\t\t\t\nWe all should be using the double colon declaration by now but the problem with this is – yes, you guessed it – Internet Explorer, where support for the double colon version is buggy. So stick with CSS 2.1.</p>\n\n<p>However, CSS 3.0 has brought us five new pseudo-elements:</p>\n\n<p><strong>\n::selection\n::value\n::choices\n::repeat-item\n::repeat-index\n</strong></p>\n\n<p>Lets examine them all.</p>\n\n<p><strong>\n::selection\n</strong></p>\n\n<p>When you drag your cursor across the page in order to then right click and copy, the browser uses its inbuilt style sheet to change the background colour and the colour of the text. This is always a dark background and a light text colour. ::selection allows you to change this, as below:</p>\n\n<pre>\n::-moz-selection{\n  background-color: red;\n  color: yellow;\n}\n</pre>\n\n\n<pre>\n::selection {\n background-color: red;\n  color: yellow;\n}\n</pre>\n\n<p>If you use the CSS above then when the user drags their mouse over some text there will be a red background and yellow text in Opera, Safari, Chome and Firefox (but only with the moz prefix)</p>\n\n<p>Is it also possible when using this pseudo-element to change the cursor and outline.</p>\n\n<p><strong>::value / ::choices / ::repeat-item / ::repeat-index</strong></p>\n\n<p>These four are all directly connected to XForms. What are they?! I hear you cry. Xforms are a never-ending W3C project that is supposed to be “an XML application that represents the next generation of forms for the Web”.</p>\n\n<p>There was once going to be an XForms module for XHMTL 2.0 but that version of XTHML has now been retired. </p>\n\n<p>Nevertheless, in October 2009 XForms 1.1 became an official W3C Recommendation so there's still some life in it. For further details read the <a href=\"http://en.wikipedia.org/wiki/XForms\">XForms Wikipedia entry</a>.</p>","categories":[],"uniqueId":"127955","url":"complete-guide-css-pseudo-elements","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-nine.jpg"},{"title":"Best of the Web for May and June 2010","link":"http://www.suburban-glory.com/blog?page=126","author":"Andy Walpole","publishedDate":"1278131884000","contentSnippet":"Hay ho pop pickers this is the best web design and development blog posts from the last couple of months.\n\nAs usual, there is a ...","content":"<p>Hay ho pop pickers this is the best web design and development blog posts from the last couple of months.</p>\n\n<p>As usual, there is a mixture of CSS, HTML5, JavaScript, PHP and SEO. </p>\n\n<p>I hope you find some inspiration here as there are some fantastic articles which any web creative can learn from.</p>\n\n<p><a href=\"http://www.seomoz.org/blog/patience-is-an-seo-virtue\">Patience is an SEO Virtue</a></p>\n\n<p>This is one to show your client when their expectations are one of an immediate return.</p>\n\n<p><a href=\"http://davidwalsh.name/dojo-connect\">dojo.connect: A Powerful Object and Event Listener</a> &amp; <a href=\"http://davidwalsh.name/dojo-quotes\">Better Pull Quotes with the Dojo Toolkit</a></p>\n\n<p>David Walsh continues on his Dojo quest. I do mean to write a guide to using the Dojo JavaScript framework – perhaps in the Autumn.</p>\n\n<p><a href=\"http://2bits.com/drupal-planet/reducing-server-resource-utilization-busy-sites-implementing-fast-404s-drupal.html\">Reducing server resource utilization for busy sites by implementing fast 404s in Drupal</a></p>\n\n<p>This is a useful tips for fine tuning a busy Drupal site</p>\n\n<p><a href=\"http://www.impressivewebs.com/css-white-space/\">The CSS white-space Property Explained</a></p>\n\n<p>Louis Lazaris does a useful job at explaining this little used and little understood feature of CSS</p>\n\n<p><a href=\"http://www.1stwebdesigner.com/resources/the-ultimate-roundup-of-indispensable-and-helpful-html5-tutorials/\">The Ultimate Roundup of Indispensable and Helpful HTML5 </a></p>\n\n<p>HTML5 – what all the cool kids are talking about</p>\n\n<p><a href=\"http://www.smallbusinesssem.com/how-local-search-works-in-2010/3338/\">How Local Search Works in 2010</a></p>\n\n<p>There's valuable information here for all this interested in the subject of local SEO, but I really do wish they would provide it in a format which is easy to print off.</p>\n\n<p><a href=\"http://daggle.com/mainstream-media-stole-news-story-credit-1906\">How The Mainstream Media Stole Our News Story Without Credit</a></p>\n\n<p>Written by Danny Sullivan, this is one of the most fascinating stories on the relationship between bloggers and the mainstream media that I've read in a long time.</p>\n\n<p><a href=\"http://www.seomoz.org/blog/seo-site-audits-getting-started\">SEO Site Audits: Getting Started</a></p>\n\n<p>Lindsay at SEOmoz provides a guide to guerilla SEO.</p>\n\n<p><a href=\"http://www.seomoz.org/blog/an-illustrated-guide-to-the-science-of-persuasion-influence\">An Illustrated Guide to the Science of Influence &amp; Persuasion</a></p>\n\n<p>Rand brings psychology into the SEO equation.</p>\n\n<p><a href=\"http://html5watch.tumblr.com/\">HTML5 Watch</a></p>\n\n<p>A new websites that gives exposure to HTML5 related articles</p>\n\n<p><a href=\"http://code.google.com/webfonts\">Google Font Directory</a></p>\n\n<p>It's early days yet for the Google Font Directory but I'll be watching to see how it matures.</p>\n\n<p><a href=\"http://www.alistapart.com/articles/responsive-web-design/\">Responsive Web Design</a></p>\n\n<p>It's very rare that you an article that is genuinely ground-breaking but Ethan Marcotte achieves that with this item on A List Apart. In essence, he proposes a workable way of designing for smaller mobile resolutions.</p>\n\n<p><a href=\"http://www.tuttoaster.com/getting-started-with-pdf-generation-in-php/\">Getting started with pdf generation in PHP</a></p>\n\n<p>Abhin Sharma explains an incredibly easy way of generating PDFs by using the FPDF PHP library.</p>\n\n<p><a href=\"http://www.stevesouders.com/blog/2010/05/11/appendchild-vs-insertbefore/\">appendChild vs insertBefore</a></p>\n\n<p>Steve Souders looks at the most efficient way of including files using JavaScript.</p>\n\n<p><a href=\"http://fourkitchens.com/blog/2010/05/09/drop-cron-use-hudson-instead\">Drop that cron; use Hudson instead</a></p>\n\n<p>I'm very much in to looking for alternatives to cron so I've bookmarked this one for future reference.\n</p>","categories":[],"uniqueId":"127813","url":"best-the-web-may-june-2010","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-ten.jpg"},{"title":"A complete guide to CSS pseudo-classes","link":"http://www.suburban-glory.com/blog?page=125","author":"Andy Walpole","publishedDate":"1276251265000","contentSnippet":"CSS 2.1 pseudo-classes\n\n\na:link {color:#3344dd}    \na:visited {color:#804180}  \na:hover {color:#b50010}  \na:active ...","content":"<h3>CSS 2.1 pseudo-classes</h3>\n\n<p><strong>\na:link {color:#3344dd}    <br>\na:visited {color:#804180}  <br>\na:hover {color:#b50010}  <br>\na:active {color:#b50010} <br></strong></p>\n\n<p>The above CSS pseudo-classes should already be familiar to you, but if they aren't here is a brief explanation.</p>\n\n<p>:link is the declaration for the link before the user has clicked on it.\n:visited is the state of the link after the user has visited the page it points to.\n:hover is the declaration for a link when the cursor moves over it.\n:active is the selected link</p>\n\n<p>These are all used for styling links while :focus below is used for fields in forms. </p>\n\n<p>This will give the field a yellow background when the cursor is clicked in the box:</p>\n\n<pre>\ninput:focus{\nbackground : #ffff00;\n}\n</pre>\n\n<p>:focus is not support in IE6 and IE7 and :active is not supported in IE6 and only partially supported in IE7.</p>\n\n<p>The five remaining CSS 2.1 pseudo-classes are below.</p>\n\n<p><strong>:lang(C) </strong></p>\n\n<p>Similar to the attribute selector, this pseudo-class will allow you to match your CSS in the language specified in the HTML document, like so:</p>\n\n<pre>\n:lang(en) p {\nbackground : #ffffcc;\n}\n</pre>\n\n<p>The above will give a yellow background behind all paragraphs that have either xml:lang=\"en\" or lang=\"en\" specified in the page.</p>\n\n<p><strong>\n:first-child\n</strong></p>\n\n<p>This is a useful CSS rule and it serves as an introduction to the myriad of CSS 3.0 pseudo-classes.</p>\n\n<p>The only browser it doesn't work in is IE6. Here's how it looks in action and it does what you would expect:</p>\n\n<pre>\np:first-child {\nbackground : #ffffcc;\n}\n</pre>\n\n\n\n<pre>\nul li:first-child {\nbackground : #ffffcc;\n}\n</pre>\n\n<p>The first block of code changes the background of the first paragraph while the latter does the same to first list item.</p>\n\n<p><strong>\n@page :first / @page :left / @page :right \n</strong></p>\n\n<p>These three are part of a number of CSS rules intended to create beautifully printed pages. They are quite arcane though and little used. For further information read <a href=\"http://msdn.microsoft.com/en-us/library/dd433064%28VS.85%29.aspx\">this article here</a>. They are only supported in a few browsers.</p>\n\n<h4>CSS 3.0 pseudo-classes</h4>\n\n<p>For me, this is where CSS becomes really very powerful and interesting. The key aspect of understanding this code is that it serves as a way of pinpointing certain elements on a page using only CSS and without adding any extra HTML.</p>\n\n<p>I would suggest that this is about as complex as CSS gets at the moment so don't expect to pick it up immediately, let alone become fluent in its use after reading this article.</p>\n\n<p>None of these work in any version of Internet Explorer but they all work in the latest versions of Opera, Chrome, Firefox and Safari. There is though a JavaScript solution to enable limited support in IE which is linked to at the bottom of this post.</p>\n\n<p><strong>\n:nth-child() \n</strong></p>\n\n<p>To demonstrate this pseudo-class lets say you have a list with five items. You need to style the third item and the third item only. If this is the case then use :nth-child() as below.</p>\n\n<pre>\nul li:nth-child(3) {\nbackground : #ffffcc\n}\n</pre>\n\n<p>But it's more powerful than just this simple use. </p>\n\n<pre>\nul li:nth-child(even) {\nbackground : #ffffcc\n}\n</pre>\n\n<p></p>\n\n<pre>\nul li:nth-child(odd) {\nbackground : #ffffcc\n}\n</pre>\n\n<p>The above will target all even numbered list items and odd numbered lists respectively. I'm using lists as an example but it could just as easily be paragraphs, table columns or a variety of different purposes.</p>\n\n<p>There's even a more precise use for :nth-child():</p>\n\n<pre>\nul li:nth-child(3n+2) {\ncolor: yellow;\n}\n</pre>\n\n<p>Note the addition of the letter n. This is a number expression an+b and this will target the second and fifth list item and so on in a pattern of 3.</p>\n\n<pre>\nul li:nth-child(4n+3) {\ncolor: yellow;\n}\n</pre>\n\n<p>Above will target the fourth and seventh list item and upwards in a pattern of 4.</p>\n\n<p>Confused? The best way of understanding this is by creating a simple HTML list and playing around with this CSS syntax yourself.</p>\n\n<p><strong>\n:nth-last-child()\n</strong></p>\n\n<p>This is exactly the same as :nth-child() but it reverses the order, for instance the code below would target the last list item on a page:</p>\n\n<pre>\nul li:nth-last-child(1) {\nbackground : #ffffcc;\n}\n</pre>\n\n<p><strong>\n:nth-of-type()\n</strong></p>\n\n<p>As with :nth-child() this can either be a number, odd or even and a number expression; however, this matches a child of a specific element type while :nth-child() matches any child.</p>\n\n<p>Again, lets give an example:</p>\n\n<pre>\np img:nth-of-type(1) {\nborder : 2px solid #ffff00;\n}\n</pre>\n\n<p>This will target the first image in any paragraph which :nth-of-type() is particularly useful for.</p>\n\n<pre>\np img:nth-of-type(1) {\nfloat : right;\n}\n</pre>\n\n\n<pre>\np img:nth-of-type(2) {\nfloat : left;\n}\n</pre>\n\n<p>Above will float the first image in the paragraph to the right and the second image to the left. </p>\n\n<p>The use of nth-of-type() over nth-child() allows more precision in targeting elements which need sometimes demands.</p>\n\n<p><strong>\nnth-last-of-type()\n</strong></p>\n\n<p>The same as :nth-of-type expect it selects from the bottom up. Below will give a border to the last image in a paragraph:</p>\n\n<pre>\np img:nth-of-type(1) {\nborder : 2px solid #ffff00;\n}\n</pre>\n\n<p><strong>\n:last-child\n</strong></p>\n\n<p>The reverse of :first-child. Below will highlight the last item in a list:</p>\n\n<pre>\nul li:last-child {\nbackground : #ffffcc\n}\n</pre>\n\n<p><strong>\n:first-of-type and :last-of-type\n</strong></p>\n\n<p>What :nth-of-type() is to :nth-child(), so :first-of-type and :last-of-type are to :first-child and :list-child respectively.</p>\n\n<p><strong>\n:only-child \n</strong></p>\n\n<p>This targets a single child of its parents. Look at the following code:</p>\n\n<pre>\n#wrapper p:only-child {\nbackground : #ffffcc\n}\n</pre>\n\n<p>Above would give a background colour to the paragraph only if there was one paragraph in the wrapper div. It's a struggle to find an example where this would come handy. If you can think of one post it up below!</p>\n\n<p><strong>\n:only-of-type\n</strong></p>\n\n<p>Matches the only child element of its type. If you want to create a border around an image in a paragraph if there is only one image then use the following code:</p>\n\n<pre>\np img:only-of-type {\nborder: 2px solid #ffffcc;\n}\n</pre>\n\n<p><strong>\n:empty\n</strong></p>\n\n<p>With this pseudo-class you can target an element with nothing in it. Maybe you are using a CMS and you want to hide a box until there is some user-generated content in which case you could use the code below. However, it's not particularly practical because even white space within the box would prevent it from working.</p>\n\n<pre>\n.box:empty {\ndisplay: none;\n}\n</pre>\n\n<p><strong>\n:target\n</strong></p>\n\n<p>This is a really useful little addition to the CSS library which allows styling when using fragment identifying in the URI. </p>\n\n<p>Www.example.com#extra - #extra is the fragment identifier in this URI.</p>\n\n<p>For a great tutorial on practical uses of :target read Craig Grannell's article <a href=\"http://www.netmag.co.uk/zine/develop-css/enhance-internal-page-links\">Enhance Internal Page Links</a> which appeared in issue #180 of net magazine</p>\n\n<p><strong>\n:not()\n</strong></p>\n\n<p>Also known as the negation pseudo-class this targets everything except that declared in the brackets. As an example this CSS will give every paragraph a yellow background except that with a class of highlight:</p>\n\n<pre>\np:not(.highlight) {\nbackground : #ffffcc;\n}\n</pre>\n\n<p><strong>\n:root\n</strong></p>\n\n<p>In a HTML document the root is html. </p>\n\n<p>-----------</p>\n\n<p>Now I'm going to show you some advanced CSS for forms which are a key constituent of most web sites.</p>\n\n<p>There are two attributes in HTML that help restrict the users ability to input data into a field. They are disabled and readonly. For instance you may want to add disabled=”disabled” to the submit button until the user fills in all the required details. They are mostly only used in conjunction with JavaScript and CSS 3.0 allows styling of one of these – disabled.</p>\n\n<pre>\ninput:disabled {\nbackground : #ffff00;\n}\n</pre>\n\n\n<pre>\ninput:enabled {\nbackground : #ffff00;\n}\n</pre>\n\n<p>The first example above would allows styling of all fields using the disabled attribute while the latter would affect fields not using it.</p>\n\n<p><strong>\n:checked\n</strong></p>\n\n<p>This is a useful little bit of CSS to use. It allows the styling of a form checkbox when it is checked. Below enlarges the box upon user interaction:</p>\n\n<pre>\ninput:checked {\nwidth: 20px;\nheight: 20px;\n}\n</pre>\n\n<p><strong>\n:indeterminate\n</strong></p>\n\n<p>This matches checkbox elements whose indeterminate DOM attribute is set to true by JavaScript.</p>\n\n<p><strong>\n:default /  :valid / :invalid / :in-range / :out-of-range / :required / :optional / :read-only / :read-write \n</strong></p>\n\n<p>These are all for use with XForms, details for which read the <a href=\"http://en.wikipedia.org/wiki/XForms\" rel=\"nofollow\">Wikipedia entry</a></p>\n\n<p>------------</p>\n\n<p>It depends how you use the above CSS but if used thoughtfully and sensibly then I see no reason why you can't use most of it without worrying about IE users. What it will give users of the more advanced browsers is some extra subtle and pleasing aesthetics that if IE users don't see won't harm their use of your site.</p>\n\n<p>However, as of January 2010, CSS3 pseudo-class selector emulation JavaScript has been released which allows some support in IE versions 5-8. Developer <a href=\"http://www.keithclark.co.uk/labs/ie-css3/\">Keith Clark</a> is responsible for this most welcome script and it works with all the main JavaScript libraries including jQuery, MooTools, DOMAssistant, Prototype, YUI and NWMatcher. I strongly recommend that you check out Keith's script.\n</p>\n\n<p>-----------------</p>\n\n<p><a href=\"http://www.suburban-glory.com/regions/web-design-epping.html\">Epping Web Design</a></p>","categories":[],"uniqueId":"127625","url":"complete-guide-css-pseudo-classes","commentsOpen":false,"displayImage":"images/blog-stock-images/stock-photo-one.jpg"}]